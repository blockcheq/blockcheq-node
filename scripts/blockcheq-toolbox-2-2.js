/////////////////////////////////////////
// Auto generated code. Do not modify! //
/////////////////////////////////////////

var BankerCompiled = {"abi":[{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"getAccountHashByOwner","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"string"}],"name":"getMustNotifyReceiver","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"string"},{"name":"status","type":"uint8"}],"name":"setNotified","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_codeline","type":"string"},{"name":"version","type":"uint256"}],"name":"getVersion","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"string"},{"name":"deliveredTo","type":"string"},{"name":"reason","type":"string"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"identifier","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"string"}],"name":"setMustNotifyReceiver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"accountNumber","type":"string"},{"name":"codeline","type":"string"},{"name":"checkType","type":"uint256"},{"name":"certifier","type":"string"}],"name":"addCheck","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"accountAddress","type":"address"}],"name":"setAccountContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getIdentityStore","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCheckManagerContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"string"},{"name":"status","type":"uint8"}],"name":"cleanNotified","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"string"}],"name":"getCheckIndex","outputs":[{"name":"checkIdx","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"accountNumber","type":"string"}],"name":"disableAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getAccountContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractAddress","type":"address"}],"name":"setIdentityStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"user","type":"address"}],"name":"isCheckOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_codelineHash","type":"bytes32"}],"name":"getBaseByHash","outputs":[{"name":"","type":"string"},{"name":"owner","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"checkType","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"string"},{"name":"status","type":"uint8"}],"name":"isNotified","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"string"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"status","type":"uint8"},{"name":"depositAccount","type":"string"},{"name":"deliveredTo","type":"string"},{"name":"reason","type":"string"},{"name":"securityCode","type":"string"},{"name":"newSecurityCode","type":"string"},{"name":"identifier","type":"string"},{"name":"certifier","type":"string"}],"name":"updateCheck","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getAccountHashByIndex","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"versionIndex","type":"uint256"},{"name":"user","type":"address"}],"name":"isCheckDest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCheckContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"string"}],"name":"cleanMustNotifyReceiver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"version","type":"uint256"}],"name":"getVersionByHash","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"string"},{"name":"deliveredTo","type":"string"},{"name":"reason","type":"string"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"identifier","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountOwner","type":"address"}],"name":"getAccountByAddress","outputs":[{"name":"owner","type":"address"},{"name":"","type":"string"},{"name":"balance","type":"uint256"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"}],"name":"getAccountByHash","outputs":[{"name":"owner","type":"address"},{"name":"","type":"string"},{"name":"balance","type":"uint256"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"checkManagerAddress","type":"address"}],"name":"setCheckManagerContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"accountOwner","type":"address"},{"name":"accountNumber","type":"string"},{"name":"accountBalance","type":"uint256"}],"name":"updateAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"accountNumber","type":"string"}],"name":"enableAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"checkAddress","type":"address"}],"name":"setCheckContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getBankCode","outputs":[{"name":"code","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"string"}],"name":"getAccountByNumber","outputs":[{"name":"owner","type":"address"},{"name":"","type":"string"},{"name":"balance","type":"uint256"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"identifier","type":"string"},{"name":"notifyAddress","type":"string"}],"name":"setIdentityNotifyAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"string"}],"name":"getChecksCount","outputs":[{"name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_codeline","type":"string"}],"name":"getBase","outputs":[{"name":"owner","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"checkType","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accountCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"accountOwner","type":"address"},{"name":"accountNumber","type":"string"},{"name":"accountBalance","type":"uint256"}],"name":"addAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"identifier","type":"string"}],"name":"getIdentityNotifyAddress","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"string"},{"name":"index","type":"uint256"}],"name":"getBaseByIndex","outputs":[{"name":"","type":"string"},{"name":"owner","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"checkType","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":""};

var RegulatorCompiled = {"abi":[{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"string"},{"name":"transactionIdx","type":"uint256"}],"name":"getTransaction","outputs":[{"name":"","type":"string"},{"name":"hash","type":"bytes32"},{"name":"version","type":"uint256"},{"name":"timeStamp","type":"uint256"},{"name":"status","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAccountLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"transactionStore","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumberHash","type":"bytes32"},{"name":"transactionIdx","type":"uint256"}],"name":"getTransactionByHash","outputs":[{"name":"","type":"string"},{"name":"hash","type":"bytes32"},{"name":"version","type":"uint256"},{"name":"timeStamp","type":"uint256"},{"name":"status","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"getBankByHash","outputs":[{"name":"id","type":"uint256"},{"name":"","type":"string"},{"name":"","type":"string"},{"name":"bankAddress","type":"address"},{"name":"contractAddress","type":"address"},{"name":"authorized","type":"bool"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getBankCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_code","type":"string"}],"name":"deleteBank","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_code","type":"string"},{"name":"bankName","type":"string"},{"name":"bankAddress","type":"address"},{"name":"contractAddress","type":"address"}],"name":"addBank","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"}],"name":"getBankHashByAccountHash","outputs":[{"name":"bankHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"string"}],"name":"getTransactionsLength","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"string"},{"name":"transactionIdx","type":"uint256"}],"name":"getCheckBase","outputs":[{"name":"checkIdx","type":"uint256"},{"name":"owner","type":"bytes32"},{"name":"codeline","type":"string"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"cType","type":"uint256"},{"name":"certifier","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"setRegulatorName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"string"},{"name":"transactionIdx","type":"uint256"}],"name":"getCheckVersion","outputs":[{"name":"status","type":"uint8"},{"name":"","type":"string"},{"name":"","type":"string"},{"name":"reason","type":"string"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumberHash","type":"bytes32"},{"name":"transactionIdx","type":"uint256"}],"name":"getCheckBaseByHash","outputs":[{"name":"checkIdx","type":"uint256"},{"name":"owner","type":"bytes32"},{"name":"codeline","type":"string"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"cType","type":"uint256"},{"name":"certifier","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getBankByIndex","outputs":[{"name":"id","type":"uint256"},{"name":"","type":"string"},{"name":"","type":"string"},{"name":"bankAddress","type":"address"},{"name":"contractAddress","type":"address"},{"name":"authorized","type":"bool"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"},{"name":"id","type":"uint256"}],"name":"isTransactionAccesibleByHash","outputs":[{"name":"accesible","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"getTransactionsLengthByHash","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumberHash","type":"bytes32"},{"name":"transactionIdx","type":"uint256"}],"name":"getCheckVersionByHash","outputs":[{"name":"status","type":"uint8"},{"name":"","type":"string"},{"name":"","type":"string"},{"name":"","type":"string"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_code","type":"string"}],"name":"getBankByCode","outputs":[{"name":"id","type":"uint256"},{"name":"","type":"string"},{"name":"","type":"string"},{"name":"bankAddress","type":"address"},{"name":"contractAddress","type":"address"},{"name":"authorized","type":"bool"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"regulatorName","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"transactionAddress","type":"address"}],"name":"setTransactionContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getRegulatorName","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"bankStore","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getAccountHash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"string"}],"name":"getBankHashByAccount","outputs":[{"name":"bankHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"bankAddress","type":"address"}],"name":"setBankContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"bankCode","type":"string"},{"name":"accountNumber","type":"string"},{"name":"codeline","type":"string"},{"name":"version","type":"uint256"},{"name":"status","type":"uint8"}],"name":"addTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_code","type":"string"},{"name":"bankName","type":"string"},{"name":"bankAddress","type":"address"},{"name":"contractAddress","type":"address"},{"name":"authorized","type":"bool"}],"name":"updateBank","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_code","type":"string"}],"name":"restoreBank","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"string"},{"name":"id","type":"uint256"}],"name":"isTransactionAccesible","outputs":[{"name":"accesible","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":""};

var BcAccountStoreCompiled = {"abi":[{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_bankStoreContract","type":"address"}],"name":"setBankStoreContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"code","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountOwner","type":"address"}],"name":"getByAddress","outputs":[{"name":"owner","type":"address"},{"name":"number","type":"bytes32[2]"},{"name":"balance","type":"uint256"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_checkStoreAddress","type":"address"}],"name":"setCheckStoreAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"accountOwner","type":"address"},{"name":"accountNumber","type":"bytes32[2]"},{"name":"accountBalance","type":"uint256"}],"name":"update","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"accountNumber","type":"bytes32[2]"}],"name":"disable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_code","type":"bytes32"}],"name":"setBankCode","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"}],"name":"getByHash","outputs":[{"name":"owner","type":"address"},{"name":"number","type":"bytes32[2]"},{"name":"balance","type":"uint256"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"accountNumber","type":"bytes32[2]"}],"name":"enable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"bytes32[2]"}],"name":"getByNumber","outputs":[{"name":"owner","type":"address"},{"name":"number","type":"bytes32[2]"},{"name":"balance","type":"uint256"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"accountOwner","type":"address"},{"name":"accountNumber","type":"bytes32[2]"},{"name":"accountBalance","type":"uint256"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"getHashByOwner","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getHashByIndex","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":"0x606060405260008060146101000a81548160ff021916908360ff1602179055506001600060156101000a81548160ff021916908360ff1602179055506002600060166101000a81548160ff021916908360ff1602179055506003600060176101000a81548160ff021916908360ff1602179055506004600060186101000a81548160ff021916908360ff1602179055506001600060196101000a81548160ff021916908360ff16021790555060026000601a6101000a81548160ff021916908360ff16021790555060046000601b6101000a81548160ff021916908360ff16021790555060086000601c6101000a81548160ff021916908360ff16021790555060016000601d6101000a81548160ff021916908360ff16021790555060026000601e6101000a81548160ff021916908360ff16021790555060046000601f6101000a81548160ff021916908360ff16021790555060018060006101000a81548160ff021916908360ff16021790555060026001806101000a81548160ff021916908360ff1602179055506004600160026101000a81548160ff021916908360ff1602179055506000600160036101000a81548160ff021916908360ff16021790555060018060046101000a81548160ff021916908360ff160217905550336000806101000a815481600160a060020a030219169083600160a060020a03160217905550611608806102116000396000f3006060604052600436106101925763ffffffff60e060020a60003504166304116a8381146101a457806306661abd146101cd5780631038c9b7146101f257806310ba4dc8146102055780631b91a8851461021857806324c12bf6146102375780632b5f20891461024a5780632e664d221461025d57806330257bf7146102705780633465e9e3146102e7578063409f8ea7146102fa578063436f738f1461030d5780634fb2e45d1461032c57806360f12b411461034b57806362ffddc61461039657806366b649fe146103a95780636d3ee5e1146103bc5780637803b88a146103cf57806382acfdb5146104205780638721d42f14610433578063880086f61461046f5780638f32d59b14610485578063a2dd3d47146104ac578063a3759356146104c2578063a5a582b6146104fe578063acb0bbe014610511578063adb8ce4b14610524578063c83f33a814610537578063cc0f0eae14610573578063cd3aa46114610586578063dc48c5c3146105d1578063ddadf633146105f0578063df535bc114610603578063ec05818614610616575b341561019d57600080fd5b600080fd5b005b34156101af57600080fd5b6101b761062c565b60405160ff909116815260200160405180910390f35b34156101d857600080fd5b6101e0610651565b60405190815260200160405180910390f35b34156101fd57600080fd5b6101b7610658565b341561021057600080fd5b6101b7610679565b341561022357600080fd5b6101a2600160a060020a0360043516610688565b341561024257600080fd5b6101e06106d8565b341561025557600080fd5b6101b76106de565b341561026857600080fd5b6101b76106ec565b341561027b57600080fd5b61028f600160a060020a03600435166106fd565b604051600160a060020a03851681526020810184604080838360005b838110156102c35780820151838201526020016102ab565b50505050919091019384525050151560208201526040908101925090505180910390f35b34156102f257600080fd5b6101b761087e565b341561030557600080fd5b6101b76108a1565b341561031857600080fd5b6101a2600160a060020a03600435166108c9565b341561033757600080fd5b6101a2600160a060020a0360043516610919565b341561035657600080fd5b6101a260048035600160a060020a031690606460246002604080519081016040528092919082600260200280828437509395505092359250610969915050565b34156103a157600080fd5b6101b7610ad9565b34156103b457600080fd5b6101b7610ae9565b34156103c757600080fd5b6101b7610b0f565b34156103da57600080fd5b6101e060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610b3995505050505050565b341561042b57600080fd5b6101b7610b75565b341561043e57600080fd5b6101a26004604481600260408051908101604052809291908260026020028082843750939550610ba0945050505050565b341561047a57600080fd5b6101a2600435610d54565b341561049057600080fd5b610498610d7a565b604051901515815260200160405180910390f35b34156104b757600080fd5b61028f600435610d95565b34156104cd57600080fd5b6101a26004604481600260408051908101604052809291908260026020028082843750939550610e2a945050505050565b341561050957600080fd5b6101b7610fe1565b341561051c57600080fd5b6101b7610ff1565b341561052f57600080fd5b6101b7611015565b341561054257600080fd5b61028f600460448160026040805190810160405280929190826002602002808284375093955061101e945050505050565b341561057e57600080fd5b6101b76110de565b341561059157600080fd5b6101a260048035600160a060020a031690606460246002604080519081016040528092919082600260200280828437509395505092359250611100915050565b34156105dc57600080fd5b6101e0600160a060020a03600435166112c1565b34156105fb57600080fd5b6101b76112dc565b341561060e57600080fd5b6101b7611303565b341561062157600080fd5b6101e0600435611313565b6000547801000000000000000000000000000000000000000000000000900460ff1681565b6007545b90565b60005474010000000000000000000000000000000000000000900460ff1681565b60015462010000900460ff1681565b600054600160a060020a031661069d81611337565b15156106a857600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60025481565b600154610100900460ff1681565b600154640100000000900460ff1681565b600061070761151f565b600160a060020a0383166000908152600660209081526040808320548352600590915280822082916107af9082906080905190810160409081528254600160a060020a031682529091906020830190600183019060029080519081016040529190828260026020028201915b815481526001909101906020018083116107735750505091835250506003820154602082015260049091015460ff161515604090910152611370565b1561081757805460038201546004830154600160a060020a039092169160018401919060ff16826002604080519081016040529190828260026020028201915b815481526001909101906020018083116107ef57505050505092509450945094509450610876565b80546004820154600160a060020a0390911690600183019060009060ff16826002604080519081016040529190828260026020028201915b8154815260019091019060200180831161084f575050505050925081915094509450945094505b509193509193565b600054760100000000000000000000000000000000000000000000900460ff1681565b6000547b01000000000000000000000000000000000000000000000000000000900460ff1681565b600054600160a060020a03166108de81611337565b15156108e957600080fd5b506004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031661092e81611337565b151561093957600080fd5b506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080548190600160a060020a031661098181611337565b151561098c57600080fd5b600354600254600091600160a060020a03169063da505de49083604051610100015260405160e060020a63ffffffff8416028152600481019190915260240161010060405180830381600087803b15156109e557600080fd5b6102c65a03f115156109f657600080fd5b50505060405180519060200180519060200180604001805190602001805190602001805190602001805150602001604052955050508315159250610a3c91505057600080fd5b8551602087015160405191825260208201526040908101905190819003902060008181526005602052604090206004810154919550935060ff161515610a8157600080fd5b50508054600160a060020a03908116600090815260066020526040808220829055835473ffffffffffffffffffffffffffffffffffffffff191697909216968717835560039092019390935593845292209190915550565b60005460e060020a900460ff1681565b600054790100000000000000000000000000000000000000000000000000900460ff1681565b6000547d010000000000000000000000000000000000000000000000000000000000900460ff1681565b6000610b4361151f565b610b4c836113bf565b905080516020820151604051918252602082015260409081019051809103902091505b50919050565b6000547e01000000000000000000000000000000000000000000000000000000000000900460ff1681565b60008054600160a060020a0316610bb681611337565b1515610bc157600080fd5b600354600254600091600160a060020a03169063da505de49083604051610100015260405160e060020a63ffffffff8416028152600481019190915260240161010060405180830381600087803b1515610c1a57600080fd5b6102c65a03f11515610c2b57600080fd5b50505060405180519060200180519060200180604001805190602001805190602001805190602001805150602001604052955050508315159250610c7191505057600080fd5b60056000855160208701516040519182526020820152604090810190518091039020600019166000191681526020019081526020016000209250610d2483608060405190810160409081528254600160a060020a0316825290919060208301906001830190600290805190810160409081528354825290929190830160018301602085018083116107735750505091835250506003820154602082015260049091015460ff161515604090910152611370565b8015610d3957508254600160a060020a031615155b1515610d4457600080fd5b5050600401805460ff1916905550565b600054600160a060020a0316610d6981611337565b1515610d7457600080fd5b50600255565b60008054610d9090600160a060020a0316611337565b905090565b6000610d9f61151f565b60008381526005602052604080822082916107af9082906080905190810160409081528254600160a060020a0316825290919060208301906001830190600290805190810160409081528354825290929190830160018301602085018083116107735750505091835250506003820154602082015260049091015460ff161515604090910152611370565b60008054600160a060020a0316610e4081611337565b1515610e4b57600080fd5b600354600254600091600160a060020a03169063da505de49083604051610100015260405160e060020a63ffffffff8416028152600481019190915260240161010060405180830381600087803b1515610ea457600080fd5b6102c65a03f11515610eb557600080fd5b50505060405180519060200180519060200180604001805190602001805190602001805190602001805150602001604052955050508315159250610efb91505057600080fd5b60056000855160208701516040519182526020820152604090810190518091039020600019166000191681526020019081526020016000209250610fae83608060405190810160409081528254600160a060020a0316825290919060208301906001830190600290805190810160409081528354825290929190830160018301602085018083116107735750505091835250506003820154602082015260049091015460ff161515604090910152611370565b8015610fc357508254600160a060020a031615155b1515610fce57600080fd5b5050600401805460ff1916600117905550565b6001546301000000900460ff1681565b60005477010000000000000000000000000000000000000000000000900460ff1681565b60015460ff1681565b600061102861151f565b600080806005818751602089015160405191825260208201526040908101905180910390206000191660001916815260200190815260200160002090506107af81608060405190810160409081528254600160a060020a0316825290919060208301906001830190600290805190810160409081528354825290929190830160018301602085018083116107735750505091835250506003820154602082015260049091015460ff161515604090910152611370565b6000547501000000000000000000000000000000000000000000900460ff1681565b600080548190600160a060020a031661111881611337565b151561112357600080fd5b600354600254600091600160a060020a03169063da505de49083604051610100015260405160e060020a63ffffffff8416028152600481019190915260240161010060405180830381600087803b151561117c57600080fd5b6102c65a03f1151561118d57600080fd5b505050604051805190602001805190602001806040018051906020018051906020018051906020018051506020016040529550505083151592506111d391505057600080fd5b8551602087015160405191825260208201526040908101905190819003902060008181526005602052604090206004810154919550935060ff1615801561122257508254600160a060020a0316155b151561122d57600080fd5b825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881617835561126260018401876002611547565b506003830185905560048301805460ff19166001908117909155600160a060020a038816600090815260066020526040902085905560078054909181016112a98382611587565b50600091825260209091200193909355505050505050565b600160a060020a031660009081526006602052604090205490565b6000547a010000000000000000000000000000000000000000000000000000900460ff1681565b60005460f860020a900460ff1681565b600060078281548110151561132457fe5b9060005260206000209001549050919050565b600081600160a060020a031633600160a060020a0316148061136a575081600160a060020a031632600160a060020a0316145b92915050565b6000805432600160a060020a039081169116148061139c575060045433600160a060020a039081169116145b8061136a57508151600160a060020a031632600160a060020a0316149050919050565b6113c761151f565b6113cf61151f565b600080845191506020821115611424576113f46113ef8660006020611439565b6114f6565b835250601f19810161141a6113ef8660208085116114125784611415565b60205b611439565b6020840152611430565b61142d856114f6565b83525b50909392505050565b6114416115b0565b6114496115b0565b6114516115b0565b6000869250846040518059106114645750595b818152601f19601f830116810160200160405290509150600090505b848110156114ec57828187018151811061149657fe5b016020015160f860020a900460f860020a028282815181106114b457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101611480565b5095945050505050565b60006115006115b0565b5081805115156115135760009150610b6f565b60208301519392505050565b604080519081016040526002815b6000815260001991909101906020018161152d5790505090565b8260028101928215611577579160200282015b82811115611577578251825560209092019160019091019061155a565b506115839291506115c2565b5090565b8154818355818115116115ab576000838152602090206115ab9181019083016115c2565b505050565b60206040519081016040526000815290565b61065591905b8082111561158357600081556001016115c85600a165627a7a7230582083e89ab474438c43f7fbb26663268acac5f7b566b4101a381fdd821eba7bc39a0029"};

var BcBankStoreCompiled = {"abi":[{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_code","type":"bytes32"},{"name":"bankName","type":"bytes32[2]"},{"name":"bankAddress","type":"address"},{"name":"contractAddress","type":"address"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_code","type":"bytes32"}],"name":"enable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"bankOwner","type":"address"}],"name":"getByAddress","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32[2]"},{"name":"","type":"address"},{"name":"","type":"address"},{"name":"","type":"bool"},{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_code","type":"bytes32"},{"name":"bankName","type":"bytes32[2]"},{"name":"bankAddress","type":"address"},{"name":"contractAddress","type":"address"},{"name":"authorized","type":"bool"}],"name":"update","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"getByHash","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32[2]"},{"name":"","type":"address"},{"name":"","type":"address"},{"name":"","type":"bool"},{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codePosition","type":"uint256"},{"name":"codeLength","type":"uint256"}],"name":"setCodeLocation","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_code","type":"bytes32"}],"name":"disable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_code","type":"bytes32"}],"name":"getByCode","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32[2]"},{"name":"","type":"address"},{"name":"","type":"address"},{"name":"","type":"bool"},{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_code","type":"bytes32"}],"name":"getContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCodeLocation","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getHashByIndex","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":""};

var BcCheckStoreCompiled = {"abi":[{"constant":false,"inputs":[{"name":"codeline","type":"bytes32[2]"},{"name":"status","type":"uint8"}],"name":"cleanNotified","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCheckTypeStore","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"bytes32[2]"}],"name":"cleanMustNotifyReceiver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_transactionStoreAddress","type":"address"}],"name":"setTransactionStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"bytes32[2]"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"securityCode","type":"bytes32[2]"},{"name":"deliveredIdentifier","type":"bytes32"},{"name":"certifier","type":"bytes32"}],"name":"update","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"revertStatus","type":"uint256"}],"name":"revertVersionsByHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_codeline","type":"bytes32[2]"}],"name":"getIndex","outputs":[{"name":"checkIdx","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"user","type":"address"}],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_receiverStoreAddress","type":"address"}],"name":"setReceiverStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAccountStore","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_codeline","type":"bytes32[2]"}],"name":"getBase","outputs":[{"name":"owner","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"checkType","type":"uint256"},{"name":"certifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"}],"name":"getBaseByHash","outputs":[{"name":"","type":"bytes32[2]"},{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"version","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"bankCode","type":"bytes32"}],"name":"setBankCode","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"bytes32[2]"}],"name":"setMustNotifyReceiver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_codeline","type":"bytes32[2]"},{"name":"version","type":"uint256"}],"name":"getVersion","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"deliveredIdentifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"bytes32[2]"},{"name":"status","type":"uint8"}],"name":"isNotified","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"bytes32[2]"},{"name":"status","type":"uint8"}],"name":"setNotified","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_managerContractAddress","type":"address"}],"name":"setManagerContractAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_accountStoreAddress","type":"address"}],"name":"setAccountStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"}],"name":"getBaseByHashIndex","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32[2]"},{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"version","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"bytes32[2]"},{"name":"index","type":"uint256"}],"name":"getBaseByIndex","outputs":[{"name":"","type":"bytes32[2]"},{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"version","type":"uint256"}],"name":"getVersionByHash","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"deliveredIdentifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"securityCode","type":"bytes32[2]"},{"name":"deliveredIdentifier","type":"bytes32"},{"name":"certifier","type":"bytes32"}],"name":"updateByHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getTransactionStore","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getReceiverStore","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"versionIndex","type":"uint256"},{"name":"user","type":"address"}],"name":"isDest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"bytes32[2]"}],"name":"getMustNotifyReceiver","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getManagerContractAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"bytes32[2]"},{"name":"revertStatus","type":"uint256"}],"name":"revertVersions","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getCode","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_checkTypeStoreAddress","type":"address"}],"name":"setCheckTypeStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"bytes32[2]"},{"name":"codeline","type":"bytes32[2]"},{"name":"checkType","type":"uint256"},{"name":"certifier","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"bytes32[2]"}],"name":"getAccountChecksCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":""};

var BcCheckTypeStoreCompiled = {"abi":[{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"bytes32[2]"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"enable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"name","type":"bytes32[2]"}],"name":"update","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"name","type":"bytes32[2]"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"disable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":"0x606060405260008060146101000a81548160ff021916908360ff1602179055506001600060156101000a81548160ff021916908360ff1602179055506002600060166101000a81548160ff021916908360ff1602179055506003600060176101000a81548160ff021916908360ff1602179055506004600060186101000a81548160ff021916908360ff1602179055506001600060196101000a81548160ff021916908360ff16021790555060026000601a6101000a81548160ff021916908360ff16021790555060046000601b6101000a81548160ff021916908360ff16021790555060086000601c6101000a81548160ff021916908360ff16021790555060016000601d6101000a81548160ff021916908360ff16021790555060026000601e6101000a81548160ff021916908360ff16021790555060046000601f6101000a81548160ff021916908360ff16021790555060018060006101000a81548160ff021916908360ff16021790555060026001806101000a81548160ff021916908360ff1602179055506004600160026101000a81548160ff021916908360ff1602179055506000600160036101000a81548160ff021916908360ff16021790555060018060046101000a81548160ff021916908360ff160217905550336000806101000a815481600160a060020a030219169083600160a060020a03160217905550610d4b806102116000396000f3006060604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304116a83811461016557806306661abd1461018e5780631038c9b7146101b357806310ba4dc8146101c65780632b5f2089146101d95780632e664d22146101ec5780633465e9e3146101ff578063409f8ea7146102125780634fb2e45d1461022557806362ffddc61461024457806366b649fe146102575780636d3ee5e11461026a5780637803b88a1461027d5780637dc485ea146102ce57806382acfdb51461030a57806387dc7c371461031d57806388ccafbe146103335780638f32d59b146103735780639507d39a1461039a5780639946b9a5146103f3578063a5a582b614610409578063acb0bbe01461041c578063adb8ce4b1461042f578063cc0f0eae14610442578063ddadf63314610455578063df535bc114610468575b341561015e57600080fd5b600080fd5b005b341561017057600080fd5b61017861047b565b60405160ff909116815260200160405180910390f35b341561019957600080fd5b6101a16104a0565b60405190815260200160405180910390f35b34156101be57600080fd5b6101786104a7565b34156101d157600080fd5b6101786104c8565b34156101e457600080fd5b6101786104d7565b34156101f757600080fd5b6101786104e5565b341561020a57600080fd5b6101786104f6565b341561021d57600080fd5b610178610519565b341561023057600080fd5b610163600160a060020a0360043516610541565b341561024f57600080fd5b610178610591565b341561026257600080fd5b6101786105ba565b341561027557600080fd5b6101786105e0565b341561028857600080fd5b6101a160046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061060a95505050505050565b34156102d957600080fd5b6101636004604481600260408051908101604052809291908260026020028082843750939550610646945050505050565b341561031557600080fd5b610178610704565b341561032857600080fd5b61016360043561072f565b341561033e57600080fd5b610163600480359060646024600260408051908101604052809291908260026020028082843750939550610794945050505050565b341561037e57600080fd5b610386610827565b604051901515815260200160405180910390f35b34156103a557600080fd5b6103b0600435610842565b6040518083604080838360005b838110156103d55780820151838201526020016103bd565b50505050905001821515151581526020019250505060405180910390f35b34156103fe57600080fd5b6101636004356108de565b341561041457600080fd5b61017861091d565b341561042757600080fd5b61017861092d565b341561043a57600080fd5b610178610951565b341561044d57600080fd5b61017861095a565b341561046057600080fd5b61017861097c565b341561047357600080fd5b6101786109a3565b6000547801000000000000000000000000000000000000000000000000900460ff1681565b6002545b90565b60005474010000000000000000000000000000000000000000900460ff1681565b60015462010000900460ff1681565b600154610100900460ff1681565b600154640100000000900460ff1681565b600054760100000000000000000000000000000000000000000000900460ff1681565b6000547b01000000000000000000000000000000000000000000000000000000900460ff1681565b600054600160a060020a0316610556816109b3565b151561056157600080fd5b506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000547c0100000000000000000000000000000000000000000000000000000000900460ff1681565b600054790100000000000000000000000000000000000000000000000000900460ff1681565b6000547d010000000000000000000000000000000000000000000000000000000000900460ff1681565b6000610614610bef565b61061d836109ec565b905080516020820151604051918252602082015260409081019051809103902091505b50919050565b61064e610c17565b600054600160a060020a0316610663816109b3565b151561066e57600080fd5b6060604051908101604090815260025482526020820185815260019183019190915290925061069d9051610a66565b156106a757600080fd5b60028054600181016106b98382610c3f565b600092835260209092208491600402018151815560208201516106e29060018301906002610c70565b506040820151600391909101805460ff19169115159190911790555050505050565b6000547e01000000000000000000000000000000000000000000000000000000000000900460ff1681565b600054600160a060020a0316610744816109b3565b151561074f57600080fd5b600254821061075d57600080fd5b600160028381548110151561076e57fe5b60009182526020909120600490910201600301805460ff19169115159190911790555050565b600054600160a060020a03166107a9816109b3565b15156107b457600080fd5b60025483106107c257600080fd5b60028054849081106107d057fe5b600091825260209091206003600490920201015460ff1615156107f257600080fd5b8160028481548110151561080257fe5b9060005260206000209060040201600101906002610821929190610c70565b50505050565b6000805461083d90600160a060020a03166109b3565b905090565b61084a610bef565b600254600090831061085b57600080fd5b600280548490811061086957fe5b906000526020600020906004020160010160028481548110151561088957fe5b600091825260209091206003600490920201015460ff16816002604080519081016040529190828260026020028201915b815481526001909101906020018083116108ba575050505050915091509150915091565b600054600160a060020a03166108f3816109b3565b15156108fe57600080fd5b600254821061090c57600080fd5b600060028381548110151561076e57fe5b6001546301000000900460ff1681565b60005477010000000000000000000000000000000000000000000000900460ff1681565b60015460ff1681565b6000547501000000000000000000000000000000000000000000900460ff1681565b6000547a010000000000000000000000000000000000000000000000000000900460ff1681565b60005460f860020a900460ff1681565b600081600160a060020a031633600160a060020a031614806109e6575081600160a060020a031632600160a060020a0316145b92915050565b6109f4610bef565b6109fc610bef565b600080845191506020821115610a5157610a21610a1c8660006020610ae8565b610ba5565b835250601f198101610a47610a1c866020808511610a3f5784610a42565b60205b610ae8565b6020840152610a5d565b610a5a85610ba5565b83525b50909392505050565b6000805b60025481101561064057610ad2600282815481101515610a8657fe5b90600052602060002090600402016001016002806020026040519081016040529190828260026020028201915b81548152600190910190602001808311610ab357505050505084610bce565b15610ae05760019150610640565b600101610a6a565b610af0610cb0565b610af8610cb0565b610b00610cb0565b600086925084604051805910610b135750595b818152601f19601f830116810160200160405290509150600090505b84811015610b9b578281870181518110610b4557fe5b016020015160f860020a900460f860020a02828281518110610b6357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101610b2f565b5095945050505050565b6000610baf610cb0565b508180511515610bc25760009150610640565b60208301519392505050565b600081518351148015610be8575060208201516020840151145b9392505050565b604080519081016040526002815b60008152600019919091019060200181610bfd5790505090565b60806040519081016040528060008152602001610c32610bef565b8152600060209091015290565b815481835581811511610c6b57600402816004028360005260206000209182019101610c6b9190610cc2565b505050565b8260028101928215610ca0579160200282015b82811115610ca05782518255602090920191600190910190610c83565b50610cac929150610cf7565b5090565b60206040519081016040526000815290565b6104a491905b80821115610cac576000808255610ce26001830182610d11565b5060038101805460ff19169055600401610cc8565b6104a491905b80821115610cac5760008155600101610cfd565b5060008155600101600090555600a165627a7a72305820a60595736c43298bc97137c948ceba2b72475dc7dff392fedefcfdd40496e1c40029"};

var BcTransactionStoreCompiled = {"abi":[{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_bankStoreContract","type":"address"}],"name":"setBankStoreContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAccountTransactionsLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"bankCode","type":"bytes32"},{"name":"accountNumber","type":"bytes32[2]"},{"name":"hashCodeline","type":"bytes32"},{"name":"version","type":"uint256"},{"name":"status","type":"uint8"}],"name":"addCustom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"bytes32[2]"},{"name":"transactionIdx","type":"uint256"}],"name":"getCheckVersion","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"deliveredIdentifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"bytes32[2]"}],"name":"countByAccount","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"},{"name":"transactionIdx","type":"uint256"}],"name":"getCheckBaseByHash","outputs":[{"name":"checkIdx","type":"uint256"},{"name":"owner","type":"bytes32"},{"name":"codeline","type":"bytes32[2]"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"checkType","type":"uint256"},{"name":"certifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"}],"name":"getBankHash","outputs":[{"name":"bankHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"}],"name":"getTransactionsLengthByHash","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"},{"name":"transactionIdx","type":"uint256"}],"name":"getCheckVersionByHash","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"deliveredIdentifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"},{"name":"transactionIdx","type":"uint256"}],"name":"getByHash","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"}],"name":"countByHash","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getAccountHash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"bytes32[2]"},{"name":"transactionIdx","type":"uint256"}],"name":"get","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"bankCode","type":"bytes32"},{"name":"accountNumber","type":"bytes32[2]"},{"name":"hashCodeline","type":"bytes32"},{"name":"version","type":"uint256"},{"name":"status","type":"uint8"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountNumber","type":"bytes32[2]"},{"name":"transactionIdx","type":"uint256"}],"name":"getCheckBase","outputs":[{"name":"checkIdx","type":"uint256"},{"name":"owner","type":"bytes32"},{"name":"codeline","type":"bytes32[2]"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"cType","type":"uint256"},{"name":"certifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountHash","type":"bytes32"},{"name":"id","type":"uint256"}],"name":"isAccesible","outputs":[{"name":"accesible","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":""};

var CheckManagerCompiled = {"abi":[{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"checkType","type":"uint8"},{"name":"prev","type":"uint8"},{"name":"post","type":"uint8"},{"name":"rol","type":"uint8"},{"name":"security","type":"uint8"},{"name":"updateDepAcc","type":"uint8"},{"name":"updateSecCod","type":"uint8"},{"name":"revertStatus","type":"uint8"}],"name":"setPromotion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"storeContract","type":"address"}],"name":"setCheckStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"bytes32[2]"},{"name":"codeline","type":"bytes32[2]"},{"name":"checkType","type":"uint256"},{"name":"certifier","type":"bytes32"}],"name":"addCheck","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"bytes32[2]"},{"name":"amount","type":"uint256"},{"name":"date","type":"uint256"},{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"currentSecurityCode","type":"bytes32"},{"name":"newSecurityCode","type":"bytes32"},{"name":"deliveredIdentifier","type":"bytes32"},{"name":"certifier","type":"bytes32"}],"name":"setStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"date","type":"uint256"},{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"currentSecurityCode","type":"bytes32"},{"name":"newSecurityCode","type":"bytes32"},{"name":"deliveredIdentifier","type":"bytes32"},{"name":"certifier","type":"bytes32"}],"name":"setStatusByHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getAccountStore","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"checkType","type":"uint8"},{"name":"prev","type":"uint8"},{"name":"post","type":"uint8"}],"name":"getPromotion","outputs":[{"name":"rol","type":"uint8"},{"name":"security","type":"uint8"},{"name":"updateDepAcc","type":"uint8"},{"name":"updateSecCod","type":"uint8"},{"name":"revertStatus","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"storeContract","type":"address"}],"name":"setAccountStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCheckStore","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":""};

var CustomerCompiled = {"abi":[{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"_name","type":"string"}],"name":"updateCheckType","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"checkTypeCount","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"string"}],"name":"getOwnerAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"string"}],"name":"getMustNotifyReceiver","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"string"}],"name":"setMustNotifyReceiver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"deliveredIdentifier","type":"string"}],"name":"countReceived","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractAddress","type":"address"}],"name":"setReceiverStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"identifier","type":"string"}],"name":"identityCount","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractAddress","type":"address"}],"name":"setIdentityStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"addCheckType","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"string"},{"name":"version","type":"uint256"}],"name":"getCheckVersion","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"string"},{"name":"deliveredTo","type":"string"},{"name":"reason","type":"string"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"deliveredIdentifier","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"string"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"status","type":"uint8"},{"name":"depositAccount","type":"string"},{"name":"deliveredTo","type":"string"},{"name":"reason","type":"string"},{"name":"securityCode","type":"string"},{"name":"newSecurityCode","type":"string"},{"name":"deliveredIdentifier","type":"string"},{"name":"certifier","type":"string"}],"name":"updateCheck","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"identifier","type":"string"},{"name":"index","type":"uint256"},{"name":"ethAccount","type":"address"}],"name":"updateIdentity","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"string"}],"name":"getCheckVersionLast","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"string"},{"name":"deliveredTo","type":"string"},{"name":"reason","type":"string"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"deliveredIdentifier","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"version","type":"uint256"}],"name":"getCheckVersionByHash","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"string"},{"name":"deliveredTo","type":"string"},{"name":"reason","type":"string"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"deliveredIdentifier","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ownerAddress","type":"address"}],"name":"getAddressNumber","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"disableCheckType","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"}],"name":"getCheckBaseByHash","outputs":[{"name":"_codeline","type":"string"},{"name":"owner","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"checkType","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"status","type":"uint8"},{"name":"depositAccount","type":"string"},{"name":"deliveredTo","type":"string"},{"name":"reason","type":"string"},{"name":"securityCode","type":"string"},{"name":"newSecurityCode","type":"string"},{"name":"deliveredIdentifier","type":"string"},{"name":"certifier","type":"string"}],"name":"updateCheckByHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getCheckType","outputs":[{"name":"_name","type":"string"},{"name":"_exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"enableCheckType","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"deliveredIdentifier","type":"string"},{"name":"index","type":"uint256"}],"name":"getReceived","outputs":[{"name":"bankCode","type":"string"},{"name":"codeline","type":"string"},{"name":"version","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ethAccount","type":"address"}],"name":"getIdentityIdentifier","outputs":[{"name":"identifier","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"identifier","type":"string"},{"name":"index","type":"uint256"}],"name":"enableIdentity","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"string"}],"name":"cleanMustNotifyReceiver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"deliveredIdentifier","type":"string"},{"name":"codelineHash","type":"bytes32"}],"name":"getReceivedIndexByHash","outputs":[{"name":"index","type":"uint256"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"string"}],"name":"getCheckBase","outputs":[{"name":"_codeline","type":"string"},{"name":"owner","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"checkType","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"identifier","type":"string"},{"name":"index","type":"uint256"}],"name":"disableIdentity","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"identifier","type":"string"},{"name":"ethAccount","type":"address"},{"name":"notifyAddress","type":"string"}],"name":"addIdentity","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"deliveredIdentifier","type":"string"},{"name":"codeline","type":"string"}],"name":"getReceivedIndex","outputs":[{"name":"index","type":"uint256"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"identifier","type":"string"},{"name":"notifyAddress","type":"string"}],"name":"setIdentityNotifyAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codelineHash","type":"bytes32"}],"name":"getCheckVersionLastByHash","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"string"},{"name":"deliveredTo","type":"string"},{"name":"reason","type":"string"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"deliveredIdentifier","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"identifier","type":"string"},{"name":"index","type":"uint256"}],"name":"getIdentityAddress","outputs":[{"name":"ethAccount","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractAddress","type":"address"}],"name":"setCheckTypeStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"identifier","type":"string"}],"name":"getIdentityNotifyAddress","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":""};

var BcReceiverStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"hashCodeline","type":"bytes32"}],"name":"getOwnerAddress","outputs":[{"name":"owner","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_bankStoreAddress","type":"address"}],"name":"setBankStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ownerAddress","type":"address"},{"name":"number","type":"bytes32[2]"},{"name":"bankCode","type":"bytes32"}],"name":"addAddressNumber","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"deliveredIdentifier","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"bankCode","type":"bytes32"},{"name":"hashCodeline","type":"bytes32"},{"name":"version","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_bankStoreContract","type":"address"}],"name":"setBankStoreContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"bytes32[2]"}],"name":"cleanMustNotifyReceiver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"code","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codelineHash","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"securityCode","type":"bytes32"},{"name":"newSecurityCode","type":"bytes32"},{"name":"deliveredIdentifier","type":"bytes32"},{"name":"certifier","type":"bytes32"}],"name":"updateCheckByHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"deliveredIdentifier","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getWithCodeline","outputs":[{"name":"bankCode","type":"bytes32"},{"name":"codeline","type":"bytes32[2]"},{"name":"version","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"hashCodeline","type":"bytes32"},{"name":"version","type":"uint256"}],"name":"getCheckVersion","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"deliveredIdentifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"deliveredIdentifier","type":"bytes32"},{"name":"hashCodeline","type":"bytes32"}],"name":"getIndex","outputs":[{"name":"index","type":"uint256"},{"name":"exists","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"deliveredIdentifier","type":"bytes32"}],"name":"count","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ownerAddress","type":"address"}],"name":"getAddressNumber","outputs":[{"name":"","type":"bytes32[2]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_code","type":"bytes32"}],"name":"setBankCode","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"hashCodeline","type":"bytes32"}],"name":"getCheckBase","outputs":[{"name":"codeline","type":"bytes32[2]"},{"name":"owner","type":"bytes32"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"version","type":"uint256"},{"name":"checkType","type":"uint256"},{"name":"certifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"bytes32[2]"}],"name":"setMustNotifyReceiver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"deliveredIdentifier","type":"bytes32"},{"name":"bankCode","type":"bytes32"},{"name":"hashCodeline","type":"bytes32"},{"name":"version","type":"uint256"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"hashCodeline","type":"bytes32"}],"name":"getCheckVersion","outputs":[{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"securityCode","type":"bytes32[2]"},{"name":"timestamp","type":"uint256"},{"name":"deliveredIdentifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"codeline","type":"bytes32[2]"}],"name":"getMustNotifyReceiver","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"codeline","type":"bytes32[2]"},{"name":"amount","type":"uint256"},{"name":"processDate","type":"uint256"},{"name":"status","type":"uint8"},{"name":"depositAccount","type":"bytes32[2]"},{"name":"deliveredTo","type":"bytes32[2]"},{"name":"reason","type":"bytes32[2]"},{"name":"securityCode","type":"bytes32"},{"name":"newSecurityCode","type":"bytes32"},{"name":"deliveredIdentifier","type":"bytes32"},{"name":"certifier","type":"bytes32"}],"name":"updateCheck","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"deliveredIdentifier","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"hashCodeline","type":"bytes32"},{"name":"version","type":"uint256"}],"name":"update","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":""};

var BcIdentityStoreCompiled = {"abi":[{"constant":false,"inputs":[{"name":"identifier","type":"bytes32"},{"name":"ethAccount","type":"address"},{"name":"notifyAddress","type":"bytes32[2]"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_REVERTSTATUS","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_ROL","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ethAccount","type":"address"}],"name":"getIdentifier","outputs":[{"name":"identifier","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MUST_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DEPOSITACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATEDEPACC","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"identifier","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"enable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_DEST","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"EVERYBODY_HAS_PERMISSION","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CHCK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"USER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"str2DoubleB322Hash","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"identifier","type":"bytes32"}],"name":"count","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANKER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"FIELD_DELIVERYTO","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_UPDATESECCOD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CAN_UPDATE","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"identifier","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"disable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"identifier","type":"bytes32"},{"name":"notifyAddress","type":"bytes32[2]"}],"name":"setNotifyAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"identifier","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getAddress","outputs":[{"name":"ethAccount","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROMO_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BANK_OWNER","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CERTIFIER_SECURITY","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"identifier","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"ethAccount","type":"address"}],"name":"update","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"identifier","type":"bytes32"}],"name":"getNotifyAddress","outputs":[{"name":"notifyAddress","type":"bytes32[2]"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}],"bytecode":""};

var regulatorAddressDefault = "0x1349f3e1b8d71effb47b840594ff27da7e603d17";
var bankstoreAddressDefault = "0xd9d64b7dc034fafdba5dc2902875a67b5d586420";
var transactionstoreAddressDefault = "0x8a5e2a6343108babed07899510fb42297938d41f";
var banker1AddressDefault = "0xee02919a1fc709bce16f6bd13ede083f0d32449b";
var accountstore1AddressDefault = "0x541914ab6f8d7d00b085430f0ab4e8ab441270b8";
var checkstore1AddressDefault = "0x6e61505914a72dd4ff7bdbe93a6999748d1d66fd";
var checkmanagerstore1AddressDefault = "0x72b96b327b1a7b1beae7bfe782a669307a99a38f";
var banker2AddressDefault = "0x09ede8d9b17b522f839065ab19f60d1b8f4c7f1d";
var accountstore2AddressDefault = "0x0376ab92e286dfb7331a6cfa8f7157b8fdc37c32";
var checkstore2AddressDefault = "0x88ae9b452495abd260c39a3b3944d6ef01af245f";
var checkmanagerstore2AddressDefault = "0x81043b56f6dfe097e584096ec2d3aac586f0d477";
var receiverStoreAddressDefault = "0x938781b9796aea6376e40ca158f67fa89d5d8a18";
var identityStoreAddressDefault = "0xfe0602d820f42800e3ef3f89e1c39cd15f78d283";
var customerAddressDefault = "0x9d13c6d3afe1721beef56b55d303b09e021e27ab";
var checkTypeStoreAddressDefault = "0x4d3bfd7821e237ffe84209d8e638f9f309865b87";

var regulatorAddress = "";
var bankstoreAddress = "";
var transactionstoreAddress = "";
var banker1Address = "";
var accountstore1Address = "";
var checkstore1Address = "";
var checkmanager1Address = "";
var banker2Address = "";
var accountstore2Address = "";
var checkstore2Address = "";
var checkmanager2Address = "";
var customerAddress = "";
var receiverStoreAddress = "";
var identityStoreAddress = "";
var checkTypeStoreAddress = "";

var regulatorName = "Regulator";
var customerName = "Customer";
var bankerName = "Banker";
var bankStoreName = "BankStore";
var transactionStoreName = "TransactionStore";
var receiverStoreName = "BcReceiverStore";
var identityStoreName = "BcIdentityStore";
var accountStoreName = "AccountStore";
var checkStoreName = "CheckStore";
var checkManagerName = "CheckManager";
var checkTypeStoreName = "CheckTypeStore";

var regulatorname = "Coelsa";

var bankCode1 = "2038";
var bankName1 = "Bankia";

var bankCode2 = "0049";
var bankName2 = "Santander";

var inicode = 0;
var lengthcode = 4;
var unlockDuration = 15000;

var regulatoruser  = web3.personal.listAccounts[0];
var bank1Eth  = web3.personal.listAccounts[1];
var bank2Eth = web3.personal.listAccounts[2];
var user1Addr  = web3.personal.listAccounts[3];
var user2Addr  = web3.personal.listAccounts[4];
var user3Addr  = web3.personal.listAccounts[5];
var user4Addr  = web3.personal.listAccounts[6];

var account1 = "203800018111111111119";
var account2 = "203800028222222222229";
var account3 = "004900018111111111130";

var codeline1 = '203800018111111111119959111';
var codeline2 = '203800018111111111119592221';
var codeline3 = '203800028222222222229933312';
var codeline4 = '203800018111111111119959113';
var codeline5 = '004900018111111111130592221';
var codeline6 = '004900018111111111130933312';

var codeline7 = '203800018111111111119959112';

var bankerContract = {};
var regulatorContract = {};
var accountStoreContract = {};
var bankStoreContract = {};
var checkStoreContract = {};
var transactionStoreContract = {};
var checkmanagerContract = {};
var customerContract = {};
var receiverStoreContract = {};
var identityStoreContract = {};
var checkTypeStoreContract = {};

var regulator = {};
var bankstore = {};
var transactionstore = {};
var banker1 = {};
var accountstore1 = {};
var checkstore1 = {};
var checkmanager1 = {};
var banker2 = {};
var accountstore2 = {};
var checkstore2 = {};
var checkmanager2 = {};
var customer = {};
var receiverStore = {};
var identityStore = {};
var checkTypeStore = {};

var deployGas = 6712390;
var transGas = 700000;

var CheckStatus = {
	'Issued': 0,
	'Filled': 1,
	'ReservedFunds': 2,
	'Delivered': 3,
	'Accepted': 4,
	'PendingCertification': 5,
	'Certified': 6,
	'Deposited': 7,
	'SentToHost': 8,
	'Paid': 9,
	'NotAccepted': 10,
	'RejectedConformation': 11,
	'RejectedCertification': 12,
	'ReleasedFunds': 13,
	'Rejected': 14,
	'Locked': 15,
	'Completed': 16,
	'DepositRejected': 17
}

var Rol = {
    'CheckOwner' : 1,
    'Banker' : 2,
    'CheckDest' : 4,
    'Everybody' : 8
}

var CheckType = {
    'Check' : 0,
    'ConformedCheck' : 1,
    'PromissoryNote' : 2,
    'ConformedPromissoryNote' : 3
}

var certifierName = "0001Z";

var unlockAccount = function(name, account, password, duration, callback) {
    console.log("Unlocking " + name);
    web3.personal.unlockAccount(account, password, duration);
    callback();
}

var contractAssign = function(contractObj, compiledABI, callback) {
    contractObj.value = web3.eth.contract(compiledABI);
    callback();
}

var deployContract = function(name, contract, bytecode, owner, callback) {
    contract.new( {
        from: owner,
        data: bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating " + name + " contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for ' + name + '. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log(name + ' contract mined! address: "' + contract.address + '"\n');
                callback(contract);
            }
        }
    });
};

var linkContractsDemo = function(regulatorD, bankD, transactionD, customerD, receiverD, identityD, banker1D, banker2D, account1D, account2D, check1D, check2D, checkmanager1D, checkmanager2D, checkTypeD, callback) {
    console.log('Linking contracts Demo ');
    // TODO Unificar logs? Unificar llamadas a linkContracts?
    console.log('Linking regulator ');
    transactionD.setBankStoreContract(bankD.address, {from:regulatoruser, gas:transGas});
    regulatorD.setBankContract(bankD.address, {from:regulatoruser, gas:transGas});
    regulatorD.setTransactionContract(transactionD.address, {from:regulatoruser, gas:transGas});
    regulatorD.setRegulatorName(regulatorname,{from:regulatoruser, gas:transGas});

    console.log('Linking customer ');
    receiverD.setBankStore(bankD.address,{from:regulatoruser, gas:transGas});
    customerD.setReceiverStore(receiverD.address,{from:regulatoruser, gas:transGas});
    customerD.setIdentityStore(identityD.address,{from:regulatoruser, gas:transGas});
    customerD.setCheckTypeStore(checkTypeD.address,{from:regulatoruser, gas:transGas});

    console.log('Linking bank 1 ');
    banker1D.setAccountContract(account1D.address, {from:bank1Eth, gas:transGas});
    banker1D.setCheckContract(check1D.address, {from:bank1Eth, gas:transGas});
    banker1D.setCheckManagerContract(checkmanager1D.address, {from:bank1Eth, gas:transGas});//??
    banker1D.setIdentityStore(identityD.address,{from:regulatoruser, gas:transGas});

    check1D.setManagerContractAddress(checkmanager1D.address, {from:bank1Eth, gas:transGas});
    check1D.setAccountStore(account1D.address, {from:bank1Eth, gas:transGas});
    check1D.setTransactionStore(transactionD.address, {from:bank1Eth, gas:transGas});
    check1D.setReceiverStore(receiverD.address, {from:bank1Eth, gas:transGas});
    check1D.setCheckTypeStore(checkTypeD.address,{from:bank1Eth, gas:transGas});

    checkmanager1D.setAccountStore(account1D.address, {from:bank1Eth, gas:transGas});
    checkmanager1D.setCheckStore(check1D.address, {from:bank1Eth, gas:transGas});

    console.log('Linking bank 2 ');
    banker2D.setAccountContract(account2D.address, {from:bank2Eth, gas:transGas});
    banker2D.setCheckContract(check2D.address, {from:bank2Eth, gas:transGas});
    banker2D.setCheckManagerContract(checkmanager2D.address, {from:bank2Eth, gas:transGas});//??
    banker2D.setIdentityStore(identityD.address,{from:regulatoruser, gas:transGas});

    check2D.setManagerContractAddress(checkmanager2D.address, {from:bank2Eth, gas:transGas});
    check2D.setTransactionStore(transactionD.address, {from:bank2Eth, gas:transGas});
    check2D.setAccountStore(account2D.address, {from:bank2Eth, gas:transGas});
    check2D.setReceiverStore(receiverD.address, {from:bank2Eth, gas:transGas});
    check2D.setCheckTypeStore(checkTypeD.address,{from:bank2Eth, gas:transGas});

    checkmanager2D.setAccountStore(account2D.address, {from:bank2Eth, gas:transGas});
    checkmanager2D.setCheckStore(check2D.address, {from:bank2Eth, gas:transGas});

    regulatorAddress = regulatorD.address;
    bankstoreAddress = bankD.address;
    transactionstoreAddress = transactionD.address;

    customerAddress = customerD.address;
    receiverStoreAddress = receiverD.address;
    identityStoreAddress = identityD.address;

    banker1Address = banker1D.address;
    checkmanager1Address = checkmanager1D.address;
    checkstore1Address = check1D.address;
    accountstore1Address = account1D.address;

    banker2Address = banker2D.address;
    checkmanager2Address = checkmanager2D.address;
    checkstore2Address = check2D.address;
    accountstore2Address = account2D.address;

    checkTypeStoreAddress = checkTypeD.address;

    var rsSet1 = check1D.getReceiverStore({from:bank1Eth, gas:transGas})
    var rsSet2 = check2D.getReceiverStore({from:bank2Eth, gas:transGas})

    console.log('Receiver stores:');
    console.log(rsSet1);
    console.log(rsSet2);


    infoDemo();
    if (callback !== undefined) {
      callback();
  }
};

var linkContractsRegulator = function(regulatorD, bankD, transactionD) {
    console.log('Linking contracts Regulator');
    regulatorD.setBankContract(bankD.address, {from:regulatoruser, gas:transGas});
    regulatorD.setTransactionContract(transactionD.address, {from:regulatoruser, gas:transGas});
    transactionD.setBankStoreContract(bankD.address, {from:regulatoruser, gas:transGas});

    regulatorAddress = regulatorD.address;
    bankstoreAddress = bankD.address;
    transactionstoreAddress = transactionD.address;

    infoRegulator();
};

var linkContractsCustomer = function(customerD, receiverD, identityD, checkTypeD) {
    console.log('Linking customer ');
    customerD.setReceiverStore(receiverStore.address,{from:regulatoruser, gas:transGas});
    customerD.setIdentityStore(identityStore.address,{from:regulatoruser, gas:transGas});
    customerD.setCheckTypeStore(checkTypeStore.address,{from:regulatoruser, gas:transGas});

    customerAddress = customerD.address;
    receiverStoreAddress = receiverD.address;
    identityStoreAddress = identityD.address;
    checkTypeStoreAddress = checkTypeD.address;

    infoCustomer();
};

var linkContractsBanker = function(banker1D, account1D, check1D, checkmanager1D, transactionD, bankaddress) {
    console.log('Linking contracts Banker');

    banker1D.setAccountContract(account1D.address, {from:bankaddress, gas:transGas});
    banker1D.setCheckContract(check1D.address, {from:bankaddress, gas:transGas});
    banker1D.setCheckManagerContract(checkmanager1D.address, {from:bankaddress, gas:transGas});

    check1D.setTransactionStore(transactionD.address, {from:bankaddress, gas:transGas});

    banker1Address = banker1D.address;
    accountstore1Address = account1D.address;
    checkstore1Address = check1D.address;
    checkmanager1Address = checkmanager1D.address;
    transactionstoreAddress = transactionD.address;

    infoBanker();
};

var deployForDemo = function(callback) {
    console.log('Calling Demo contract creation');
    deployContract(regulatorName, regulatorContract.value, RegulatorCompiled.bytecode, regulatoruser, function(regulator) {
        console.log('Regulator ready, calling Customer');
		deployContract(customerName, customerContract.value, CustomerCompiled.bytecode, regulatoruser, function(customer) {
			console.log('Customer ready, calling Banker1');
			deployContract(bankerName, bankerContract.value, BankerCompiled.bytecode, bank1Eth, function(banker1) {
				console.log('Banker1 ready, calling Banker2');
				deployContract(bankerName, bankerContract.value, BankerCompiled.bytecode, bank2Eth, function(banker2) {
					console.log('Banker2 ready, calling BankStore');
					deployContract(bankStoreName, bankStoreContract.value, BcBankStoreCompiled.bytecode, regulatoruser, function(bank) {
						console.log('BankStore ready, calling TransactionStore');
						deployContract(transactionStoreName, transactionStoreContract.value, BcTransactionStoreCompiled.bytecode, regulatoruser, function(transaction) {
							console.log('TransactionStore ready, calling ReceiverStore');
							deployContract(receiverStoreName, receiverStoreContract.value, BcReceiverStoreCompiled.bytecode, regulatoruser, function(receiverStore) {
								console.log('ReceiverStore ready, calling IdentityStore');
								deployContract(identityStoreName, identityStoreContract.value, BcIdentityStoreCompiled.bytecode, regulatoruser, function(identityStore) {
									console.log('IdentityStore ready, calling first AccountStore');
									deployContract(accountStoreName, accountStoreContract.value, BcAccountStoreCompiled.bytecode, bank1Eth, function(account1) {
										console.log('AccountStore ready, calling CheckStore');
										deployContract(checkStoreName, checkStoreContract.value, BcCheckStoreCompiled.bytecode, bank1Eth, function(check1) {
											console.log('CheckStore ready, calling CheckManager');
											deployContract(checkManagerName, checkmanagerContract.value, CheckManagerCompiled.bytecode, bank1Eth, function(checkmanager1) {
												console.log('CheckManager1 ready, calling AccountStore1');
												deployContract(accountStoreName, accountStoreContract.value, BcAccountStoreCompiled.bytecode, bank2Eth, function(account2) {
													console.log('AccountStore1 ready, calling CheckStore1');
													deployContract(checkStoreName, checkStoreContract.value, BcCheckStoreCompiled.bytecode, bank2Eth, function(check2) {
														console.log('CheckStore1 ready, calling CheckManager1');
														deployContract(checkManagerName, checkmanagerContract.value, CheckManagerCompiled.bytecode, bank2Eth, function(checkmanager2) {
                                                            console.log('CheckManager1 ready, calling CheckTypeStore');
                                                            deployContract(checkTypeStoreName, checkTypeStoreContract.value, BcCheckTypeStoreCompiled.bytecode, regulatoruser, function(checkTypeStore){
                                                                console.log('CheckTypeStore ready, calling final config');
                                                                linkContractsDemo(regulator, bank, transaction, customer, receiverStore, identityStore, banker1, banker2, account1, account2, check1, check2, checkmanager1, checkmanager2, checkTypeStore, callback);
                                                            });
														});
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
};

var deployForRegulator = function() {
    console.log('Calling Regulator contract creation');
    deployContract(regulatorName, regulatorContract.value, RegulatorCompiled.bytecode, regulatoruser, function(regulator) {
        console.log('Regulator ready, calling BankStore');
        deployContract(bankStoreName, bankStoreContract.value, BcBankStoreCompiled.bytecode, regulatoruser, function(bank) {
            console.log('BankStore ready, calling TransactionStore');
            deployContract(transactionStoreName, transactionStoreContract.value, BcTransactionStoreCompiled.bytecode, regulatoruser, function(transaction) {
                console.log('TransactionStore ready, calling final config');
                linkContractsRegulator(regulator, bank, transaction);
            });
        });
    });
};

var deployForCustomer = function() {
    console.log('Calling Customer contract creation');
    deployContract(customerName, customerContract.value, CustomerCompiled.bytecode, regulatoruser, function(customer) {
        console.log('Customer ready, calling ReceiverStore');
        deployContract(receiverStoreName, receiverStoreContract.value, BcReceiverStoreCompiled.bytecode, regulatoruser, function(receiverStore) {
            console.log('ReceiverStore ready, calling IdentityStore');
            deployContract(identityStoreName, identityStoreContract.value, BcIdentityStoreCompiled.bytecode, regulatoruser, function(identityStore) {
                console.log('IdentityStore ready, calling CheckTypeStore');
                deployContract(checkTypeStoreName, checkTypeStoreContract.value, BcCheckTypeStoreCompiled.bytecode, regulatoruser, function(checkTypeStore){
                    console.log('CheckTypeStore ready, calling final config');
                    linkContractsCustomer(customer, receiverStore, identityStore, checkTypeStore);
                });
            });
        });
    });
};

var deployForBanker = function(bankaddress) {
    console.log('Calling Banker contract creation');
    deployContract(bankerName, bankerContract.value, BankerCompiled.bytecode, bankaddress, function(banker1) {
        console.log('Banker ready, calling AccountStore');
        deployContract(accountStoreName, accountStoreContract.value, BcAccountStoreCompiled.bytecode, bankaddress, function(account1) {
            console.log('AccountStore ready, calling CheckStore');
            deployContract(checkStoreName, checkStoreContract.value, BcCheckStoreCompiled.bytecode, bankaddress, function(check1) {
                console.log('CheckStore ready, calling CheckManager');
                deployContract(checkManagerName, checkmanagerContract.value, CheckManagerCompiled.bytecode, bankaddress, function(checkmanager1) {
                    console.log('CheckManager ready, calling TransactionStore');
                    deployContract(transactionStoreName, transactionStoreContract.value, BcTransactionStoreCompiled.bytecode, bankaddress, function(transaction) {
                        console.log('TransactionStore ready, calling final config');
                        linkContractsBanker(banker1, account1, check1, checkmanager1, transaction, bankaddress);
                    });
                });
            });
        });
    });
};

var infoDemo = function() {
    console.log('-------------------------- CONTRACTS INFO -------------------------');
    console.log('/* Copy & paste this to access deployed contracts Demo */');
    console.log('setAddrs({');

    console.log('regulatorAddress : "' + regulatorAddress + '",');
    console.log('customerAddress : "' + customerAddress + '",');
    console.log('banker1Address : "' + banker1Address + '",');
    console.log('banker2Address : "' + banker2Address + '",');

    console.log('bankstoreAddress : "' + bankstoreAddress + '",');
    console.log('transactionstoreAddress : "' + transactionstoreAddress + '",');

    console.log('receiverStoreAddress : "' + receiverStoreAddress + '",');
    console.log('identityStoreAddress : "' + identityStoreAddress + '",');

    console.log('accountstore1Address : "' + accountstore1Address + '",');
    console.log('checkstore1Address : "' + checkstore1Address + '",');
    console.log('checkmanager1Address : "' + checkmanager1Address + '",');
    console.log('accountstore2Address : "' + accountstore2Address + '",');
    console.log('checkstore2Address : "' + checkstore2Address + '",');
    console.log('checkmanager2Address : "' + checkmanager2Address + '",');

    console.log('checkTypeStoreAddress : "' + checkTypeStoreAddress + '",');

    console.log('});');
    console.log('/* End here */');
    console.log('-------------------------------------------------------------------');
};

var infoRegulator = function() {
    console.log('-------------------------- CONTRACTS INFO -------------------------');
    console.log('/* Copy & paste this to access deployed contracts Regulator */');
    console.log('setAddrs({');
    console.log('regulatorAddress : "' + regulatorAddress + '",');
    console.log('bankstoreAddress : "' + bankstoreAddress + '"');
    console.log('transactionstoreAddress : "' + transactionstoreAddress + '"');
    console.log('});');
    console.log('/* End here */');
    console.log('-------------------------------------------------------------------');
};

var infoCustomer = function() {
    console.log('-------------------------- CONTRACTS INFO -------------------------');
    console.log('/* Copy & paste this to access deployed contracts Regulator */');
    console.log('setAddrs({');
    console.log('customerAddress : "' + customerAddress + '",');
    console.log('receiverStoreAddress : "' + receiverStoreAddress + '"');
    console.log('identityStoreAddress : "' + identityStoreAddress + '"');
    console.log('checkTypeStoreAddress : "' + checkTypeStoreAddress + '",');
    console.log('});');
    console.log('/* End here */');
    console.log('-------------------------------------------------------------------');
};

var infoBanker = function() {
    console.log('-------------------------- INITIALIZE CONTRACTS BANKER INFO -------------------------');
    console.log('/* Copy & paste this to initialize contracts Banker */');
    console.log('setAddrs({');
    console.log('banker1Address : "' + banker1Address + '",');
    console.log('accountstore1Address : "' + accountstore1Address + '"');
    console.log('checkstore1Address : "' + checkstore1Address + '"');
    console.log('checkmanager1Address : "' + checkmanager1Address + '"');
    console.log('bankstoreAddress : "' + bankstoreAddress + '"');
    console.log('transactionstoreAddress : "' + transactionstoreAddress + '"');
    console.log('});');
    console.log('/* End here */');
    console.log('-------------------------------------------------------------------');
};

var infoUsers = function() {
    console.log('-------------------------- USERS INFO -------------------------');
    console.log('/* Copy & paste this to access deployed contracts */');
    console.log('setAddrs({');
    console.log('bank1Eth : "' + bank1Eth + '",');
    console.log('bank2Eth : "' + bank2Eth + '",');
    console.log('user1Addr : "' + user1Addr + '",');
    console.log('user2Addr : "' + user2Addr + '",');
    console.log('user3Addr : "' + user3Addr + '",');
    console.log('regulatoruser : "' + regulatoruser + '"');
    console.log('});');
    console.log('/* End here */');
    console.log('-------------------------------------------------------------------');
};

var info = function() {
    infoDemo();
    infoRegulator();
    infoBanker();
    infoUsers();
};

var setContracts = function() {
    // Regulator
    if (regulatorAddress == "") {
        regulatorAddress = regulatorAddressDefault;
    }
    if (bankstoreAddress == "") {
        bankstoreAddress = bankstoreAddressDefault;
    }
    if (transactionstoreAddress == "") {
        transactionstoreAddress = transactionstoreAddressDefault;
    }

    // Customer
    if (customerAddress == "") {
        customerAddress = customerAddressDefault;
    }
    if (receiverStoreAddress == "") {
        receiverStoreAddress = receiverStoreAddressDefault;
    }
    if (identityStoreAddress == "") {
        identityStoreAddress = identityStoreAddressDefault;
    }

    // Bankers
    if (banker1Address == "") {
        banker1Address = banker1AddressDefault;
    }
    if (banker2Address == "") {
        banker2Address = banker2AddressDefault;
    }
    if (accountstore1Address == "") {
        accountstore1Address = accountstore1AddressDefault;
    }
    if (checkstore1Address == "") {
        checkstore1Address = checkstore1AddressDefault;
    }
    if (checkmanager1Address == ""){
        checkmanager1Address = checkmanagerstore1AddressDefault;
    }
    if (accountstore2Address == "") {
        accountstore2Address = accountstore2AddressDefault;
    }
    if (checkstore2Address == "") {
        checkstore2Address = checkstore2AddressDefault;
    }
    if (checkmanager2Address == ""){
        checkmanager2Address = checkmanagerstore2AddressDefault;
    }

    // CheckType
    if (checkTypeStoreAddress == ""){
        checkTypeStoreAddress = checkTypeStoreAddressDefault;
    }


    regulator = eth.contract(RegulatorCompiled.abi).at(regulatorAddress);
    accountstore1 = eth.contract(BcAccountStoreCompiled.abi).at(accountstore1Address);
    bankstore = eth.contract(BcBankStoreCompiled.abi).at(bankstoreAddress);

    customer = eth.contract(CustomerCompiled.abi).at(customerAddress);
    receiverStore = eth.contract(BcReceiverStoreCompiled.abi).at(receiverStoreAddress);
    identityStore = eth.contract(BcIdentityStoreCompiled.abi).at(identityStoreAddress);

    banker1 = eth.contract(BankerCompiled.abi).at(banker1Address);
    checkstore1 = eth.contract(BcCheckStoreCompiled.abi).at(checkstore1Address);
    transactionstore = eth.contract(BcTransactionStoreCompiled.abi).at(transactionstoreAddress);
    checkmanager1 = eth.contract(CheckManagerCompiled.abi).at(checkmanager1Address);

    banker2 = eth.contract(BankerCompiled.abi).at(banker2Address);
    accountstore2 = eth.contract(BcAccountStoreCompiled.abi).at(accountstore2Address);
    checkstore2 = eth.contract(BcCheckStoreCompiled.abi).at(checkstore2Address);
    checkmanager2 = eth.contract(CheckManagerCompiled.abi).at(checkmanager2Address);

    checkTypeStore = eth.contract(BcCheckTypeStoreCompiled.abi).at(checkTypeStoreAddress);
};

var setAddrs = function(data) {
    // Update addresses
    regulatorAddress = updateIfDef(data.regulatorAddress, regulatorAddress);
    bankstoreAddress = updateIfDef(data.bankstoreAddress, bankstoreAddress);
    transactionstoreAddress = updateIfDef(data.transactionstoreAddress, transactionstoreAddress);

    customerAddress = updateIfDef(data.customerAddress, customerAddress);
    receiverStoreAddress = updateIfDef(data.receiverStoreAddress, receiverStoreAddress);
    identityStoreAddress = updateIfDef(data.identityStoreAddress, identityStoreAddress);

    banker1Address = updateIfDef(data.banker1Address, banker1Address);
    checkmanager1Address = updateIfDef(data.checkmanager1Address, checkmanager1Address);
    checkstore1Address = updateIfDef(data.checkstore1Address, checkstore1Address);
    accountstore1Address = updateIfDef(data.accountstore1Address, accountstore1Address);

    banker2Address = updateIfDef(data.banker2Address, banker2Address);
    checkmanager2Address = updateIfDef(data.checkmanager2Address, checkmanager2Address);
    checkstore2Address = updateIfDef(data.checkstore2Address, checkstore2Address);
    accountstore2Address = updateIfDef(data.accountstore2Address, accountstore2Address);

    checkTypeStoreAddress = updateIfDef(data.checkTypeStoreAddress, checkTypeStoreAddress)

    // Update contract proxies
    regulator = eth.contract(RegulatorCompiled.abi).at(regulatorAddress);
    bankstore = eth.contract(BcBankStoreCompiled.abi).at(bankstoreAddress);
    transactionstore = eth.contract(BcTransactionStoreCompiled.abi).at(transactionstoreAddress);

    customer = eth.contract(CustomerCompiled.abi).at(customerAddress);
    receiverStore = eth.contract(BcReceiverStoreCompiled.abi).at(receiverStoreAddress);
    identityStore = eth.contract(BcIdentityStoreCompiled.abi).at(identityStoreAddress);

    banker1 = eth.contract(BankerCompiled.abi).at(banker1Address);
    checkstore1 = eth.contract(BcCheckStoreCompiled.abi).at(checkstore1Address);
    checkmanager1 = eth.contract(CheckManagerCompiled.abi).at(checkmanager1Address);
    accountstore1 = eth.contract(BcAccountStoreCompiled.abi).at(accountstore1Address);

    banker2 = eth.contract(BankerCompiled.abi).at(banker2Address);
    checkstore2 = eth.contract(BcCheckStoreCompiled.abi).at(checkstore2Address);
    checkmanager2 = eth.contract(CheckManagerCompiled.abi).at(checkmanager2Address);
    accountstore2 = eth.contract(BcAccountStoreCompiled.abi).at(accountstore2Address);

    checkTypeStore = eth.contract(BcCheckTypeStoreCompiled.abi).at(checkTypeStoreAddress);
};

var initDemo = function() {
    setContracts();

    console.log('Adding Check Types...');

    customer.addCheckType("Check", {from:regulatoruser, gas:transGas});
    customer.addCheckType("ConformedCheck", {from:regulatoruser, gas:transGas});
    customer.addCheckType("PromissoryNote", {from:regulatoruser, gas:transGas});
    customer.addCheckType("ConformedPromissoryNote", {from:regulatoruser, gas:transGas});

    var countCheckType = customer.checkTypeCount({from:regulatoruser, gas:transGas});
    var result = assert(countCheckType == 4, 'Add Check Types');
    var msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);

    bankstore.setCodeLocation(inicode, lengthcode);
    initBanks(checkmanager1, regulator, accountstore1, bankstore, checkstore1, bankCode1,  bankName1, bank1Eth, banker1.address);

    initBanks(checkmanager2, regulator, accountstore2, bankstore, checkstore2, bankCode2,  bankName2, bank2Eth, banker2.address);

    console.log('Add Account ' + account1);
    banker1.addAccount(user1Addr, account1, 300000000000, {from:bank1Eth, gas:transGas});
    var accountByNumber = banker1.getAccountByNumber(account1, {from:bank1Eth, gas:transGas});
    result = assert(accountByNumber[3], 'Add Account ' + account1);
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);

    console.log('Add Account ' + account2);
    banker1.addAccount(user2Addr, account2, 300000000000, {from:bank1Eth, gas:transGas});
    accountByNumber = banker1.getAccountByNumber(account2, {from:bank1Eth, gas:transGas});
    result = assert(accountByNumber[3], 'Add Account ' + account2);
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);

    console.log('Add Account ' + account3);
    banker2.addAccount(user3Addr, account3, 300000000000, {from:bank2Eth, gas:transGas});
    accountByNumber = banker2.getAccountByNumber(account3, {from:bank2Eth, gas:transGas});
    result = assert(accountByNumber[3], 'Add Account ' + account3);
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);

    console.log('Add Checks... ');
    banker1.addCheck(account2, codeline1, CheckType.Check, certifierName, {from:bank1Eth, gas:transGas});
    banker1.addCheck(account1, codeline2, CheckType.ConformedCheck, certifierName, {from:bank1Eth, gas:transGas});
    banker1.addCheck(account2, codeline3, CheckType.PromissoryNote, certifierName, {from:bank1Eth, gas:transGas});
    banker1.addCheck(account1, codeline4, CheckType.ConformedPromissoryNote, certifierName, {from:bank1Eth, gas:transGas});

    banker2.addCheck(account3, codeline5, CheckType.Check, certifierName, {from:bank2Eth, gas:transGas});
    banker2.addCheck(account3, codeline6, CheckType.Check, certifierName, {from:bank2Eth, gas:transGas});

    var countChecks1 = banker1.getChecksCount(account1, {from:regulatoruser, gas:transGas});
    var countChecks2 = banker2.getChecksCount(account1, {from:regulatoruser, gas:transGas});
    result = assert((countChecks1 == 2) && (countChecks2 == 0), 'Add Checks to account ' + account1);
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);

    countChecks1 = banker1.getChecksCount(account2, {from:regulatoruser, gas:transGas});
    countChecks2 = banker2.getChecksCount(account2, {from:regulatoruser, gas:transGas});
    result = assert((countChecks1 == 2) && (countChecks2 == 0), 'Add Checks to account ' + account2);
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);

    countChecks1 = banker1.getChecksCount(account3, {from:regulatoruser, gas:transGas});
    countChecks2 = banker2.getChecksCount(account3, {from:regulatoruser, gas:transGas});
    result = assert((countChecks1 == 0) && (countChecks2 == 2), 'Add Checks to account ' + account3);
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);

    info();
};

var initRegulator = function() {
    setContracts();
    regulator.setRegulatorName(regulatorname, {from:regulatoruser, gas:transGas});
};

// var initCustomer = function() {
//     setContracts();
//     customer.setReceiverStore(receiverStore.address,{from:regulatoruser, gas:transGas});
//     customer.setIdentityStore(indentityStore.address,{from:regulatoruser, gas:transGas});
//     customer.setCheckTypeStore(checkTypeStore.address,{from:regulatoruser, gas:transGas});
// };

var initBanker = function(bankcode, bankaddress) {
    setContracts();
    setContractsInitBank(checkmanager1, accountstore1, bankstore, checkstore1, bankcode, bankaddress);
};

var initBanks = function(checkmanager, regulator, accountstore, bankstore, checkstore, bankcode, bankname, bankaddress, contractaddress) {
    setContractsInitBank(checkmanager, accountstore, bankstore, checkstore, bankcode, bankaddress);
    regulator.addBank(bankcode,  bankname, bankaddress, contractaddress, {from:regulatoruser, gas:transGas});
};

var setPromotions = function(checkmanager, bankaddress) {

    var configPromotion = function(checkType, currentStatus, newStatus, Rol, security, depAcc, secCode, searchStatus){
        checkmanager.setPromotion(checkType, currentStatus, newStatus, Rol, security, depAcc, secCode, searchStatus, {from : bankaddress, gas : transGas}); // issued to filled
    }
    var rol_field = 0;
    console.log('Setting Promotions...');
    /* LEGEND *******************************************************************************************************

       ROLES (Who can do the promotion)      FIELDS
       0001 - 1 - CHECK_OWNER                0000 - 0 - No modify allowed in deliveredTo and deposit account fileds.
       0010 - 2 - BANK_OWNER                 0001 - 1 - Modify allowed in deliveredTo field.
       0100 - 4 - CHECK_DEST                 0010 - 2 - Must modify deliveredTo field.
       1000 - 8 - EVERYBODY                  0100 - 4 - Modify allowed in deposit account field.
                                             1000 - 8 - Must modify deposit account field.
       SECURITY (Who need securityCode)
       0001 - 1 - USER_SECURITY
       0010 - 2 - BANKER_SECURITY            searchStatus (status to revert if exists and not equal to issued(0))
       0100 - 4 - CERTIFIER

       TOKEN (SecurityCode update config)
       0001 - 1 - CAN_UPDATE
       0010 - 2 - MUST_UPDATE
       0100 - 4 - CERTIFIER

       ****************************************************************************************************************/

    // Promotions                                                                                                                                                 (token)
    //              checkType,                         from,                               to,                                 Rol,             security, depAcc, secCode, RevertStatus
    //              ---------------------------------  ----------------------------------  ----------------------------------  ---------------  --------  ------  -------  ---------------------
    // Flow type Check
    configPromotion(CheckType.Check,                   CheckStatus.Issued,                 CheckStatus.Issued,                 Rol.CheckOwner | Rol.Banker,  0,        5,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Issued,                 CheckStatus.Filled,                 Rol.CheckOwner | Rol.Banker,  0,        5,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Filled,                 CheckStatus.Delivered,              Rol.Banker,      0,        5,      1,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Delivered,              CheckStatus.Accepted,               Rol.Everybody,   3,        4,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Delivered,              CheckStatus.NotAccepted,            Rol.Everybody,   3,        0,      0,       CheckStatus.Accepted); // delivered to not accepted
    configPromotion(CheckType.Check,                   CheckStatus.Accepted,               CheckStatus.Deposited,              Rol.Everybody,   3,        4,      0,       0                   );

    configPromotion(CheckType.Check,                   CheckStatus.Accepted,               CheckStatus.PendingCertification,   Rol.Banker,      0,        0,      5,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.PendingCertification,   CheckStatus.Certified,              Rol.Banker,      4,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.PendingCertification,   CheckStatus.RejectedCertification,  Rol.Banker,      4,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Certified,              CheckStatus.Deposited,              Rol.Everybody,   3,        4,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.RejectedCertification,  CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );

    configPromotion(CheckType.Check,                   CheckStatus.NotAccepted,            CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Accepted,               CheckStatus.Filled,                 Rol.Everybody,   3,        6,      1,       0                   ); // accepted to delivered (endorsed)
    configPromotion(CheckType.Check,                   CheckStatus.Deposited,              CheckStatus.Paid,                   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Deposited,              CheckStatus.DepositRejected,        Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.DepositRejected,        CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    // Out of flow TimeOut
    configPromotion(CheckType.Check,                   CheckStatus.Delivered,              CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Accepted,               CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    // Out of flow Administrator
    configPromotion(CheckType.Check,                   CheckStatus.Filled,                 CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Filled,                 CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Filled,                 CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Delivered,              CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Delivered,              CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Accepted,               CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Accepted,               CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Deposited,              CheckStatus.SentToHost,             Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Deposited,              CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Deposited,              CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Deposited,              CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.SentToHost,             CheckStatus.Paid,                   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.SentToHost,             CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.SentToHost,             CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.SentToHost,             CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Paid,                   CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.NotAccepted,            CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.NotAccepted,            CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Rejected,               CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Rejected,               CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Locked,                 CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.Issued,                 CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   ); // issued to locked
    // Out of Flow Administrador - Certified

    configPromotion(CheckType.Check,                   CheckStatus.PendingCertification,   CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.PendingCertification,   CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.RejectedCertification,  CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.Check,                   CheckStatus.RejectedCertification,  CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );

    // Check Test Get Promotion
    var promoCheck = checkmanager.getPromotion(CheckType.Check, CheckStatus.Issued, CheckStatus.Locked, {from : bankaddress, gas : transGas});
    var result = assert(promoCheck[rol_field] == Rol.Banker, 'Set promotions to CheckType Check');
    var msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);

    // Promotions
    //              checkType,                         from,                               to,                                 Rol,             security, depAcc, secCode, RevertStatus
    //              ---------------------------------  ----------------------------------  ----------------------------------  ---------------  --------  ------  -------  ---------------------
    // Flow type PromissoryNote
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Issued,                 CheckStatus.Issued,                 Rol.CheckOwner | Rol.Banker,  0,        5,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Issued,                 CheckStatus.Filled,                 Rol.CheckOwner | Rol.Banker,  0,        5,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Filled,                 CheckStatus.Delivered,              Rol.Banker,      0,        5,      1,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Delivered,              CheckStatus.Accepted,               Rol.Everybody,   3,        4,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Delivered,              CheckStatus.NotAccepted,            Rol.Everybody,   3,        0,      0,       CheckStatus.Accepted); // delivered to not accepted
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Accepted,               CheckStatus.Deposited,              Rol.Everybody,   3,        4,      0,       0                   );

    configPromotion(CheckType.PromissoryNote,          CheckStatus.Accepted,               CheckStatus.PendingCertification,   Rol.Banker,      0,        0,      5,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.PendingCertification,   CheckStatus.Certified,              Rol.Banker,      4,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.PendingCertification,   CheckStatus.RejectedCertification,  Rol.Banker,      4,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Certified,              CheckStatus.Deposited,              Rol.Everybody,   3,        4,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.RejectedCertification,  CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );

    configPromotion(CheckType.PromissoryNote,          CheckStatus.NotAccepted,            CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Accepted,               CheckStatus.Filled,                 Rol.Everybody,   3,        6,      1,       0                   ); // accepted to delivered (endorsed)
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Deposited,              CheckStatus.Paid,                   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Deposited,              CheckStatus.DepositRejected,        Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.DepositRejected,        CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    // Out of flow TimeOut
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Delivered,              CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Accepted,               CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    // Out of flow Administrator
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Filled,                 CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Filled,                 CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Filled,                 CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Delivered,              CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Delivered,              CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Accepted,               CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Accepted,               CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Deposited,              CheckStatus.SentToHost,             Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Deposited,              CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Deposited,              CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Deposited,              CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.SentToHost,             CheckStatus.Paid,                   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.SentToHost,             CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.SentToHost,             CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.SentToHost,             CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Paid,                   CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.NotAccepted,            CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.NotAccepted,            CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Rejected,               CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Rejected,               CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Locked,                 CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.PromissoryNote,          CheckStatus.Issued,                 CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   ); // issued to locked
    // Out of Flow Administrador - Certified

    configPromotion(CheckType.PromissoryNote,          CheckStatus.PendingCertification,   CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   ); //
    configPromotion(CheckType.PromissoryNote,          CheckStatus.PendingCertification,   CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   ); //
    configPromotion(CheckType.PromissoryNote,          CheckStatus.RejectedCertification,  CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   ); //
    configPromotion(CheckType.PromissoryNote,          CheckStatus.RejectedCertification,  CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   ); //

    // Promissory Note Test Get Promotion
    var promoPromissoryNote = checkmanager.getPromotion(CheckType.PromissoryNote, CheckStatus.Issued, CheckStatus.Locked, {from : bankaddress, gas : transGas});
    result = assert(promoPromissoryNote[rol_field] == Rol.Banker, 'Set promotions to CheckType PromissoryNote');
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);

    // Promotions
    //              checkType,                         from,                               to,                                 Rol,             security, depAcc, secCode, RevertStatus
    //              ---------------------------------  ----------------------------------  ----------------------------------  ---------------  --------  ------  -------  ---------------------
    // Flow type ConformedCheck
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Issued,                 CheckStatus.Issued,                 Rol.CheckOwner | Rol.Banker,  0,        5,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Issued,                 CheckStatus.Filled,                 Rol.CheckOwner | Rol.Banker,  0,        5,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Filled,                 CheckStatus.ReservedFunds,          Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Filled,                 CheckStatus.Delivered,              Rol.Banker,      0,        5,      1,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Filled,                 CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.RejectedConformation,   CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.ReservedFunds,          CheckStatus.Delivered,              Rol.Banker,      0,        0,      1,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Delivered,              CheckStatus.Accepted,               Rol.Everybody,   3,        4,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Delivered,              CheckStatus.NotAccepted,            Rol.Everybody,   3,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Accepted,               CheckStatus.Deposited,              Rol.Everybody,   3,        4,      0,       0                   );

    configPromotion(CheckType.ConformedCheck,          CheckStatus.Accepted,               CheckStatus.PendingCertification,   Rol.Banker,      0,        0,      5,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.PendingCertification,   CheckStatus.Certified,              Rol.Banker,      4,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.PendingCertification,   CheckStatus.RejectedCertification,  Rol.Banker,      4,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Certified,              CheckStatus.Deposited,              Rol.Everybody,   3,        4,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.RejectedCertification,  CheckStatus.ReleasedFunds,          Rol.Banker,      0,        0,      0,       0                   );

    configPromotion(CheckType.ConformedCheck,          CheckStatus.NotAccepted,            CheckStatus.ReleasedFunds,          Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Accepted,               CheckStatus.Filled,                 Rol.Everybody,   3,        6,      1,       0                   ); // accepted to delivered (endorsed)
    configPromotion(CheckType.ConformedCheck,          CheckStatus.ReleasedFunds,          CheckStatus.DepositRejected,        Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.DepositRejected,        CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Deposited,              CheckStatus.Paid,                   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Deposited,              CheckStatus.ReleasedFunds,          Rol.Banker,      0,        0,      0,       0                   );
    // Out of flow TimeOut
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Delivered,              CheckStatus.ReleasedFunds,          Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Accepted,               CheckStatus.ReleasedFunds,          Rol.Banker,      0,        0,      0,       0                   );
    // Out of flow Administrator
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Filled,                 CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Filled,                 CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Filled,                 CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.ReservedFunds,          CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.ReservedFunds,          CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.ReservedFunds,          CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.ReservedFunds,          CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Delivered,              CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Delivered,              CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Delivered,              CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Accepted,               CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Accepted,               CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Accepted,               CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Deposited,              CheckStatus.SentToHost,             Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Deposited,              CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Deposited,              CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Deposited,              CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Deposited,              CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.SentToHost,             CheckStatus.Paid,                   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.SentToHost,             CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.SentToHost,             CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.SentToHost,             CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.SentToHost,             CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Paid,                   CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.NotAccepted,            CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.NotAccepted,            CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.RejectedConformation,   CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.RejectedConformation,   CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.ReleasedFunds,          CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.ReleasedFunds,          CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Rejected,               CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Rejected,               CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Locked,                 CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedCheck,          CheckStatus.Issued,                 CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   ); // issued to locked
    // Out of Flow Administrador - Certified

    configPromotion(CheckType.ConformedCheck,          CheckStatus.PendingCertification,   CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   ); //
    configPromotion(CheckType.ConformedCheck,          CheckStatus.PendingCertification,   CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   ); //
    configPromotion(CheckType.ConformedCheck,          CheckStatus.RejectedCertification,  CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   ); //
    configPromotion(CheckType.ConformedCheck,          CheckStatus.RejectedCertification,  CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   ); //

    // Conformed Check Test Get Promotion
    var promoConformedCheck = checkmanager.getPromotion(CheckType.ConformedCheck, CheckStatus.Issued, CheckStatus.Locked, {from : bankaddress, gas : transGas});
    result = assert(promoConformedCheck[rol_field] == Rol.Banker, 'Set promotions to CheckType ConformedCheck');
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);

    // Promotions
    //              checkType,                         from,                               to,                                 Rol,             security, depAcc, secCode, RevertStatus
    //              ---------------------------------  ----------------------------------  ----------------------------------  ---------------  --------  ------  -------  ---------------------
    // Flow type ConformedPromissoryNote
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Issued,                 CheckStatus.Issued,                 Rol.CheckOwner | Rol.Banker,  0,        5,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Issued,                 CheckStatus.Filled,                 Rol.CheckOwner | Rol.Banker,  0,        5,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Filled,                 CheckStatus.ReservedFunds,          Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Filled,                 CheckStatus.Delivered,              Rol.Banker,      0,        5,      1,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Filled,                 CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.RejectedConformation,   CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.ReservedFunds,          CheckStatus.Delivered,              Rol.Banker,      0,        0,      1,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Delivered,              CheckStatus.Accepted,               Rol.Everybody,   3,        4,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Delivered,              CheckStatus.NotAccepted,            Rol.Everybody,   3,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Accepted,               CheckStatus.Deposited,              Rol.Everybody,   3,        4,      0,       0                   );

    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Accepted,               CheckStatus.PendingCertification,   Rol.Banker,      0,        0,      5,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.PendingCertification,   CheckStatus.Certified,              Rol.Banker,      4,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.PendingCertification,   CheckStatus.RejectedCertification,  Rol.Banker,      4,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Certified,              CheckStatus.Deposited,              Rol.Everybody,   3,        4,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.RejectedCertification,  CheckStatus.ReleasedFunds,          Rol.Banker,      0,        0,      0,       0                   );

    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.NotAccepted,            CheckStatus.ReleasedFunds,          Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Accepted,               CheckStatus.Filled,                 Rol.Everybody,   3,        6,      1,       0                   ); // accepted to delivered (endorsed)
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.ReleasedFunds,          CheckStatus.DepositRejected,        Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.DepositRejected,        CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Deposited,              CheckStatus.Paid,                   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Deposited,              CheckStatus.ReleasedFunds,          Rol.Banker,      0,        0,      0,       0                   );
    // Out of flow TimeOut
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Delivered,              CheckStatus.ReleasedFunds,          Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Accepted,               CheckStatus.ReleasedFunds,          Rol.Banker,      0,        0,      0,       0                   );
    // Out of flow Administrator
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Filled,                 CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Filled,                 CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Filled,                 CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.ReservedFunds,          CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.ReservedFunds,          CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.ReservedFunds,          CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.ReservedFunds,          CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Delivered,              CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Delivered,              CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Delivered,              CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Accepted,               CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Accepted,               CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Accepted,               CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Deposited,              CheckStatus.SentToHost,             Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Deposited,              CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Deposited,              CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Deposited,              CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Deposited,              CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.SentToHost,             CheckStatus.Paid,                   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.SentToHost,             CheckStatus.Rejected,               Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.SentToHost,             CheckStatus.RejectedConformation,   Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.SentToHost,             CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.SentToHost,             CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Paid,                   CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.NotAccepted,            CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.NotAccepted,            CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.RejectedConformation,   CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.RejectedConformation,   CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.ReleasedFunds,          CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.ReleasedFunds,          CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Rejected,               CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Rejected,               CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Locked,                 CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   );
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Issued,                 CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   ); // issued to locked
    // Out of Flow Administrador - Certified

    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.PendingCertification,   CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   ); //
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.PendingCertification,   CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   ); //
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.RejectedCertification,  CheckStatus.Completed,              Rol.Banker,      0,        0,      0,       0                   ); //
    configPromotion(CheckType.ConformedPromissoryNote, CheckStatus.RejectedCertification,  CheckStatus.Locked,                 Rol.Banker,      0,        0,      0,       0                   ); //

    // Conformed Promissory Note Test Get Promotion
    var promoConformedPromissoryNote = checkmanager.getPromotion(CheckType.ConformedPromissoryNote, CheckStatus.Issued, CheckStatus.Locked, {from : bankaddress, gas : transGas});
    result = assert(promoConformedPromissoryNote[rol_field] == Rol.Banker, 'Set promotions to CheckType ConformedPromissoryNote');
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);
};

var setContractsInitBank = function (checkmanager, accountstore, bankstore, checkstore, bankcode, bankaddress){
    setPromotions(checkmanager, bankaddress);

    accountstore.setCheckStoreAddress(checkstore.address, {from:bankaddress, gas:transGas});
    checkstore.setManagerContractAddress(checkmanager.address, {from : bankaddress, gas:transGas});

    accountstore.setBankCode(web3.fromAscii(bankcode), {from:bankaddress, gas:transGas});
    accountstore.setBankStoreContract(bankstore.address, {from : bankaddress, gas:transGas});
    checkstore.setBankCode(web3.fromAscii(bankcode), {from : bankaddress, gas:transGas});
};

var manage = function() {
    setContracts();
    info();
    console.log('Ready');
};

var push = function() {
    loadScript('script1.js');
};

var assert = function(value, desc) {
    /*var msg = value ? ' -> PASS' : ' -> *** FAIL ***';
    if (typeof desc !== 'undefined' && !value) { msg = msg + ' - ' + desc; }
    return msg;*/
    return (value ? 'PASS -> ' : '*** FAIL *** -> ') + desc;
}


//////////////////////////////////TEST/////////////////////////////////////////////////
var test = function() {
    setContracts();

    console.log('--------------------------- REGULATOR TEST ----------------------------');
    console.log('----------------------------------BANK----------------------')
    testBank();

    console.log('------------------- CUSTOMER TEST ------------------------');
    console.log('------------------- TEST IDENTITIES ------------------------');
    testIdentities();

    console.log('--------------------------- BANKER TEST ----------------------------');
    console.log('----------------------- ACCOUNT TEST --------------------------');
    testAccount();

    console.log('-------------------- CHECKTYPE TEST --------------------');
    testCheckType(CheckType.Check, "203800018111111111119959120");
    testCheckType(CheckType.ConformedCheck, "203800018111111111119959121");
    testCheckType(CheckType.PromissoryNote, "203800018111111111119959122");
    testCheckType(CheckType.ConformedPromissoryNote, "203800018111111111119959123");

    console.log('------------------ TRANSACTION INTRA------------------');
    testTransactionIntra();

    console.log('------------------ TRANSACTION INTER------------------');
    testTransactionInter();

    console.log('------------------- TEST CHECK VERSIONS ------------------------');
    testNotConformedCheckTypeVersion(codeline1);

    console.log('------------------- TEST CONFORMED CHECK VERSIONS ------------------------');
    testConformedCheckTypeVersion(codeline2);

    console.log('------------------- TEST CONFORMED CHECK VERSIONS (NO SECURITY) ------------------------');
    testNoSecureConformedCheckTypeVersion(account1, codeline7, certifierName);

    console.log('------------------- TEST PROMISSORY NOTE VERSIONS ------------------------');
    testNotConformedCheckTypeVersion(codeline3);

    console.log('------------------- TEST CONFORMED PROMISSORY NOTE VERSIONS ------------------------');
    testConformedCheckTypeVersion(codeline4);
};

var testBank = function() {
    var bankId = '4050';
    var bankN = 'NewBank';
    var newBankN = "UpdatedBank";

    var banksLength = regulator.getBankCount();
    regulator.addBank(bankId, bankN, bank1Eth, banker1.address, {from:regulatoruser, gas:transGas});
    var countbank = regulator.getBankCount();
    var msg = assert(Number(countbank) == Number(banksLength) + 1, 'Add bank ' + bankN + ' with code ' + bankId);
    console.log(msg);

    regulator.updateBank(bankId, newBankN, bank1Eth, banker1.address, true, {from:regulatoruser, gas:transGas});
    var bankByCode = regulator.getBankByCode(bankId, {from:regulatoruser, gas:transGas});
    msg = assert(bankByCode[2] == newBankN, 'Update bank name and get bank by code');
    console.log(msg);

    var bankByIndex = regulator.getBankByIndex(2, {from:regulatoruser, gas:transGas});
    msg = assert(bankByIndex[2] == newBankN, 'Update bank name and get bank by index');
    console.log(msg);

    regulator.deleteBank(bankId, {from:regulatoruser, gas:transGas});
    var bankByCode = regulator.getBankByCode(bankId, {from:regulatoruser, gas:transGas});
    msg = assert(bankByCode[6] == false, 'Delete bank with code ' + bankId);
    console.log(msg);

    var getbank = banker1.getBankCode();
    msg = assert(getbank == bankCode1, "Get bank code from banker1");
    console.log(msg);

    bankByCode = regulator.getBankByCode(bankCode1, {from:regulatoruser, gas:transGas});
    msg = assert(bankByCode[2] == bankName1, "Get bank by code " + bankCode1 + " from regulator");
    console.log(msg);

    getbank = banker2.getBankCode();
    msg = assert(getbank == bankCode2, "Get bank code from banker2");
    console.log(msg);

    bankByCode = regulator.getBankByCode(bankCode2, {from:regulatoruser, gas:transGas});
    msg = assert(bankByCode[2] == bankName2, "Get bank by code " + bankCode2 + " from regulator");
    console.log(msg);
};

var testIdentities = function() {
    var identifier = "45263987S";
    var notifyAddress = "usuario@correo.es";

    var preCount = customer.identityCount(identifier, {from:regulatoruser, gas:transGas});
    customer.addIdentity(identifier, user1Addr, notifyAddress, {from:regulatoruser, gas:transGas});
    var postCount = customer.identityCount(identifier, {from:regulatoruser, gas:transGas});

    msg = assert((postCount-preCount) == 1, 'Add identity ' + identifier);
    console.log(msg);

    var outAddr = customer.getIdentityAddress(identifier, preCount, {from:regulatoruser, gas:transGas});
    msg = assert(outAddr ==  user1Addr, 'Read address of identity');
    console.log(msg);

    var outIdentifier = customer.getIdentityIdentifier(user1Addr, {from:regulatoruser, gas:transGas});
    msg = assert(outIdentifier ==  identifier, 'Read identifier of identity');
    console.log(msg);

    customer.updateIdentity(identifier, preCount, user2Addr, {from:regulatoruser, gas:transGas});

    outAddr = customer.getIdentityAddress(identifier, preCount, {from:regulatoruser, gas:transGas});
    msg = assert(outAddr ==  user2Addr, 'Read address of updated identity');
    console.log(msg);

    outIdentifier = customer.getIdentityIdentifier(user2Addr, {from:regulatoruser, gas:transGas});
    msg = assert(outIdentifier ==  identifier, 'Read identifier of updated identity');
    console.log(msg);

    customer.disableIdentity(identifier, preCount, {from:regulatoruser, gas:transGas});

    outAddr = customer.getIdentityAddress(identifier, preCount, {from:regulatoruser, gas:transGas});
    msg = assert(outAddr!=user1Addr, 'Cannot read address of disabled identity');
    console.log(msg);

    try {
        customer.getIdentityIdentifier(user2Addr, {from:regulatoruser, gas:transGas});
        msg = assert(false, 'Cannot read identifier of disabled identity');
        console.log(msg);
    } catch(error) {}

    customer.enableIdentity(identifier, preCount, {from:regulatoruser, gas:transGas});

    outAddr = customer.getIdentityAddress(identifier, preCount, {from:regulatoruser, gas:transGas});
    msg = assert(outAddr ==  user2Addr, 'Read address of re-enabled identity');
    console.log(msg);

    outIdentifier = customer.getIdentityIdentifier(user2Addr, {from:regulatoruser, gas:transGas});
    msg = assert(outIdentifier ==  identifier, 'Read identifier of re-enabled identity');
    console.log(msg);

    outNotify = customer.getIdentityNotifyAddress(identifier, {from:regulatoruser, gas:transGas});
    msg = assert(outNotify ==  notifyAddress, 'Read notify address from identity');
    console.log(msg);

    var notifyAddress2 = "666555444";
    customer.setIdentityNotifyAddress(identifier, notifyAddress2, {from:regulatoruser, gas:transGas});
    outNotify2 = customer.getIdentityNotifyAddress(identifier, {from:regulatoruser, gas:transGas});
    msg = assert(outNotify2 ==  notifyAddress2, 'Update notify address from identity');
    console.log(msg);

    console.log("Test indentities from banker");

    var identity1 = "AAAAAAAAA";
    var numberIdentity = "653265321"

    banker1.setIdentityNotifyAddress(identity1, numberIdentity, {from:user2Addr, gas:transGas});

    var numberOut = banker1.getIdentityNotifyAddress(identity1, {from:user2Addr, gas:transGas});
    msg = assert(numberOut ==  numberIdentity, 'Get notify address from identity from banker');
    console.log(msg);

    var updateMail = "usuarioAAAAA@correo.es";
    banker1.setIdentityNotifyAddress(identity1, updateMail, {from:user2Addr, gas:transGas});
    var mailOut = banker1.getIdentityNotifyAddress(identity1, {from:user2Addr, gas:transGas});
    msg = assert(mailOut ==  updateMail, 'Update notify address from identity from banker');
    console.log(msg);

};

var testAccount = function() {
    var accountId = "203800018111111111120";

    var accountsLength = banker1.accountCount({from:bank1Eth, gas:transGas});
    banker1.addAccount(user4Addr, accountId, 300000000000, {from:bank1Eth, gas:transGas});
    var countaccount = banker1.accountCount({from:bank1Eth, gas:transGas});
    msg = assert(Number(countaccount) == Number(accountsLength) + 1, 'Add account ' + accountId);
    console.log(msg);

    banker1.updateAccount(user4Addr, accountId, 400000000000, {from:bank1Eth, gas:transGas});
    var accountByNumber = banker1.getAccountByNumber(accountId, {from:bank1Eth, gas:transGas});
    msg = assert(accountByNumber[2] == 400000000000, 'Update balance of account');
    console.log(msg);

    banker1.disableAccount(accountId, {from:bank1Eth, gas:transGas});
    accountByNumber = banker1.getAccountByNumber(accountId, {from:bank1Eth, gas:transGas});
    msg = assert(accountByNumber[3] == false, 'Disable account');
    console.log(msg);

    banker1.enableAccount(accountId, {from:bank1Eth, gas:transGas});
    accountByNumber = banker1.getAccountByNumber(accountId, {from:bank1Eth, gas:transGas});
    msg = assert(accountByNumber[3] == true, 'Enable account');
    console.log(msg);
};

var testCheckType = function(checkType, codeline) {
    var checksAccount1 = banker1.getChecksCount(account1, {from:bank1Eth, gas:transGas});
    var checksAccount2 = banker1.getChecksCount(account2, {from:bank1Eth, gas:transGas});
    var checksAccount3 = banker2.getChecksCount(account3, {from:bank2Eth, gas:transGas});

    banker1.addCheck(account2, codeline, checkType, certifierName, {from:bank1Eth, gas:transGas});
    var countcheck = banker1.getChecksCount(account2, {from:bank1Eth, gas:transGas});
    msg = assert(Number(countcheck) == (Number(checksAccount2) + 1), 'Add check with type ' + checkType + ' to account ' + account2);
    console.log(msg);
};

var testTransactionIntra = function() {
    var counttransini = regulator.getTransactionsLength(account2, {from:bank1Eth, gas:transGas});
    msg = assert(counttransini == 0, 'Transactions length for account ' + account2 + ' must be 0');
    console.log(msg);

    regulator.addTransaction(bankCode1, account2, codeline1, 0, CheckStatus.Filled, {from:bank1Eth, gas:transGas});

    var transactionadd = regulator.getTransaction(account2, counttransini, {from:bank1Eth, gas:transGas});
    msg = assert(transactionadd[4] == CheckStatus.Filled, 'Add Transaction IntraBank');
    console.log(msg);

    var counttransafter = regulator.getTransactionsLength(account2, {from:bank1Eth, gas:transGas});
    msg = assert(counttransafter == 1, 'Transactions length must increment after add');
    console.log(msg);

    var accountHash = regulator.getAccountHash(0, {from:regulatoruser, gas:transGas});
    counttransafter = regulator.getTransactionsLengthByHash(accountHash, {from:regulatoruser, gas:transGas});
    msg = assert(counttransafter == 1, 'Transactions length by accountHash must increment after add');
    console.log(msg);

    var lengthHash = regulator.getTransactionsLengthByHash(accountHash, {from:bank1Eth, gas:transGas});

    var accountLength = regulator.getAccountLength();
    msg = assert(accountLength == 1, 'Get AccountLength from Regulator');
    console.log(msg);
};

var testTransactionInter = function() {
    var code = checkstore2.getCode();
    var contractaddress = checkstore2.getAccountStore();

    var counttransinter = regulator.getTransactionsLength(account2, {from:bank1Eth, gas:transGas});
    msg = assert(counttransinter == 1, 'Transactions length of account ' + account2 + ' must be 1');
    console.log(msg);

    regulator.addTransaction(bankCode2, account2, codeline5, 0, CheckStatus.Filled, {from:bank2Eth, gas:transGas});

    transactionadd = regulator.getTransaction(account2, 0, {from:bank1Eth, gas:transGas});
    msg = assert(transactionadd[4] == CheckStatus.Filled, 'Add Transaction InterBank');
    console.log(msg);

    counttransafter = regulator.getTransactionsLength(account2, {from:bank1Eth, gas:transGas});
    msg = assert(counttransafter == 2, 'Transactions length must increment after add');
    console.log(msg);
};

var testNotConformedCheckTypeVersion = function(codeline) {
    var newStatus = CheckStatus.Filled;
    var securityCode = '';
    var newSecurityCode = '';

    var reason = 'test';

    var amount = 1500;
    var processDate = 201812000000;

    var identity = '333365458D';
    var deliveredTo = 'Anselmo Lopez';

    var countTransAccount1 = regulator.getTransactionsLength(account1, {from:bank1Eth, gas:transGas});
    var countTransAccount2 = regulator.getTransactionsLength(account2, {from:bank1Eth, gas:transGas});

    var accountbynumber;
    checkindex = banker1.getCheckIndex(codeline, {from:bank1Eth, gas:transGas});
    var preIdentityCount = customer.countReceived(identity);

    banker1.updateCheck(codeline, amount, processDate, newStatus, account1, deliveredTo, reason, securityCode, newSecurityCode, identity, certifierName, {from:user2Addr, gas:transGas});
    var identityCountAfterFill = customer.countReceived(identity);
    msg = assert((identityCountAfterFill - preIdentityCount) == 1, 'Fill & Add check ' + codeline + ' to identity ' + identity);
    console.log(msg);

    var receivedCheckIndexInfo = customer.getReceivedIndex(identity, codeline, {from:user2Addr, gas:transGas});
    msg = assert(receivedCheckIndexInfo[1], 'Index for filled check must exists');
    console.log(msg);

    var receivedCheckIndex = receivedCheckIndexInfo[0];
    var receivedCheckInfoFill = customer.getReceived(identity, receivedCheckIndex, {from:user2Addr, gas:transGas});

    var newStatus1 = CheckStatus.Delivered;
    banker1.updateCheck(codeline, amount, processDate, newStatus1, account1, deliveredTo, reason, securityCode, newSecurityCode, identity, certifierName, {from:bank1Eth, gas:transGas});

    var identityCountAfterDeliver = customer.countReceived(identity);
    msg = assert(Number(identityCountAfterFill) == Number(identityCountAfterDeliver), 'Not add check to identity when Delivered');
    console.log(msg);

    var receivedCheckInfoDeliver = customer.getReceived(identity, receivedCheckIndex, {from:user2Addr, gas:transGas});
    msg = assert(receivedCheckInfoFill[0] == receivedCheckInfoDeliver[0], 'Delivered check must keep the same bank code');
    console.log(msg);
    msg = assert(receivedCheckInfoFill[1] == receivedCheckInfoDeliver[1], 'Delivered check must keep the same codeline');
    console.log(msg);
    msg = assert( (Number(receivedCheckInfoFill[2])+1) == Number(receivedCheckInfoDeliver[2]), 'Delivered check must increment the version');
    console.log(msg);

    var customerCheckBase = customer.getCheckBase(codeline, {from:bank1Eth, gas:transGas});
    var customerCheckLastVersion = customer.getCheckVersionLast(codeline, {from:bank1Eth, gas:transGas});
    var customerCheckPreviousVersion = customer.getCheckVersion(codeline, receivedCheckInfoFill[2], {from:bank1Eth, gas:transGas});
    var customerCheckCustomVersion = customer.getCheckVersion(codeline, receivedCheckInfoDeliver[2], {from:bank1Eth, gas:transGas});

    msg = assert(codeline == customerCheckBase[0], 'Customer check read must return the given check codeline');
    console.log(msg);
    msg = assert(Number(amount) == Number(customerCheckBase[2]), 'Customer check read must return the given check amount');
    console.log(msg);
    msg = assert(Number(processDate) == Number(customerCheckBase[3]), 'Customer check read must return the given check processDate');
    console.log(msg);
    msg = assert(Number(receivedCheckInfoDeliver[2]) == Number(customerCheckBase[4]), 'Last version must be the delivered version');
    console.log(msg);
    msg = assert(certifierName == customerCheckBase[6], 'Customer check read must return the given certifier');
    console.log(msg);

    msg = assert(Number(customerCheckCustomVersion[0]) == Number(customerCheckLastVersion[0]), 'Last and user versions must have the same status');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[1] == customerCheckLastVersion[1], 'Last and user versions must have the same deposit account');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[2] == customerCheckLastVersion[2], 'Last and user versions must have the same delivered to');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[3] == customerCheckLastVersion[3], 'Last and user versions must have the same reason');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[4][0] == customerCheckLastVersion[4][0] && customerCheckCustomVersion[4][1] == customerCheckLastVersion[4][1], 'Last and user versions must have the same sec code');
    console.log(msg);
    msg = assert(Number(customerCheckCustomVersion[5]) == Number(customerCheckLastVersion[5]), 'Last and user versions must have the same timestamp');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[6] == customerCheckLastVersion[6], 'Last and user versions must have the same receiver identity');
    console.log(msg);

    msg = assert(CheckStatus.Delivered == customerCheckLastVersion[0], 'Last version must have a valid status');
    console.log(msg);
    msg = assert(account1 == customerCheckLastVersion[1], 'Last version must have a valid deposit account');
    console.log(msg);
    msg = assert(deliveredTo == customerCheckLastVersion[2], 'Last version must have a valid delivered to');
    console.log(msg);
    msg = assert(reason == customerCheckLastVersion[3], 'Last version must have a valid reason');
    console.log(msg);
    msg = assert('' != customerCheckLastVersion[4], 'Last version must have a valid sec code');
    console.log(msg);
    msg = assert(0 < customerCheckLastVersion[5], 'Last version must have a valid timestamp');
    console.log(msg);
    msg = assert(identity == customerCheckLastVersion[6], 'Last version must have a valid receiver identity');
    console.log(msg);

    msg = assert(CheckStatus.Filled == customerCheckPreviousVersion[0], 'Previous version must have a valid status');
    console.log(msg);
    msg = assert(account1 == customerCheckPreviousVersion[1], 'Previous version must have a valid deposit account');
    console.log(msg);
    msg = assert(deliveredTo == customerCheckPreviousVersion[2], 'Previous version must have a valid delivered to');
    console.log(msg);
    msg = assert(reason == customerCheckPreviousVersion[3], 'Previous version must have a valid reason');
    console.log(msg);
    msg = assert('' != customerCheckPreviousVersion[4], 'Previous version must have a valid sec code');
    console.log(msg);
    msg = assert(customerCheckLastVersion[5] > customerCheckPreviousVersion[5], 'Previous version must have a valid timestamp');
    console.log(msg);
    msg = assert(identity == customerCheckPreviousVersion[6], 'Previous version must have a valid receiver identity');
    console.log(msg);

    var bankerCheckBase = banker1.getBase(codeline, {from:bank1Eth, gas:transGas});

    msg = assert(Number(bankerCheckBase[1]) == Number(customerCheckBase[2]), 'Amount from banker & customer check read must match');
    console.log(msg);
    msg = assert(Number(bankerCheckBase[2]) == Number(customerCheckBase[3]), 'processDate from banker & customer check read must match');
    console.log(msg);
    msg = assert(Number(bankerCheckBase[3]) == Number(customerCheckBase[4]), 'Version from banker & customer check read must match');
    console.log(msg);
    msg = assert(Number(bankerCheckBase[4]) == Number(customerCheckBase[5]), 'CheckType from banker & customer check read must match');
    console.log(msg);
    msg = assert(bankerCheckBase[5] == customerCheckBase[6], 'Certifier from banker & customer check read must match');
    console.log(msg);

    counttransafter = regulator.getTransactionsLength(account1, {from:bank1Eth, gas:transGas});
    msg = assert(Number(counttransafter) == Number(countTransAccount1) + 2, 'Transactions length of account ' + account1 + ' must have 2 more');
    console.log(msg);

    counttransafter = regulator.getTransactionsLength(account2, {from:bank1Eth, gas:transGas});
    msg = assert(Number(counttransafter) == Number(countTransAccount2), 'Transactions length of account ' + account2 + ' must not change');
    console.log(msg);

    var checkBase = regulator.getCheckBase(account2, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkBase[5] == 0, 'Get checkBase of Transaction 0 of account ' + account2);
    console.log(msg);

    checkBase = regulator.getCheckBase(account2, 1, {from:bank2Eth, gas:transGas});
    msg = assert(checkBase[5] == 0, 'Get checkBase of Transaction 1 of account ' + account2);
    console.log(msg);

    checkBase = regulator.getCheckBase(account1, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkBase[5] == 1, 'Get checkBase of Transaction 0 of account ' + account1);
    console.log(msg);

    checkBase = regulator.getCheckBase(account1, 1, {from:bank1Eth, gas:transGas});
    msg = assert(checkBase[5] == 2, 'Get checkBase of Transaction 1 of account ' + account1);
    console.log(msg);

    version = banker1.getVersion(codeline, 0, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.Issued, 'Get initial version status');
    console.log(msg);
    msg = assert(version[1] == "", 'Get initial version depositAccount');
    console.log(msg);
    msg = assert(version[2] == "", 'Get initial version deliveredTo');
    console.log(msg);
    msg = assert(version[3] == "", 'Get initial version reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get initial version timestamp');
    console.log(msg);

    version = banker1.getVersion(codeline, 1, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.Filled, 'Get version 1 status');
    console.log(msg);
    msg = assert(version[1] == account1, 'Get version 1 depositAccount');
    console.log(msg);
    msg = assert(version[2] == deliveredTo, 'Get version 1 deliveredTo');
    console.log(msg);
    msg = assert(version[3] == reason, 'Get version 1 reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get version 1 timestamp');
    console.log(msg);

    version = banker1.getVersion(codeline, 2, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.Delivered, 'Get version 2 status');
    console.log(msg);
    msg = assert(version[1] == account1, 'Get version 2 depositAccount');
    console.log(msg);
    msg = assert(version[2] == deliveredTo, 'Get version 2 deliveredTo');
    console.log(msg);
    msg = assert(version[3] == reason, 'Get version 2 reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get version 2 timestamp');
    console.log(msg);

    var transactionupdate = regulator.getTransaction(account2, 0, {from:bank1Eth, gas:transGas});
    msg = assert(transactionupdate[4] == CheckStatus.Filled, 'Get Transaction 0 of account ' + account2);
    console.log(msg);

    var checkversion = regulator.getCheckVersion(account2, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkversion[0] == CheckStatus.Issued, 'Get CheckVersion 0 (Issued) of account ' + account2);
    console.log(msg);

    checkversion = regulator.getCheckVersion(account1, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkversion[0] == CheckStatus.Filled, 'Get CheckVersion 0 (Filled) of account ' + account1);
    console.log(msg);

    checkversion = regulator.getCheckVersion(account1, 1, {from:bank1Eth, gas:transGas});
    msg = assert(checkversion[0] == CheckStatus.Delivered, 'Get CheckVersion 1 (Delivered) of account ' + account1);
    console.log(msg);

    banker1.updateCheck(codeline, 1500, 201812000000, CheckStatus.NotAccepted, '', '', 'i dont this check', '', '', '', certifierName, {from:bank1Eth, gas:transGas});
    var check = banker1.getBase(codeline, {from:bank1Eth, gas:transGas});
    msg = assert(check[3] == 3, 'Update check to Status NotAccepted');
    console.log(msg);
};

var testConformedCheckTypeVersion = function(codeline, useSecCode) {
    var newStatus = CheckStatus.Filled;
    var securityCode = '';
    var newSecurityCode = '';

    var reason = 'test';

    var amount = 1500;
    var processDate = 201812000000;

    var identity = '594365458D';
    var deliveredTo = 'Anselmo Lopez';

    var countTransAccount1 = regulator.getTransactionsLength(account1, {from:bank1Eth, gas:transGas});
    var countTransAccount2 = regulator.getTransactionsLength(account2, {from:bank1Eth, gas:transGas});

    var accountbynumber;
    checkindex = banker1.getCheckIndex(codeline, {from:bank1Eth, gas:transGas});
    var preIdentityCount = customer.countReceived(identity);

    banker1.updateCheck(codeline, amount, processDate, newStatus, account2, deliveredTo, reason, securityCode, newSecurityCode, identity, certifierName, {from:user1Addr, gas:transGas});
    var identityCountAfterFill = customer.countReceived(identity);
    msg = assert((identityCountAfterFill - preIdentityCount) == 1, 'Fill & Add check ' + codeline + ' to identity ' + identity);
    console.log(msg);

    var receivedCheckIndexInfo = customer.getReceivedIndex(identity, codeline, {from:user2Addr, gas:transGas});
    msg = assert(receivedCheckIndexInfo[1], 'Index for filled check must exists');
    console.log(msg);

    var receivedCheckIndex = receivedCheckIndexInfo[0];
    var receivedCheckInfoFill = customer.getReceived(identity, receivedCheckIndex, {from:user2Addr, gas:transGas});

    var newStatus1 = CheckStatus.ReservedFunds;
    banker1.updateCheck(codeline, amount, processDate, newStatus1, '', '', reason, '', '', '', certifierName, {from:bank1Eth, gas:transGas});

    var identityCountAfterReservedFunds = customer.countReceived(identity);
    receivedCheckIndexInfo = customer.getReceivedIndex(identity, codeline, {from:user2Addr, gas:transGas});
    msg = assert(receivedCheckIndexInfo[1], 'Index for reserved funds check must exists');
    console.log(msg);

    receivedCheckIndex = receivedCheckIndexInfo[0];
    var receivedCheckInfoReservedFunds = customer.getReceived(identity, receivedCheckIndex, {from:user2Addr, gas:transGas});

    msg = assert(receivedCheckInfoFill[0] == receivedCheckInfoReservedFunds[0], 'Reserved funds check must keep the same bank code');
    console.log(msg);
    msg = assert(receivedCheckInfoFill[1] == receivedCheckInfoReservedFunds[1], 'Reserved funds check must keep the same codeline');
    console.log(msg);
    msg = assert( (Number(receivedCheckInfoFill[2]) + 1) == Number(receivedCheckInfoReservedFunds[2]), 'Reserved funds check must increment the version');
    console.log(msg);

    var newStatus2 = CheckStatus.Delivered;
    var secCode = "1234";
    banker1.updateCheck(codeline, amount, processDate, newStatus2, '', '', reason, '', secCode, '', certifierName, {from:bank1Eth, gas:transGas});

    var identityCountAfterDeliver = customer.countReceived(identity);
    msg = assert(Number(identityCountAfterFill) == Number(identityCountAfterDeliver), 'Not add check to identity when Delivered');
    console.log(msg);

    var receivedCheckInfoDeliver = customer.getReceived(identity, receivedCheckIndex, {from:user2Addr, gas:transGas});
    msg = assert(receivedCheckInfoReservedFunds[0] == receivedCheckInfoDeliver[0], 'Delivered check must keep the same bank code');
    console.log(msg);
    msg = assert(receivedCheckInfoReservedFunds[1] == receivedCheckInfoDeliver[1], 'Delivered check must keep the same codeline');
    console.log(msg);
    msg = assert( (Number(receivedCheckInfoReservedFunds[2]) + 1) == Number(receivedCheckInfoDeliver[2]), 'Delivered check must increment the version');
    console.log(msg);

    var customerCheckBase = customer.getCheckBase(codeline, {from:bank1Eth, gas:transGas});
    var customerCheckLastVersion = customer.getCheckVersionLast(codeline, {from:bank1Eth, gas:transGas});
    var customerCheckPreviousVersion = customer.getCheckVersion(codeline, receivedCheckInfoFill[2], {from:bank1Eth, gas:transGas});
    var customerCheckCustomVersion = customer.getCheckVersion(codeline, receivedCheckInfoDeliver[2], {from:bank1Eth, gas:transGas});

    msg = assert(codeline == customerCheckBase[0], 'Customer check read must return the given check codeline');
    console.log(msg);
    msg = assert(Number(amount) == Number(customerCheckBase[2]), 'Customer check read must return the given check amount');
    console.log(msg);
    msg = assert(Number(processDate) == Number(customerCheckBase[3]), 'Customer check read must return the given check processDate');
    console.log(msg);
    msg = assert(Number(receivedCheckInfoDeliver[2]) == Number(customerCheckBase[4]), 'Last version must be the delivered version');
    console.log(msg);
    msg = assert(certifierName == customerCheckBase[6], 'Customer check read must return the given certifier');
    console.log(msg);

    msg = assert(Number(customerCheckCustomVersion[0]) == Number(customerCheckLastVersion[0]), 'Last and user versions must have the same status');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[1] == customerCheckLastVersion[1], 'Last and user versions must have the same deposit account');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[2] == customerCheckLastVersion[2], 'Last and user versions must have the same delivered to');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[3] == customerCheckLastVersion[3], 'Last and user versions must have the same reason');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[4][0] == customerCheckLastVersion[4][0] && customerCheckCustomVersion[4][1] == customerCheckLastVersion[4][1], 'Last and user versions must have the same sec code');
    console.log(msg);
    msg = assert(Number(customerCheckCustomVersion[5]) == Number(customerCheckLastVersion[5]), 'Last and user versions must have the same timestamp');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[6] == customerCheckLastVersion[6], 'Last and user versions must have the same receiver identity');
    console.log(msg);

    msg = assert(CheckStatus.Delivered == customerCheckLastVersion[0], 'Last version must have a valid status');
    console.log(msg);
    msg = assert(account2 == customerCheckLastVersion[1], 'Last version must have a valid deposit account');
    console.log(msg);
    msg = assert(deliveredTo == customerCheckLastVersion[2], 'Last version must have a valid delivered to');
    console.log(msg);
    msg = assert(reason == customerCheckLastVersion[3], 'Last version must have a valid reason');
    console.log(msg);
    msg = assert('' != customerCheckLastVersion[4], 'Last version must have a valid sec code');
    console.log(msg);
    msg = assert(0 < customerCheckLastVersion[5], 'Last version must have a valid timestamp');
    console.log(msg);
    msg = assert(identity == customerCheckLastVersion[6], 'Last version must have a valid receiver identity');
    console.log(msg);

    msg = assert(CheckStatus.Filled == customerCheckPreviousVersion[0], 'Previous version must have a valid status');
    console.log(msg);
    msg = assert(account2 == customerCheckPreviousVersion[1], 'Previous version must have a valid deposit account');
    console.log(msg);
    msg = assert(deliveredTo == customerCheckPreviousVersion[2], 'Previous version must have a valid delivered to');
    console.log(msg);
    msg = assert(reason == customerCheckPreviousVersion[3], 'Previous version must have a valid reason');
    console.log(msg);
    msg = assert('' != customerCheckPreviousVersion[4], 'Previous version must have a valid sec code');
    console.log(msg);
    msg = assert(customerCheckLastVersion[5] > customerCheckPreviousVersion[5], 'Previous version must have a valid timestamp');
    console.log(msg);
    msg = assert(identity == customerCheckPreviousVersion[6], 'Previous version must have a valid receiver identity');
    console.log(msg);

    var bankerCheckBase = banker1.getBase(codeline, {from:bank1Eth, gas:transGas});

    msg = assert(Number(bankerCheckBase[1]) == Number(customerCheckBase[2]), 'Amount from banker & customer check read must match');
    console.log(msg);
    msg = assert(Number(bankerCheckBase[2]) == Number(customerCheckBase[3]), 'processDate from banker & customer check read must match');
    console.log(msg);
    msg = assert(Number(bankerCheckBase[3]) == Number(customerCheckBase[4]), 'Version from banker & customer check read must match');
    console.log(msg);
    msg = assert(Number(bankerCheckBase[4]) == Number(customerCheckBase[5]), 'CheckType from banker & customer check read must match');
    console.log(msg);
    msg = assert(bankerCheckBase[5] == customerCheckBase[6], 'Certifier from banker & customer check read must match');
    console.log(msg);

    counttransafter = regulator.getTransactionsLength(account1, {from:bank1Eth, gas:transGas});
    msg = assert(Number(counttransafter) == Number(countTransAccount1), 'Transactions length of account ' + account1 + ' must not change');
    console.log(msg);

    counttransafter = regulator.getTransactionsLength(account2, {from:bank1Eth, gas:transGas});
    msg = assert(Number(counttransafter) == Number(countTransAccount2) + 3, 'Transactions length of account ' + account2 + ' must have 3 more');
    console.log(msg);

    var checkBase = regulator.getCheckBase(account2, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkBase[5] == 0, 'Get checkBase of Transaction 0 of account ' + account2);
    console.log(msg);

    checkBase = regulator.getCheckBase(account2, 1, {from:bank2Eth, gas:transGas});
    msg = assert(checkBase[5] == 0, 'Get checkBase of Transaction 1 of account ' + account2);
    console.log(msg);

    checkBase = regulator.getCheckBase(account1, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkBase[5] == 1, 'Get checkBase of Transaction 0 of account ' + account1);
    console.log(msg);

    checkBase = regulator.getCheckBase(account1, 1, {from:bank1Eth, gas:transGas});
    msg = assert(checkBase[5] == 2, 'Get checkBase of Transaction 1 of account ' + account1);
    console.log(msg);

    version = banker1.getVersion(codeline, 0, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.Issued, 'Get initial version status');
    console.log(msg);
    msg = assert(version[1] == "", 'Get initial version depositAccount');
    console.log(msg);
    msg = assert(version[2] == "", 'Get initial version deliveredTo');
    console.log(msg);
    msg = assert(version[3] == "", 'Get initial version reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get initial version timestamp');
    console.log(msg);

    version = banker1.getVersion(codeline, 1, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.Filled, 'Get version 1 status');
    console.log(msg);
    msg = assert(version[1] == account2, 'Get version 1 depositAccount');
    console.log(msg);
    msg = assert(version[2] == deliveredTo, 'Get version 1 deliveredTo');
    console.log(msg);
    msg = assert(version[3] == reason, 'Get version 1 reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get version 1 timestamp');
    console.log(msg);

    version = banker1.getVersion(codeline, 2, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.ReservedFunds, 'Get version 2 status');
    console.log(msg);
    msg = assert(version[1] == account2, 'Get version 2 depositAccount');
    console.log(msg);
    msg = assert(version[2] == deliveredTo, 'Get version 2 deliveredTo');
    console.log(msg);
    msg = assert(version[3] == reason, 'Get version 2 reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get version 2 timestamp');
    console.log(msg);

    version = banker1.getVersion(codeline, 3, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.Delivered, 'Get version 2 status');
    console.log(msg);
    msg = assert(version[1] == account2, 'Get version 2 depositAccount');
    console.log(msg);
    msg = assert(version[2] == deliveredTo, 'Get version 2 deliveredTo');
    console.log(msg);
    msg = assert(version[3] == reason, 'Get version 2 reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get version 2 timestamp');
    console.log(msg);

    var transactionupdate = regulator.getTransaction(account2, 0, {from:bank1Eth, gas:transGas});
    msg = assert(transactionupdate[4] == CheckStatus.Filled, 'Get Transaction 0 of account ' + account2);
    console.log(msg);

    var checkversion = regulator.getCheckVersion(account2, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkversion[0] == CheckStatus.Issued, 'Get CheckVersion 0 (Issued) of account ' + account2);
    console.log(msg);

    checkversion = regulator.getCheckVersion(account1, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkversion[0] == CheckStatus.Filled, 'Get CheckVersion 0 (Filled) of account ' + account1);
    console.log(msg);

    checkversion = regulator.getCheckVersion(account1, 1, {from:bank1Eth, gas:transGas});
    msg = assert(checkversion[0] == CheckStatus.Delivered, 'Get CheckVersion 1 (Delivered) of account ' + account1);
    console.log(msg);

    var newStatus3 = CheckStatus.NotAccepted;
    reason = "not accepted check"
    banker1.updateCheck(codeline, amount, processDate, newStatus3, '', '', reason, secCode, '', '', certifierName, {from:user2Addr, gas:transGas});
    var check = banker1.getBase(codeline, {from:bank1Eth, gas:transGas});
    msg = assert(check[3] == 4, 'Update check to Status NotAccepted');
    console.log(msg);
};

var testNoSecureConformedCheckTypeVersion = function(account, codeline, certifierName) {
    banker1.addCheck(account, codeline, CheckType.ConformedCheck, certifierName, {from:bank1Eth, gas:transGas});

    var newStatus = CheckStatus.Filled;
    var securityCode = '';
    var newSecurityCode = '';

    var reason = 'test';

    var amount = 1500;
    var processDate = 201812000000;

    var identity = '594365458D';
    var deliveredTo = 'Anselmo Lopez';

    var countTransAccount1 = regulator.getTransactionsLength(account1, {from:bank1Eth, gas:transGas});
    var countTransAccount2 = regulator.getTransactionsLength(account2, {from:bank1Eth, gas:transGas});

    var accountbynumber;
    checkindex = banker1.getCheckIndex(codeline, {from:bank1Eth, gas:transGas});
    var preIdentityCount = customer.countReceived(identity);

    banker1.updateCheck(codeline, amount, processDate, newStatus, account2, deliveredTo, reason, securityCode, newSecurityCode, identity, certifierName, {from:user1Addr, gas:transGas});
    var identityCountAfterFill = customer.countReceived(identity);
    msg = assert((identityCountAfterFill - preIdentityCount) == 1, 'Fill & Add check ' + codeline + ' to identity ' + identity);
    console.log(msg);

    var receivedCheckIndexInfo = customer.getReceivedIndex(identity, codeline, {from:user2Addr, gas:transGas});
    msg = assert(receivedCheckIndexInfo[1], 'Index for filled check must exists');
    console.log(msg);

    var receivedCheckIndex = receivedCheckIndexInfo[0];
    var receivedCheckInfoFill = customer.getReceived(identity, receivedCheckIndex, {from:user2Addr, gas:transGas});

    var newStatus1 = CheckStatus.ReservedFunds;
    banker1.updateCheck(codeline, amount, processDate, newStatus1, '', '', reason, '', '', '', certifierName, {from:bank1Eth, gas:transGas});

    var identityCountAfterReservedFunds = customer.countReceived(identity);
    receivedCheckIndexInfo = customer.getReceivedIndex(identity, codeline, {from:user2Addr, gas:transGas});
    msg = assert(receivedCheckIndexInfo[1], 'Index for reserved funds check must exists');
    console.log(msg);

    receivedCheckIndex = receivedCheckIndexInfo[0];
    var receivedCheckInfoReservedFunds = customer.getReceived(identity, receivedCheckIndex, {from:user2Addr, gas:transGas});

    msg = assert(receivedCheckInfoFill[0] == receivedCheckInfoReservedFunds[0], 'Reserved funds check must keep the same bank code');
    console.log(msg);
    msg = assert(receivedCheckInfoFill[1] == receivedCheckInfoReservedFunds[1], 'Reserved funds check must keep the same codeline');
    console.log(msg);
    msg = assert( (Number(receivedCheckInfoFill[2]) + 1) == Number(receivedCheckInfoReservedFunds[2]), 'Reserved funds check must increment the version');
    console.log(msg);

    var newStatus2 = CheckStatus.Delivered;
    var secCode = "";
    banker1.updateCheck(codeline, amount, processDate, newStatus2, '', '', reason, '', secCode, '', certifierName, {from:bank1Eth, gas:transGas});

    var identityCountAfterDeliver = customer.countReceived(identity);
    msg = assert(Number(identityCountAfterFill) == Number(identityCountAfterDeliver), 'Not add check to identity when Delivered');
    console.log(msg);

    var receivedCheckInfoDeliver = customer.getReceived(identity, receivedCheckIndex, {from:user2Addr, gas:transGas});
    msg = assert(receivedCheckInfoReservedFunds[0] == receivedCheckInfoDeliver[0], 'Delivered check must keep the same bank code');
    console.log(msg);
    msg = assert(receivedCheckInfoReservedFunds[1] == receivedCheckInfoDeliver[1], 'Delivered check must keep the same codeline');
    console.log(msg);
    msg = assert( (Number(receivedCheckInfoReservedFunds[2]) + 1) == Number(receivedCheckInfoDeliver[2]), 'Delivered check must increment the version');
    console.log(msg);

    var customerCheckBase = customer.getCheckBase(codeline, {from:bank1Eth, gas:transGas});
    var customerCheckLastVersion = customer.getCheckVersionLast(codeline, {from:bank1Eth, gas:transGas});
    var customerCheckPreviousVersion = customer.getCheckVersion(codeline, receivedCheckInfoFill[2], {from:bank1Eth, gas:transGas});
    var customerCheckCustomVersion = customer.getCheckVersion(codeline, receivedCheckInfoDeliver[2], {from:bank1Eth, gas:transGas});

    msg = assert(codeline == customerCheckBase[0], 'Customer check read must return the given check codeline');
    console.log(msg);
    msg = assert(Number(amount) == Number(customerCheckBase[2]), 'Customer check read must return the given check amount');
    console.log(msg);
    msg = assert(Number(processDate) == Number(customerCheckBase[3]), 'Customer check read must return the given check processDate');
    console.log(msg);
    msg = assert(Number(receivedCheckInfoDeliver[2]) == Number(customerCheckBase[4]), 'Last version must be the delivered version');
    console.log(msg);
    msg = assert(certifierName == customerCheckBase[6], 'Customer check read must return the given certifier');
    console.log(msg);

    msg = assert(Number(customerCheckCustomVersion[0]) == Number(customerCheckLastVersion[0]), 'Last and user versions must have the same status');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[1] == customerCheckLastVersion[1], 'Last and user versions must have the same deposit account');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[2] == customerCheckLastVersion[2], 'Last and user versions must have the same delivered to');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[3] == customerCheckLastVersion[3], 'Last and user versions must have the same reason');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[4][0] == customerCheckLastVersion[4][0] && customerCheckCustomVersion[4][1] == customerCheckLastVersion[4][1], 'Last and user versions must have the same sec code');
    console.log(msg);
    msg = assert(Number(customerCheckCustomVersion[5]) == Number(customerCheckLastVersion[5]), 'Last and user versions must have the same timestamp');
    console.log(msg);
    msg = assert(customerCheckCustomVersion[6] == customerCheckLastVersion[6], 'Last and user versions must have the same receiver identity');
    console.log(msg);

    msg = assert(CheckStatus.Delivered == customerCheckLastVersion[0], 'Last version must have a valid status');
    console.log(msg);
    msg = assert(account2 == customerCheckLastVersion[1], 'Last version must have a valid deposit account');
    console.log(msg);
    msg = assert(deliveredTo == customerCheckLastVersion[2], 'Last version must have a valid delivered to');
    console.log(msg);
    msg = assert(reason == customerCheckLastVersion[3], 'Last version must have a valid reason');
    console.log(msg);
    msg = assert('' != customerCheckLastVersion[4], 'Last version must have a valid sec code');
    console.log(msg);
    msg = assert(0 < customerCheckLastVersion[5], 'Last version must have a valid timestamp');
    console.log(msg);
    msg = assert(identity == customerCheckLastVersion[6], 'Last version must have a valid receiver identity');
    console.log(msg);

    msg = assert(CheckStatus.Filled == customerCheckPreviousVersion[0], 'Previous version must have a valid status');
    console.log(msg);
    msg = assert(account2 == customerCheckPreviousVersion[1], 'Previous version must have a valid deposit account');
    console.log(msg);
    msg = assert(deliveredTo == customerCheckPreviousVersion[2], 'Previous version must have a valid delivered to');
    console.log(msg);
    msg = assert(reason == customerCheckPreviousVersion[3], 'Previous version must have a valid reason');
    console.log(msg);
    msg = assert('' != customerCheckPreviousVersion[4], 'Previous version must have a valid sec code');
    console.log(msg);
    msg = assert(customerCheckLastVersion[5] > customerCheckPreviousVersion[5], 'Previous version must have a valid timestamp');
    console.log(msg);
    msg = assert(identity == customerCheckPreviousVersion[6], 'Previous version must have a valid receiver identity');
    console.log(msg);

    var bankerCheckBase = banker1.getBase(codeline, {from:bank1Eth, gas:transGas});

    msg = assert(Number(bankerCheckBase[1]) == Number(customerCheckBase[2]), 'Amount from banker & customer check read must match');
    console.log(msg);
    msg = assert(Number(bankerCheckBase[2]) == Number(customerCheckBase[3]), 'processDate from banker & customer check read must match');
    console.log(msg);
    msg = assert(Number(bankerCheckBase[3]) == Number(customerCheckBase[4]), 'Version from banker & customer check read must match');
    console.log(msg);
    msg = assert(Number(bankerCheckBase[4]) == Number(customerCheckBase[5]), 'CheckType from banker & customer check read must match');
    console.log(msg);
    msg = assert(bankerCheckBase[5] == customerCheckBase[6], 'Certifier from banker & customer check read must match');
    console.log(msg);

    counttransafter = regulator.getTransactionsLength(account1, {from:bank1Eth, gas:transGas});
    msg = assert(Number(counttransafter) == Number(countTransAccount1), 'Transactions length of account ' + account1 + ' must not change');
    console.log(msg);

    counttransafter = regulator.getTransactionsLength(account2, {from:bank1Eth, gas:transGas});
    msg = assert(Number(counttransafter) == Number(countTransAccount2) + 3, 'Transactions length of account ' + account2 + ' must have 3 more');
    console.log(msg);

    var checkBase = regulator.getCheckBase(account2, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkBase[5] == 0, 'Get checkBase of Transaction 0 of account ' + account2);
    console.log(msg);

    checkBase = regulator.getCheckBase(account2, 1, {from:bank2Eth, gas:transGas});
    msg = assert(checkBase[5] == 0, 'Get checkBase of Transaction 1 of account ' + account2);
    console.log(msg);

    checkBase = regulator.getCheckBase(account1, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkBase[5] == 1, 'Get checkBase of Transaction 0 of account ' + account1);
    console.log(msg);

    checkBase = regulator.getCheckBase(account1, 1, {from:bank1Eth, gas:transGas});
    msg = assert(checkBase[5] == 2, 'Get checkBase of Transaction 1 of account ' + account1);
    console.log(msg);

    version = banker1.getVersion(codeline, 0, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.Issued, 'Get initial version status');
    console.log(msg);
    msg = assert(version[1] == "", 'Get initial version depositAccount');
    console.log(msg);
    msg = assert(version[2] == "", 'Get initial version deliveredTo');
    console.log(msg);
    msg = assert(version[3] == "", 'Get initial version reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get initial version timestamp');
    console.log(msg);

    version = banker1.getVersion(codeline, 1, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.Filled, 'Get version 1 status');
    console.log(msg);
    msg = assert(version[1] == account2, 'Get version 1 depositAccount');
    console.log(msg);
    msg = assert(version[2] == deliveredTo, 'Get version 1 deliveredTo');
    console.log(msg);
    msg = assert(version[3] == reason, 'Get version 1 reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get version 1 timestamp');
    console.log(msg);

    version = banker1.getVersion(codeline, 2, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.ReservedFunds, 'Get version 2 status');
    console.log(msg);
    msg = assert(version[1] == account2, 'Get version 2 depositAccount');
    console.log(msg);
    msg = assert(version[2] == deliveredTo, 'Get version 2 deliveredTo');
    console.log(msg);
    msg = assert(version[3] == reason, 'Get version 2 reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get version 2 timestamp');
    console.log(msg);

    version = banker1.getVersion(codeline, 3, {from:bank1Eth, gas:transGas});
    msg = assert(version[0] == CheckStatus.Delivered, 'Get version 2 status');
    console.log(msg);
    msg = assert(version[1] == account2, 'Get version 2 depositAccount');
    console.log(msg);
    msg = assert(version[2] == deliveredTo, 'Get version 2 deliveredTo');
    console.log(msg);
    msg = assert(version[3] == reason, 'Get version 2 reason');
    console.log(msg);
    msg = assert(version[5] > 0, 'Get version 2 timestamp');
    console.log(msg);

    var transactionupdate = regulator.getTransaction(account2, 0, {from:bank1Eth, gas:transGas});
    msg = assert(transactionupdate[4] == CheckStatus.Filled, 'Get Transaction 0 of account ' + account2);
    console.log(msg);

    var checkversion = regulator.getCheckVersion(account2, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkversion[0] == CheckStatus.Issued, 'Get CheckVersion 0 (Issued) of account ' + account2);
    console.log(msg);

    checkversion = regulator.getCheckVersion(account1, 0, {from:bank1Eth, gas:transGas});
    msg = assert(checkversion[0] == CheckStatus.Filled, 'Get CheckVersion 0 (Filled) of account ' + account1);
    console.log(msg);

    checkversion = regulator.getCheckVersion(account1, 1, {from:bank1Eth, gas:transGas});
    msg = assert(checkversion[0] == CheckStatus.Delivered, 'Get CheckVersion 1 (Delivered) of account ' + account1);
    console.log(msg);

    var newStatus3 = CheckStatus.Accepted;
    reason = "accepted check"
    banker1.updateCheck(codeline, amount, processDate, newStatus3, '', '', reason, secCode, '', '', certifierName, {from:user2Addr, gas:transGas});
    var check = banker1.getBase(codeline, {from:bank1Eth, gas:transGas});
    msg = assert(check[3] == 4, 'Update check to Status Accepted');
    console.log(msg);

    var newStatus4 = CheckStatus.PendingCertification;
    reason = "to pending c"
    banker1.updateCheck(codeline, amount, processDate, newStatus4, '', '', reason, secCode, '', '', certifierName, {from:bank1Eth, gas:transGas});
    var check = banker1.getBase(codeline, {from:bank1Eth, gas:transGas});
    msg = assert(check[3] == 5, 'Update check to Status PendingCertification');
    console.log(msg);
};
//////////////////////////////////////////////////////////////////////////////////////

var usage = function() {
    console.log('Usage: ');
    console.log('     deployForDemo()   -> Deploy contracts opc. Demo.');
    console.log('     deployForRegulator()   -> Deploy contracts opc. Regulator');
    console.log('     deployForBanker(bankaddress)   -> Deploy contracts opc. Banker');
    console.log('     initDemo()     -> Initialize and configure contracts opc. Demo.');
    console.log('     initRegulator()     -> Initialize and configure contracts opc. Regulator.');
    console.log('     initBanker(bankcode, bankaddress)     -> Initialize and configure contracts opc. Banker.');
    console.log('     setAddrs() -> Sets previous deployed contract addresses.');
    console.log('     manage()   -> Manage contracts.');
    console.log('     info()     -> Print contracts information.');
    console.log('     push()     -> Push contracts deployment.');
    console.log('     test()     -> Execute a simple use case.')
    console.log('     usage()    -> Show this help.');
};

function initCB() {
    initDemo();
}

function deployCB(callback) {
    deployForDemo(callback);
}

function updateIfDef(input, old) {
    return (input?input:old);
}

unlockAccount("regulator", regulatoruser, "", unlockDuration, function() {
	unlockAccount("bank1Eth", bank1Eth, "garfield123", unlockDuration, function() {
		unlockAccount("bank2Eth", bank2Eth, "garfield123", unlockDuration, function() {
			unlockAccount("user1Addr", user1Addr, "garfield123", unlockDuration, function() {
				unlockAccount("user2Addr", user2Addr, "garfield123", unlockDuration, function() {
					unlockAccount("user3Addr", user3Addr, "", unlockDuration, function() {
						console.log('Unlocking accounts Done')
                        contractAssign(customerContract, CustomerCompiled.abi, function(){
                            contractAssign(receiverStoreContract, BcReceiverStoreCompiled.abi, function(){
                                contractAssign(identityStoreContract, BcIdentityStoreCompiled.abi, function(){
            						contractAssign(bankerContract, BankerCompiled.abi, function () {
            							contractAssign(regulatorContract, RegulatorCompiled.abi, function () {
            								contractAssign(accountStoreContract, BcAccountStoreCompiled.abi, function () {
            									contractAssign(bankStoreContract, BcBankStoreCompiled.abi, function () {
            										contractAssign(checkStoreContract, BcCheckStoreCompiled.abi, function () {
            											contractAssign(transactionStoreContract, BcTransactionStoreCompiled.abi, function () {
            												contractAssign(checkmanagerContract, CheckManagerCompiled.abi, function () {
                                                                contractAssign(checkTypeStoreContract, BcCheckTypeStoreCompiled.abi, function () {
                                                                    console.log('Assign contracts done');
                                                                    //TODO
                                                                    //automated
                                                                    usage();
                                                                });
                                                            });
            											});
            										});
            									});
            								});
            							});
            						});
                                });
                            });
                        });
					});
				});
			});
		});
	});
});
