/////////////////////////////////////////
// Auto generated code. Do not modify! //
/////////////////////////////////////////

var SecurityInspectionCompiled = {"abi":[{"constant":true,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getInspectionStatus","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"string"},{"name":"reviewId","type":"string"},{"name":"hash","type":"string"}],"name":"addReview","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"setIssueStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"index","type":"uint256"}],"name":"getIssueStatus","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"index","type":"uint256"},{"name":"action","type":"uint8"},{"name":"hash","type":"string"}],"name":"registerInspection","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"ieName","type":"string"},{"name":"hash","type":"string"}],"name":"addInspectionEvidence","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getReviewStatus","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getReviewContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"getReviewInfo","outputs":[{"name":"date","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"}],"name":"controlCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getControlId","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"reviewId","type":"string"}],"name":"analysisCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAlcoholAndDrugContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"controlId","type":"string"}],"name":"getControlKey","outputs":[{"name":"","type":"string"},{"name":"index","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"planCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"alcoholAndDrugAddress","type":"address"}],"name":"setAlcoholAndDrugContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"analysisAddress","type":"address"}],"name":"setAnalysisContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"}],"name":"reviewCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"index","type":"uint256"}],"name":"getInspectionEvidence","outputs":[{"name":"","type":"string"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"index","type":"uint256"}],"name":"getIssueId","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"setReviewStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"attachmentAddress","type":"address"}],"name":"setAttachmentContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"inspectionName","type":"string"},{"name":"issueId","type":"string"},{"name":"issueName","type":"string"},{"name":"hash","type":"string"}],"name":"addIssueEvidence","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"reviewAddress","type":"address"}],"name":"setReviewContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"}],"name":"getAttachmentContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"},{"name":"action","type":"uint8"},{"name":"hash","type":"string"}],"name":"registerControl","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"cType","type":"uint8"},{"name":"hash","type":"string"}],"name":"addInspection","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"string"},{"name":"status","type":"uint8"}],"name":"setPlanStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"index","type":"uint256"}],"name":"getIssue","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getIssueEvidenceContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"getIssueInfo","outputs":[{"name":"date","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"}],"name":"inspectionCount","outputs":[{"name":"_count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPlanContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getControlStaffId","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"string"},{"name":"controlId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"staffId","type":"string"},{"name":"cType","type":"uint8"},{"name":"hash","type":"string"}],"name":"addControl","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getControlInspectionId","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"reviewId","type":"string"},{"name":"anName","type":"string"},{"name":"hash","type":"string"}],"name":"addAttachment","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"inspectionAddress","type":"address"}],"name":"setInspectionContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"}],"name":"getInspectionContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionName","type":"string"},{"name":"issueId","type":"string"}],"name":"issueEvidenceCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getControlType","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"reviewId","type":"string"}],"name":"getReviewIndex","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionName","type":"string"},{"name":"issueId","type":"string"}],"name":"getIssueKey","outputs":[{"name":"","type":"string"},{"name":"","type":"string"},{"name":"index","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"index","type":"uint256"},{"name":"name","type":"string"}],"name":"updateIssue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"setInspectionStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"inspectionName","type":"string"},{"name":"issueId","type":"string"},{"name":"index","type":"uint256"}],"name":"getIssueEvidence","outputs":[{"name":"","type":"string"},{"name":"","type":"string"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"issueAddress","type":"address"}],"name":"setIssueContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getPlanIdByIndex","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"}],"name":"getPlanStatus","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"string"},{"name":"action","type":"uint8"},{"name":"hash","type":"string"}],"name":"registerPlan","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"reviewId","type":"string"},{"name":"anName","type":"string"},{"name":"hash","type":"string"}],"name":"addAnalysis","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"reviewId","type":"string"},{"name":"index","type":"uint256"}],"name":"getAttachment","outputs":[{"name":"","type":"string"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"status","type":"uint8"}],"name":"getPlanInfo","outputs":[{"name":"date","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"reviewId","type":"string"}],"name":"attachmentCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"setControlStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planAddress","type":"address"}],"name":"setPlanContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"getControlInfo","outputs":[{"name":"date","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"}],"name":"issueCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getInspectionId","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"}],"name":"inspectionEvidenceCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"},{"name":"action","type":"uint8"},{"name":"hash","type":"string"}],"name":"registerReview","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"getInspectionInfo","outputs":[{"name":"date","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getControlCreationDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getInspectionType","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"}],"name":"getAnalysisContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getReviewId","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"issueEvidenceAddress","type":"address"}],"name":"setIssueEvidenceContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getInspectionsNameByIndex","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"index","type":"uint256"},{"name":"action","type":"uint8"},{"name":"hash","type":"string"}],"name":"registerIssue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"inspectionName","type":"string"},{"name":"planId","type":"string"},{"name":"inspectionId","type":"string"},{"name":"issueId","type":"string"},{"name":"issueName","type":"string"},{"name":"hash","type":"string"}],"name":"addIssue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"string"},{"name":"index","type":"uint256"}],"name":"getControlStatus","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"string"},{"name":"hash","type":"string"}],"name":"addPlan","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"}],"name":"getInspectionEvidenceContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"},{"name":"planId","type":"string"},{"name":"reviewId","type":"string"},{"name":"index","type":"uint256"}],"name":"getAnalysis","outputs":[{"name":"","type":"string"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getIssueContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"inspectionEvidenceAddress","type":"address"}],"name":"setInspectionEvidenceContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getInspectionsNameCount","outputs":[{"name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string"},{"name":"inspectionId","type":"string"}],"name":"getInspectionKey","outputs":[{"name":"","type":"string"},{"name":"index","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}],"bytecode":""};

var PlanStoreCompiled = {"abi":[{"constant":true,"inputs":[],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"status","type":"uint8"}],"name":"getInfo","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"}],"name":"getStatus","outputs":[{"name":"status","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"}],"name":"getPromotion","outputs":[{"name":"","type":"uint16"},{"name":"","type":"uint8"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"newStatus","type":"uint8"}],"name":"setStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getPlanIdByIndex","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"action","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"},{"name":"role","type":"uint16"},{"name":"finalStatus","type":"uint8"},{"name":"position","type":"uint256"},{"name":"reviewStatus","type":"uint32"},{"name":"controlStatus","type":"uint32"},{"name":"inspectionStatus","type":"uint16"}],"name":"setPromotion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a031990911617905561145d806100306000396000f3006060604052600436106100cc5763ffffffff60e060020a60003504166306661abd81146100d15780634bd5322b146100f65780634fb2e45d1461012a5780635de28ae01461014b57806377a28bd714610185578063848a423f146101b35780638de654ba146102085780638f32d59b14610224578063a79c7a1714610237578063bb03341f1461024d578063c704fb7d1461026c578063cbbbdc0e1461028b578063d1de592a146102d4578063dbf30aa8146102ed578063dd9fd5da1461031d578063f7ff1b6a1461034c575b600080fd5b34156100dc57600080fd5b6100e461036b565b60405190815260200160405180910390f35b341561010157600080fd5b61011260043560ff60243516610372565b60405191825260208201526040908101905180910390f35b341561013557600080fd5b610149600160a060020a03600435166103d1565b005b341561015657600080fd5b610161600435610420565b6040518082600481111561017157fe5b60ff16815260200191505060405180910390f35b341561019057600080fd5b61019f61ffff60043516610438565b604051901515815260200160405180910390f35b34156101be57600080fd5b6101d260ff600435811690602435166104ae565b60405161ffff84168152602081018360048111156101ec57fe5b60ff168152602001828152602001935050505060405180910390f35b341561021357600080fd5b61014960043560ff6024351661051f565b341561022f57600080fd5b61019f610564565b341561024257600080fd5b6100e460043561057f565b341561025857600080fd5b610149600160a060020a03600435166105b1565b341561027757600080fd5b61014960043560ff60243516604435610600565b341561029657600080fd5b61014960ff60043581169060243581169061ffff60443581169160643516906084359063ffffffff60a43581169160c4359091169060e4351661077a565b34156102df57600080fd5b6101496004356024356108d3565b34156102f857600080fd5b61030660ff60043516610938565b60405161ffff909116815260200160405180910390f35b341561032857600080fd5b61033061094f565b604051600160a060020a03909116815260200160405180910390f35b341561035757600080fd5b610149600160a060020a036004351661095e565b6003545b90565b6000828152600260205260408120819060010183600481111561039157fe5b6005811061039b57fe5b015460008581526002602052604090206006018460048111156103ba57fe5b600581106103c457fe5b0154915091509250929050565b6000546103e690600160a060020a0316610a12565b15156103f157600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000908152600260205260409020600b015460ff1690565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561048e57600080fd5b6102c65a03f1151561049f57600080fd5b50505060405180519392505050565b600080600080600460008760058111156104c457fe5b60ff1660ff16815260200190815260200160002060008660048111156104e657fe5b60ff90811682526020820192909252604001600020805460019091015461ffff8216996201000090920490921697509095509350505050565b61052882610a4b565b151561053357600080fd5b6000828152600260205260409020600b01805482919060ff1916600183600481111561055b57fe5b02179055505050565b6000805461057a90600160a060020a0316610a12565b905090565b600354600090821061059057600080fd5b600380548390811061059e57fe5b9060005260206000209001549050919050565b6000546105c690600160a060020a0316610a12565b15156105d157600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008061060c85610a4b565b151561061757600080fd5b6000858152600260205260408120925060049085600581111561063657fe5b60ff908116825260208201929092526040016000908120600b850154909216600481111561066057fe5b60ff1681526020810191909152604001600020805490915061ffff16151561068757610773565b61069081610a5e565b610718858260c0604051908101604052815461ffff81168252909190602083019062010000900460ff1660048111156106c557fe5b60048111156106d057fe5b81526001820154602082015260029091015463ffffffff8082166040840152640100000000820416606083015268010000000000000000900461ffff16608090910152610a7b565b8054600b830180546201000090920460ff169160ff1916600183600481111561073d57fe5b02179055504282600101826001015460058110151561075857fe5b01556001810154839060068401906005811061077057fe5b01555b5050505050565b60c0604051908101604052808761ffff16815260200186600481111561079c57fe5b81526020018581526020018463ffffffff1681526020018363ffffffff1681526020018261ffff16815250600460008a60058111156107d757fe5b60ff1660ff16815260200190815260200160002060008960048111156107f957fe5b60ff16815260208101919091526040016000208151815461ffff191661ffff9190911617815560208201518154829062ff000019166201000083600481111561083e57fe5b021790555060408201518160010155606082015160028201805463ffffffff191663ffffffff9290921691909117905560808201518160020160046101000a81548163ffffffff021916908363ffffffff16021790555060a08201516002909101805461ffff92909216680100000000000000000269ffff000000000000000019909216919091179055505050505050505050565b60006108de83610a4b565b156108e857600080fd5b506000828152600260205260409020828155600b8101805460ff19169055600380546001810161091883826113dd565b50600091825260209091200183905561093383600184610600565b505050565b600081600781111561094657fe5b60020a92915050565b600154600160a060020a031690565b6109686007610938565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156109bc57600080fd5b6102c65a03f115156109cd57600080fd5b5050506040518051905015156109e257600080fd5b506005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081600160a060020a031633600160a060020a03161480610a45575081600160a060020a031632600160a060020a0316145b92915050565b6000818152600260205260409020541490565b8054610a6d9061ffff16610438565b1515610a7857600080fd5b50565b6005546000908190819081908190600160a060020a031663f81b535c82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610acd57600080fd5b6102c65a03f11515610ade57600080fd5b50505060405180519050935060008660a0015161ffff161115610e45575060005b83811015610e4557600554600160a060020a031663dd16e1ea8260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610b5857600080fd5b6102c65a03f11515610b6957600080fd5b5050506040518051600554909450600160a060020a03169050637f875285610b9085611232565b6000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610be8578082015183820152602001610bd0565b50505050905090810190601f168015610c155780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515610c3357600080fd5b6102c65a03f11515610c4457600080fd5b50505060405180519050600160a060020a0316637937354c8860006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610c9c57600080fd5b6102c65a03f11515610cad57600080fd5b5050506040518051955060009250505b84821015610e3d5760008660a00151600554600160a060020a0316637f875285610ce687611232565b6000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d3e578082015183820152602001610d26565b50505050905090810190601f168015610d6b5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515610d8957600080fd5b6102c65a03f11515610d9a57600080fd5b50505060405180519050600160a060020a031663a55f99278a8660006040516020015260405160e060020a63ffffffff851602815260048101929092526024820152604401602060405180830381600087803b1515610df857600080fd5b6102c65a03f11515610e0957600080fd5b50505060405180519050600a811115610e1e57fe5b60020a1661ffff16111515610e3257600080fd5b600190910190610cbd565b600101610aff565b6000866060015163ffffffff16111561103757600554600160a060020a031663199278796000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ea057600080fd5b6102c65a03f11515610eb157600080fd5b50505060405180519050600160a060020a0316637937354c8860006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610f0957600080fd5b6102c65a03f11515610f1a57600080fd5b5050506040518051955060009250505b848210156110375760008660600151600554600160a060020a031663199278796000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610f8157600080fd5b6102c65a03f11515610f9257600080fd5b50505060405180519050600160a060020a031663a55f99278a8660006040516020015260405160e060020a63ffffffff851602815260048101929092526024820152604401602060405180830381600087803b1515610ff057600080fd5b6102c65a03f1151561100157600080fd5b50505060405180519050600581111561101657fe5b60020a1663ffffffff1611151561102c57600080fd5b600190910190610f2a565b6000866080015163ffffffff16111561122957600554600160a060020a031663281abcd56000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561109257600080fd5b6102c65a03f115156110a357600080fd5b50505060405180519050600160a060020a0316637937354c8860006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156110fb57600080fd5b6102c65a03f1151561110c57600080fd5b5050506040518051955060009250505b848210156112295760008660800151600554600160a060020a031663281abcd56000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561117357600080fd5b6102c65a03f1151561118457600080fd5b50505060405180519050600160a060020a031663a55f99278a8660006040516020015260405160e060020a63ffffffff851602815260048101929092526024820152604401602060405180830381600087803b15156111e257600080fd5b6102c65a03f115156111f357600080fd5b50505060405180519050601781111561120857fe5b60020a1663ffffffff1611151561121e57600080fd5b60019091019061111c565b50505050505050565b61123a611401565b611242611401565b600080600061124f611401565b60006040805180591061125f5750595b818152601f19601f830116810160200160405290509550600093505b6020841015611306576008840260020a880292507fff000000000000000000000000000000000000000000000000000000000000008316156112fb57828686815181106112c457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001850194505b60019093019261127b565b846040518059106113145750595b818152601f19601f830116810160200160405290509150600090505b848110156113d25785818151811061134457fe5b01602001517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811061139a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101611330565b509695505050505050565b81548183558181151161093357600083815260209020610933918101908301611413565b60206040519081016040526000815290565b61036f91905b8082111561142d5760008155600101611419565b50905600a165627a7a72305820151dda1214e60f378715ecbac1000ef215145ee45a9fcf347fb9416360823de30029"};

var AlcoholAndDrugStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getInspectionId","outputs":[{"name":"date","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"controlId","type":"bytes32"}],"name":"getControlKey","outputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getControlType","outputs":[{"name":"cType","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"},{"name":"_role","type":"uint16"},{"name":"finalStatus","type":"uint8"},{"name":"position","type":"uint256"},{"name":"planStatus","type":"uint16"}],"name":"setPromotion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"setStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"}],"name":"count","outputs":[{"name":"_count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"getInfo","outputs":[{"name":"date","type":"uint256"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"}],"name":"getPromotion","outputs":[{"name":"","type":"uint16"},{"name":"","type":"uint8"},{"name":"","type":"uint256"},{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getStaffId","outputs":[{"name":"date","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"controlId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"staffId","type":"bytes32"},{"name":"cType","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getStatus","outputs":[{"name":"status","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"action","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getControlId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getCreationDate","outputs":[{"name":"date","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":""};

var OperationalStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getInspectionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"},{"name":"_role","type":"uint16"},{"name":"finalStatus","type":"uint8"},{"name":"position","type":"uint256"},{"name":"requiredPlanStatus","type":"uint16"}],"name":"setPromotion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"setStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"getInfo","outputs":[{"name":"date","type":"uint256"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"}],"name":"getPromotion","outputs":[{"name":"","type":"uint16"},{"name":"","type":"uint8"},{"name":"","type":"uint256"},{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getInspectionType","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getStatus","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"action","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"inspectionId","type":"bytes32"}],"name":"getInspectionKey","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"cType","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":""};

var EquipmentStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getInspectionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"},{"name":"_role","type":"uint16"},{"name":"finalStatus","type":"uint8"},{"name":"position","type":"uint256"},{"name":"requiredPlanStatus","type":"uint16"}],"name":"setPromotion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"setStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"getInfo","outputs":[{"name":"date","type":"uint256"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"}],"name":"getPromotion","outputs":[{"name":"","type":"uint16"},{"name":"","type":"uint8"},{"name":"","type":"uint256"},{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getInspectionType","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getStatus","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"action","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"inspectionId","type":"bytes32"}],"name":"getInspectionKey","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"cType","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":""};

var CargoStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getInspectionId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"},{"name":"_role","type":"uint16"},{"name":"finalStatus","type":"uint8"},{"name":"position","type":"uint256"},{"name":"requiredPlanStatus","type":"uint16"}],"name":"setPromotion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"setStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"getInfo","outputs":[{"name":"date","type":"uint256"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"}],"name":"getPromotion","outputs":[{"name":"","type":"uint16"},{"name":"","type":"uint8"},{"name":"","type":"uint256"},{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getInspectionType","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getStatus","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"action","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"inspectionId","type":"bytes32"}],"name":"getInspectionKey","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"cType","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a0319909116179055611128806100306000396000f3006060604052600436106100e25763ffffffff60e060020a60003504166306f5b37081146100e757806342088fab146101125780634fb2e45d1461014b578063673e639b1461016a57806377a28bd7146101895780637937354c146101b75780637b5348c9146101cd578063848a423f146102045780638f32d59b14610268578063a0bc19311461027b578063a55f9927146102aa578063b7973ad9146102e7578063bb03341f14610309578063c059853e14610328578063dbf30aa81461033e578063dc8c14ad1461036e578063dd9fd5da14610390578063f7ff1b6a146103bf575b600080fd5b34156100f257600080fd5b6101006004356024356103de565b60405190815260200160405180910390f35b341561011d57600080fd5b61014960ff60043581169060243581169061ffff60443581169160643516906084359060a43516610443565b005b341561015657600080fd5b610149600160a060020a03600435166105aa565b341561017557600080fd5b61014960043560243560ff604435166105f9565b341561019457600080fd5b6101a361ffff600435166106fb565b604051901515815260200160405180910390f35b34156101c257600080fd5b610100600435610771565b34156101d857600080fd5b6101ec60043560243560ff60443516610783565b60405191825260208201526040908101905180910390f35b341561020f57600080fd5b61022360ff600435811690602435166107fc565b60405161ffff851681526020810184600a81111561023d57fe5b60ff1681526020018381526020018261ffff1661ffff16815260200194505050505060405180910390f35b341561027357600080fd5b6101a3610879565b341561028657600080fd5b610294600435602435610895565b60405160ff909116815260200160405180910390f35b34156102b557600080fd5b6102c36004356024356108fe565b6040518082600a8111156102d357fe5b60ff16815260200191505060405180910390f35b34156102f257600080fd5b61014960043560243560ff60443516606435610967565b341561031457600080fd5b610149600160a060020a0360043516610a48565b341561033357600080fd5b6101ec600435610a97565b341561034957600080fd5b61035760ff60043516610ab1565b60405161ffff909116815260200160405180910390f35b341561037957600080fd5b61014960043560243560ff60443516606435610ac8565b341561039b57600080fd5b6103a3610cd8565b604051600160a060020a03909116815260200160405180910390f35b34156103ca57600080fd5b610149600160a060020a0360043516610ce7565b60006103e983610d9b565b15156103f457600080fd5b60008381526002602052604090205482901161040f57600080fd5b600083815260026020526040902080548390811061042957fe5b906000526020600020906019020160000154905092915050565b61044d6007610ab1565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156104a157600080fd5b6102c65a03f115156104b257600080fd5b5050506040518051905015156104c757600080fd5b6080604051908101604052808661ffff16815260200185600a8111156104e957fe5b81526020018481526020018361ffff168152506004600088600a81111561050c57fe5b60ff1660ff168152602001908152602001600020600089600b81111561052e57fe5b60ff16815260208101919091526040016000208151815461ffff191661ffff9190911617815560208201518154829062ff000019166201000083600a81111561057357fe5b0217905550604082015181600101556060820151600291909101805461ffff191661ffff9092169190911790555050505050505050565b6000546105bf90600160a060020a0316610e95565b15156105ca57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6106036007610ab1565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561065757600080fd5b6102c65a03f1151561066857600080fd5b50505060405180519050151561067d57600080fd5b61068684610d9b565b151561069157600080fd5b6000848152600260205260409020548390116106ac57600080fd5b60008481526002602052604090208054839190859081106106c957fe5b60009182526020909120601860199092020101805460ff1916600183600a8111156106f057fe5b021790555050505050565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561075157600080fd5b6102c65a03f1151561076257600080fd5b50505060405180519392505050565b60009081526002602052604090205490565b6000838152600260205260408120805482918291869081106107a157fe5b906000526020600020906019020190508060020184600a8111156107c157fe5b60ff16600b81106107ce57fe5b015481600d0185600a8111156107e057fe5b60ff16600b81106107ed57fe5b01549250925050935093915050565b60008060008060006004600087600a81111561081457fe5b60ff1660ff168152602001908152602001600020600088600b81111561083657fe5b60ff908116825260208201929092526040016000208054600182015460029092015461ffff8083169c620100009093049094169a50919850911695509350505050565b6000805461088f90600160a060020a0316610e95565b90505b90565b60006108a083610d9b565b15156108ab57600080fd5b6000838152600260205260409020548290116108c657600080fd5b60008381526002602052604090208054839081106108e057fe5b600091825260209091206019909102016001015460ff169392505050565b600061090983610d9b565b151561091457600080fd5b60008381526002602052604090205482901161092f57600080fd5b600083815260026020526040902080548390811061094957fe5b600091825260209091206019909102016018015460ff169392505050565b60008061097386610d9b565b151561097e57600080fd5b60008681526002602052604090205485901161099957600080fd5b60008681526002602052604090208054869081106109b357fe5b6000918252602082206018601990920201908101549093506004919060ff16600a8111156109dd57fe5b60ff1660ff168152602001908152602001600020600085600b8111156109ff57fe5b60ff1660ff1681526020019081526020016000209050610a1f8187610ece565b610a40828260000160029054906101000a900460ff16836001015486610f0d565b505050505050565b600054610a5d90600160a060020a0316610e95565b1515610a6857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600090815260036020526040902080546001909101549091565b6000816007811115610abf57fe5b60020a92915050565b600080600080610ad86007610ab1565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b1515610b2c57600080fd5b6102c65a03f11515610b3d57600080fd5b505050604051805190501515610b5257600080fd5b60008981526002602052604090209450610b6b89610d9b565b1515610b7657600080fd5b610b7f88610f57565b15610b8957600080fd5b60008760ff166003811115610b9a57fe5b6003811115610ba557fe5b1415610bb057600080fd5b8454610bbf866001830161104c565b5084546000198101945060009350859085908110610bd957fe5b600091825260209091206019909102018881556001808201805460ff8b1660ff19918216179091556018830180549395508693909291169083600a811115610c1d57fe5b02179055506040805190810160409081528a8252602080830187905260008b815260039091522081518155602082015160019091015550610c6e828480600a811115610c6557fe5b60ff1689610f0d565b6018820154610ccc9060049060009060ff16600a811115610c8b57fe5b60ff1681526020808201929092526040908101600090812081805290925290206002015461ffff16610cbc8b610f6b565b6004811115610cc757fe5b61101e565b50505050505050505050565b600154600160a060020a031690565b610cf16007610ab1565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b1515610d4557600080fd5b6102c65a03f11515610d5657600080fd5b505050604051805190501515610d6b57600080fd5b506005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6005546000908190600160a060020a0316637423df3382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610de757600080fd5b6102c65a03f11515610df857600080fd5b50505060405180519050600160a060020a0316634bd5322b846000806040516040015260405160e060020a63ffffffff8516028152600480820184815291602401908390811115610e4557fe5b60ff168152602001925050506040805180830381600087803b1515610e6957600080fd5b6102c65a03f11515610e7a57600080fd5b50505060405180519060200180515050600090119392505050565b600081600160a060020a031633600160a060020a03161480610ec8575081600160a060020a031632600160a060020a0316145b92915050565b8154610edd9061ffff166106fb565b1515610ee857600080fd5b6002820154610efe9061ffff16610cbc83610f6b565b1515610f0957600080fd5b5050565b60188401805484919060ff1916600183600a811115610f2857fe5b0217905550426002850183600b8110610f3d57fe5b015580600d850183600b8110610f4f57fe5b015550505050565b600090815260036020526040902054151590565b600554600090600160a060020a0316637423df3382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610fb557600080fd5b6102c65a03f11515610fc657600080fd5b50505060405180519050600160a060020a0316635de28ae08360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561075157600080fd5b6000808361ffff16111561104357600061ffff600284900a8516161161104357600080fd5b50600192915050565b81548183558181151161107857601902816019028360005260206000209182019101611078919061107d565b505050565b61089291905b808211156110cc57600080825560018201805460ff191690556110a960028301826110d0565b6110b7600d830160006110d0565b5060188101805460ff19169055601901611083565b5090565b506110df90600b8101906110e2565b50565b61089291905b808211156110cc57600081556001016110e85600a165627a7a72305820aa4d6fc04ca7c4923897ea339e373795dd9d017bc0047a84d040115f561687b20029"};

var IssueStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"name","type":"bytes32[2]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"issueId","type":"bytes32"}],"name":"getIssueKey","outputs":[{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getStatus","outputs":[{"name":"status","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"}],"name":"getPromotion","outputs":[{"name":"","type":"uint16"},{"name":"","type":"uint8"},{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"setStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"getInfo","outputs":[{"name":"date","type":"uint256"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"action","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"},{"name":"_role","type":"uint16"},{"name":"finalStatus","type":"uint8"},{"name":"inspectionStatus","type":"uint8"}],"name":"setPromotion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"issueId","type":"bytes32"},{"name":"name","type":"bytes32[2]"},{"name":"creationHash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"name","type":"bytes32[2]"}],"name":"update","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getIssueId","outputs":[{"name":"issueId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddress","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a03199091161790556114e9806100306000396000f3006060604052600436106100ed5763ffffffff60e060020a6000350416630710335b81146100f2578063078e13b214610152578063458605a1146101895780634fb2e45d146101cf578063570c1b21146101f057806377a28bd71461023c578063848a423f1461026a578063898d36df146102cd5780638b32b239146102fb5780638f32d59b14610341578063a9cc232f14610354578063bb03341f14610385578063ca890fc1146103a4578063d5c2adcf146103d7578063dbf30aa81461042e578063dd9fd5da1461045e578063e79d403e1461048d578063ec9edcb5146104e2578063f7ff1b6a1461050a575b600080fd5b34156100fd57600080fd5b61011a600160a060020a0360043516602435604435606435610529565b6040518082604080838360005b8381101561013f578082015183820152602001610127565b5050505090500191505060405180910390f35b341561015d57600080fd5b610177600160a060020a03600435166024356044356105e2565b60405190815260200160405180910390f35b341561019457600080fd5b6101ab600160a060020a036004351660243561061a565b60405192835260208301919091526040808301919091526060909101905180910390f35b34156101da57600080fd5b6101ee600160a060020a036004351661063d565b005b34156101fb57600080fd5b610218600160a060020a036004351660243560443560643561068c565b6040518082600281111561022857fe5b60ff16815260200191505060405180910390f35b341561024757600080fd5b61025661ffff600435166106d1565b604051901515815260200160405180910390f35b341561027557600080fd5b61028960ff60043581169060243516610747565b60405161ffff84168152602081018360028111156102a357fe5b60ff16815260200182600a8111156102b757fe5b60ff168152602001935050505060405180910390f35b34156102d857600080fd5b6101ee600160a060020a036004351660243560443560643560ff608435166107b9565b341561030657600080fd5b610329600160a060020a036004351660243560443560643560ff608435166108d5565b60405191825260208201526040908101905180910390f35b341561034c57600080fd5b610256610998565b341561035f57600080fd5b6101ee600160a060020a036004351660243560443560643560ff6084351660a4356109b4565b341561039057600080fd5b6101ee600160a060020a0360043516610aad565b34156103af57600080fd5b6101ee60ff60043581169060243581169061ffff604435169060643581169060843516610afc565b34156103e257600080fd5b6101ee60048035600160a060020a03169060243590604435906064359060c460846002604080519081016040528092919082600260200280828437509395505092359250610c61915050565b341561043957600080fd5b61044760ff60043516610e0b565b60405161ffff909116815260200160405180910390f35b341561046957600080fd5b610471610e22565b604051600160a060020a03909116815260200160405180910390f35b341561049857600080fd5b6101ee60048035600160a060020a03169060243590604435906064359060c46084600260408051908101604052809291908260026020028082843750939550610e31945050505050565b34156104ed57600080fd5b610177600160a060020a0360043516602435604435606435610f41565b341561051557600080fd5b6101ee600160a060020a0360043516610f9a565b610531611396565b61053c85858561104e565b151561054757600080fd5b600084815260026020908152604080832086845290915290205482901161056d57600080fd5b6000848152600260209081526040808320868452909152902080548390811061059257fe5b90600052602060002090600a02016001016002806020026040519081016040529190828260026020028201915b815481526001909101906020018083116105bf5750505050509050949350505050565b60006105ef84848461104e565b15156105fa57600080fd5b506000918252600260209081526040808420928452919052902054919050565b600090815260046020526040902080546001820154600290920154909391925090565b60005461065290600160a060020a03166110cc565b151561065d57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600083815260026020908152604080832085845290915281208054839081106106b157fe5b60009182526020909120600a909102016009015460ff1695945050505050565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561072757600080fd5b6102c65a03f1151561073857600080fd5b50505060405180519392505050565b6000806000806005600087600381111561075d57fe5b60ff1660ff168152602001908152602001600020600086600281111561077f57fe5b60ff908116825260208201929092526040016000205461ffff81169862010000820483169850630100000090910490911695509350505050565b6107c36007610e0b565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561081757600080fd5b6102c65a03f1151561082857600080fd5b50505060405180519050151561083d57600080fd5b600085815260026020908152604080832087845290915290205483901161086357600080fd5b61086e868686611105565b151561087957600080fd5b600085815260026020908152604080832087845290915290208054839190859081106108a157fe5b600091825260209091206009600a9092020101805460ff191660018360028111156108c857fe5b0217905550505050505050565b60008060006108e588888861104e565b15156108f057600080fd5b600087815260026020908152604080832089845290915290205485901161091657600080fd5b6000878152600260209081526040808320898452909152902080548690811061093b57fe5b90600052602060002090600a020190508060030184600281111561095b57fe5b60ff166003811061096857fe5b01548160060185600281111561097a57fe5b60ff166003811061098757fe5b015492509250509550959350505050565b600080546109ae90600160a060020a03166110cc565b90505b90565b600085815260026020908152604080832087845290915281205481908590116109dc57600080fd5b6109e7888888611105565b15156109f257600080fd5b60008781526002602090815260408083208984529091529020805486908110610a1757fe5b90600052602060002090600a0201915060056000856003811115610a3757fe5b60ff90811682526020820192909252604001600090812060098501549092166002811115610a6157fe5b60ff1660ff1681526020019081526020016000209050610a8081611219565b8054610aa390839062010000900460ff16806002811115610a9d57fe5b86611236565b5050505050505050565b600054610ac290600160a060020a03166110cc565b1515610acd57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610b066007610e0b565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b1515610b5a57600080fd5b6102c65a03f11515610b6b57600080fd5b505050604051805190501515610b8057600080fd5b6060604051908101604052808561ffff168152602001846002811115610ba257fe5b815260200183600a811115610bb357fe5b905260056000886003811115610bc557fe5b60ff1660ff1681526020019081526020016000206000876002811115610be757fe5b60ff16815260208101919091526040016000208151815461ffff191661ffff9190911617815560208201518154829062ff0000191662010000836002811115610c2c57fe5b021790555060408201518154829063ff0000001916630100000083600a811115610c5257fe5b02179055505050505050505050565b6000806000610c706007610e0b565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b1515610cc457600080fd5b6102c65a03f11515610cd557600080fd5b505050604051805190501515610cea57600080fd5b610cf389611288565b1515610cfe57600080fd5b610d098a8a8a61104e565b1515610d1457600080fd5b610d1d87611382565b15610d2757600080fd5b610d328a8a8a611105565b1515610d3d57600080fd5b60008981526002602090815260408083208b845290915290208054909450610d6885600183016113be565b50835460001981019350849084908110610d7e57fe5b60009182526020909120600a909102018781559150610da2600183018760026113ef565b504260038301556006820185905560098201805460ff19169055606060405190810160409081528a825260208083018b905281830186905260008a8152600490915220815181556020820151600182015560408201516002909101555050505050505050505050565b6000816007811115610e1957fe5b60020a92915050565b600154600160a060020a031690565b610e3b6007610e0b565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b1515610e8f57600080fd5b6102c65a03f11515610ea057600080fd5b505050604051805190501515610eb557600080fd5b6000858152600260209081526040808320878452909152902054839011610edb57600080fd5b610ee6868686611105565b1515610ef157600080fd5b60008581526002602090815260408083208784529091529020805483919085908110610f1957fe5b90600052602060002090600a0201600101906002610f389291906113ef565b50505050505050565b6000610f4e85858561104e565b1515610f5957600080fd5b60008481526002602090815260408083208684529091529020805483908110610f7e57fe5b90600052602060002090600a0201600001549050949350505050565b610fa46007610e0b565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b1515610ff857600080fd5b6102c65a03f1151561100957600080fd5b50505060405180519050151561101e57600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008381600160a060020a03821663c059853e85836040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b151561109f57600080fd5b6102c65a03f115156110b057600080fd5b5050506040518051906020018051505090941495945050505050565b600081600160a060020a031633600160a060020a031614806110ff575081600160a060020a031632600160a060020a0316145b92915050565b6000838180600160a060020a03831663c059853e86836040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b151561115757600080fd5b6102c65a03f1151561116857600080fd5b5050506040518051906020018051919350909150508582141561120a5782600160a060020a031663a55f9927878360006040516020015260405160e060020a63ffffffff851602815260048101929092526024820152604401602060405180830381600087803b15156111da57600080fd5b6102c65a03f115156111eb57600080fd5b50505060405180519050600a81111561120057fe5b600714935061120f565b600093505b5050509392505050565b80546112289061ffff166106d1565b151561123357600080fd5b50565b60098401805484919060ff1916600183600281111561125157fe5b021790555042846003018360ff1660038110151561126b57fe5b0155806006850160ff84166003811061128057fe5b015550505050565b6003546000908190600160a060020a0316637423df3382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156112d457600080fd5b6102c65a03f115156112e557600080fd5b50505060405180519050600160a060020a0316634bd5322b846000806040516040015260405160e060020a63ffffffff851602815260048082018481529160240190839081111561133257fe5b60ff168152602001925050506040805180830381600087803b151561135657600080fd5b6102c65a03f1151561136757600080fd5b50505060405180519060200180515050600090119392505050565b600090815260046020526040902054151590565b604080519081016040526002815b600081526000199190910190602001816113a45790505090565b8154818355818115116113ea57600a0281600a0283600052602060002091820191016113ea919061142f565b505050565b826002810192821561141f579160200282015b8281111561141f5782518255602090920191600190910190611402565b5061142b929150611480565b5090565b6109b191905b8082111561142b57600080825561144f600183018261149a565b61145d6003830160006114a8565b61146b6006830160006114a8565b5060098101805460ff19169055600a01611435565b6109b191905b8082111561142b5760008155600101611486565b506000815560010160009055565b506000815560010160008155600101600090555600a165627a7a72305820e1c3b84919958bbde05f7e26db330b61e1e1dbdafda58a8ed7879bb0fcb0c6c70029"};

var IssueEvidenceStoreCompiled = {"abi":[{"constant":false,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"issueId","type":"bytes32"},{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"issueId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"_issueId","type":"bytes32"},{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"issueId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddress","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a03199091161790556108f8806100306000396000f30060606040526004361061008a5763ffffffff60e060020a6000350416634c5d3fc9811461008f5780634fb2e45d146100e057806377a28bd7146100ff5780638f32d59b1461012d5780639ca8cf1f14610140578063bb03341f146101ad578063d185dd4e146101cc578063dbf30aa814610200578063dd9fd5da14610230578063f7ff1b6a1461025f575b600080fd5b341561009a57600080fd5b6100de60048035600160a060020a0316906024359060846044600260408051908101604052809291908260026020028082843750939550509235925061027e915050565b005b34156100eb57600080fd5b6100de600160a060020a036004351661038e565b341561010a57600080fd5b61011961ffff600435166103dd565b604051901515815260200160405180910390f35b341561013857600080fd5b610119610453565b341561014b57600080fd5b610165600160a060020a036004351660243560443561046f565b6040518381526020810183604080838360005b83811015610190578082015183820152602001610178565b505050509190910192835250506020019150604090505180910390f35b34156101b857600080fd5b6100de600160a060020a0360043516610564565b34156101d757600080fd5b6101ee600160a060020a03600435166024356105b3565b60405190815260200160405180910390f35b341561020b57600080fd5b61021960ff600435166105c7565b60405161ffff909116815260200160405180910390f35b341561023b57600080fd5b6102436105de565b604051600160a060020a03909116815260200160405180910390f35b341561026a57600080fd5b6100de600160a060020a03600435166105ed565b600080600061028d60076105c7565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156102e157600080fd5b6102c65a03f115156102f257600080fd5b50505060405180519050151561030757600080fd5b61031188886106a1565b151561031c57600080fd5b6000878152600260205260409020805490945061033c85600183016107d4565b5083546000198101935084908490811061035257fe5b60009182526020909120600590910201878155915061037660018301876002610805565b50506004810193909355505042600390910155505050565b6000546103a390600160a060020a031661079b565b15156103ae57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561043357600080fd5b6102c65a03f1151561044457600080fd5b50505060405180519392505050565b6000805461046990600160a060020a031661079b565b90505b90565b6000610479610845565b60008481526002602052604081205484901161049457600080fd5b60008581526002602052604090208054859081106104ae57fe5b60009182526020808320600590920290910154878352600290915260409091208054869081106104da57fe5b6000918252602080832089845260029091526040909220805460059290920290920160010191908790811061050b57fe5b906000526020600020906005020160040154816002806020026040519081016040529190828260026020028201915b8154815260019091019060200180831161053a575050505050915092509250925093509350939050565b60005461057990600160a060020a031661079b565b151561058457600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600090815260026020526040902054919050565b60008160078111156105d557fe5b60020a92915050565b600154600160a060020a031690565b6105f760076105c7565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561064b57600080fd5b6102c65a03f1151561065c57600080fd5b50505060405180519050151561067157600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035460009081908190600160a060020a031663f54b631482604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156106ef57600080fd5b6102c65a03f1151561070057600080fd5b5050506040518051925050600160a060020a03821663458605a1868660006040516060015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401606060405180830381600087803b151561076857600080fd5b6102c65a03f1151561077957600080fd5b5050506040518051906020018051906020018051505050151595945050505050565b600081600160a060020a031633600160a060020a031614806107ce575081600160a060020a031632600160a060020a0316145b92915050565b81548183558181151161080057600502816005028360005260206000209182019101610800919061086d565b505050565b8260028101928215610835579160200282015b828111156108355782518255602090920191600190910190610818565b506108419291506108a4565b5090565b604080519081016040526002815b600081526000199190910190602001816108535790505090565b61046c91905b8082111561084157600080825561088d60018301826108be565b506000600382018190556004820155600501610873565b61046c91905b8082111561084157600081556001016108aa565b5060008155600101600090555600a165627a7a723058209512a760617883c6b987e46f613f06551ebe125b2f4eca630fd69421668234930029"};

var ReviewStoreCompiled = {"abi":[{"constant":false,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"},{"name":"_role","type":"uint16"},{"name":"finalStatus","type":"uint8"},{"name":"position","type":"uint256"},{"name":"_planStatus","type":"uint16"}],"name":"setPromotion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"setStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"}],"name":"getReviewIndex","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"status","type":"uint8"}],"name":"getInfo","outputs":[{"name":"date","type":"uint256"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"action","type":"uint8"},{"name":"currentStatus","type":"uint8"}],"name":"getPromotion","outputs":[{"name":"","type":"uint16"},{"name":"","type":"uint8"},{"name":"","type":"uint256"},{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getStatus","outputs":[{"name":"status","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"getReviewId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"index","type":"uint256"},{"name":"action","type":"uint8"},{"name":"hash","type":"bytes32"}],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":""};

var TargetAnalysisStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"","type":"bytes32[2]"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"},{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a03199091161790556109e0806100306000396000f30060606040526004361061008a5763ffffffff60e060020a600035041663462f9a28811461008f5780634fb2e45d146100eb57806354cdfd4d1461010c57806377a28bd7146101525780638f32d59b14610180578063bb03341f14610193578063dbf30aa8146101b2578063dd9fd5da146101e2578063f7f1b76614610211578063f7ff1b6a1461023c575b600080fd5b341561009a57600080fd5b6100ab60043560243560443561025b565b6040518083604080838360005b838110156100d05780820151838201526020016100b8565b50505050919091019283525050602001905060405180910390f35b34156100f657600080fd5b61010a600160a060020a03600435166102e9565b005b341561011757600080fd5b61010a600480359060243590608460446002604080519081016040528092919082600260200280828437509395505092359250610338915050565b341561015d57600080fd5b61016c61ffff600435166103dc565b604051901515815260200160405180910390f35b341561018b57600080fd5b61016c610452565b341561019e57600080fd5b61010a600160a060020a036004351661046e565b34156101bd57600080fd5b6101cb60ff600435166104bd565b60405161ffff909116815260200160405180910390f35b34156101ed57600080fd5b6101f56104d4565b604051600160a060020a03909116815260200160405180910390f35b341561021c57600080fd5b61022a6004356024356104e3565b60405190815260200160405180910390f35b341561024757600080fd5b61010a600160a060020a0360043516610500565b6102636108c2565b6000848152600260209081526040808320868452909152812080548291908590811061028b57fe5b90600052602060002090600402019050806000018160030154816002806020026040519081016040529190828260026020028201915b815481526001909101906020018083116102c157505050505091509250925050935093915050565b6000546102fe90600160a060020a03166105b4565b151561030957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806000610346876105ed565b151561035157600080fd5b61035b87876106e7565b151561036657600080fd5b60008781526002602090815260408083208984529091529020805490935061039184600183016108ea565b508254600019810192508390839081106103a757fe5b6000918252602090912060049091020190506103c58186600261091b565b506003810193909355505042600290910155505050565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561043257600080fd5b6102c65a03f1151561044357600080fd5b50505060405180519392505050565b6000805461046890600160a060020a03166105b4565b90505b90565b60005461048390600160a060020a03166105b4565b151561048e57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008160078111156104cb57fe5b60020a92915050565b600154600160a060020a031690565b600091825260026020908152604080842092845291905290205490565b61050a60076104bd565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561055e57600080fd5b6102c65a03f1151561056f57600080fd5b50505060405180519050151561058457600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081600160a060020a031633600160a060020a031614806105e7575081600160a060020a031632600160a060020a0316145b92915050565b6003546000908190600160a060020a0316637423df3382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561063957600080fd5b6102c65a03f1151561064a57600080fd5b50505060405180519050600160a060020a0316634bd5322b846000806040516040015260405160e060020a63ffffffff851602815260048082018481529160240190839081111561069757fe5b60ff168152602001925050506040805180830381600087803b15156106bb57600080fd5b6102c65a03f115156106cc57600080fd5b50505060405180519060200180515050600090119392505050565b60035460009081908190600160a060020a0316631992787982604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561073557600080fd5b6102c65a03f1151561074657600080fd5b50505060405180519050600160a060020a031663763dcd76868660006040516020015260405160e060020a63ffffffff851602815260048101929092526024820152604401602060405180830381600087803b15156107a457600080fd5b6102c65a03f115156107b557600080fd5b5050506040518051600354909250600160a060020a0316905063199278796000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561080a57600080fd5b6102c65a03f1151561081b57600080fd5b50505060405180519050600160a060020a0316637b5348c986836000806040516040015260405160e060020a63ffffffff861602815260048101848152602482018490529060440182600581111561086f57fe5b60ff16815260200193505050506040805180830381600087803b151561089457600080fd5b6102c65a03f115156108a557600080fd5b505050604051805190602001805150506000901195945050505050565b604080519081016040526002815b600081526000199190910190602001816108d05790505090565b81548183558181151161091657600402816004028360005260206000209182019101610916919061095b565b505050565b826002810192821561094b579160200282015b8281111561094b578251825560209092019160019091019061092e565b5061095792915061098c565b5090565b61046b91905b8082111561095757600061097582826109a6565b506000600282018190556003820155600401610961565b61046b91905b808211156109575760008155600101610992565b5060008155600101600090555600a165627a7a723058205570a9167a74bf7425dd6c7a0c238410f318d3beb7b7954519273734c4eb1fe30029"};

var ActionAnalysisStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"","type":"bytes32[2]"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"},{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a03199091161790556109e0806100306000396000f30060606040526004361061008a5763ffffffff60e060020a600035041663462f9a28811461008f5780634fb2e45d146100eb57806354cdfd4d1461010c57806377a28bd7146101525780638f32d59b14610180578063bb03341f14610193578063dbf30aa8146101b2578063dd9fd5da146101e2578063f7f1b76614610211578063f7ff1b6a1461023c575b600080fd5b341561009a57600080fd5b6100ab60043560243560443561025b565b6040518083604080838360005b838110156100d05780820151838201526020016100b8565b50505050919091019283525050602001905060405180910390f35b34156100f657600080fd5b61010a600160a060020a03600435166102e9565b005b341561011757600080fd5b61010a600480359060243590608460446002604080519081016040528092919082600260200280828437509395505092359250610338915050565b341561015d57600080fd5b61016c61ffff600435166103dc565b604051901515815260200160405180910390f35b341561018b57600080fd5b61016c610452565b341561019e57600080fd5b61010a600160a060020a036004351661046e565b34156101bd57600080fd5b6101cb60ff600435166104bd565b60405161ffff909116815260200160405180910390f35b34156101ed57600080fd5b6101f56104d4565b604051600160a060020a03909116815260200160405180910390f35b341561021c57600080fd5b61022a6004356024356104e3565b60405190815260200160405180910390f35b341561024757600080fd5b61010a600160a060020a0360043516610500565b6102636108c2565b6000848152600260209081526040808320868452909152812080548291908590811061028b57fe5b90600052602060002090600402019050806000018160030154816002806020026040519081016040529190828260026020028201915b815481526001909101906020018083116102c157505050505091509250925050935093915050565b6000546102fe90600160a060020a03166105b4565b151561030957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806000610346876105ed565b151561035157600080fd5b61035b87876106e7565b151561036657600080fd5b60008781526002602090815260408083208984529091529020805490935061039184600183016108ea565b508254600019810192508390839081106103a757fe5b6000918252602090912060049091020190506103c58186600261091b565b506003810193909355505042600290910155505050565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561043257600080fd5b6102c65a03f1151561044357600080fd5b50505060405180519392505050565b6000805461046890600160a060020a03166105b4565b90505b90565b60005461048390600160a060020a03166105b4565b151561048e57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008160078111156104cb57fe5b60020a92915050565b600154600160a060020a031690565b600091825260026020908152604080842092845291905290205490565b61050a60076104bd565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561055e57600080fd5b6102c65a03f1151561056f57600080fd5b50505060405180519050151561058457600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081600160a060020a031633600160a060020a031614806105e7575081600160a060020a031632600160a060020a0316145b92915050565b6003546000908190600160a060020a0316637423df3382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561063957600080fd5b6102c65a03f1151561064a57600080fd5b50505060405180519050600160a060020a0316634bd5322b846000806040516040015260405160e060020a63ffffffff851602815260048082018481529160240190839081111561069757fe5b60ff168152602001925050506040805180830381600087803b15156106bb57600080fd5b6102c65a03f115156106cc57600080fd5b50505060405180519060200180515050600090119392505050565b60035460009081908190600160a060020a0316631992787982604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561073557600080fd5b6102c65a03f1151561074657600080fd5b50505060405180519050600160a060020a031663763dcd76868660006040516020015260405160e060020a63ffffffff851602815260048101929092526024820152604401602060405180830381600087803b15156107a457600080fd5b6102c65a03f115156107b557600080fd5b5050506040518051600354909250600160a060020a0316905063199278796000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561080a57600080fd5b6102c65a03f1151561081b57600080fd5b50505060405180519050600160a060020a0316637b5348c986836000806040516040015260405160e060020a63ffffffff861602815260048101848152602482018490529060440182600581111561086f57fe5b60ff16815260200193505050506040805180830381600087803b151561089457600080fd5b6102c65a03f115156108a557600080fd5b505050604051805190602001805150506000901195945050505050565b604080519081016040526002815b600081526000199190910190602001816108d05790505090565b81548183558181151161091657600402816004028360005260206000209182019101610916919061095b565b505050565b826002810192821561094b579160200282015b8281111561094b578251825560209092019160019091019061092e565b5061095792915061098c565b5090565b61046b91905b8082111561095757600061097582826109a6565b506000600282018190556003820155600401610961565b61046b91905b808211156109575760008155600101610992565b5060008155600101600090555600a165627a7a723058205570a9167a74bf7425dd6c7a0c238410f318d3beb7b7954519273734c4eb1fe30029"};

var IcsAttachmentStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"},{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddress","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a03199091161790556109f7806100306000396000f30060606040526004361061008a5763ffffffff60e060020a600035041663462f9a28811461008f5780634fb2e45d146100eb57806354cdfd4d1461010c57806377a28bd7146101525780638f32d59b14610180578063bb03341f14610193578063dbf30aa8146101b2578063dd9fd5da146101e2578063f7f1b76614610211578063f7ff1b6a1461023c575b600080fd5b341561009a57600080fd5b6100ab60043560243560443561025b565b6040518083604080838360005b838110156100d05780820151838201526020016100b8565b50505050919091019283525050602001905060405180910390f35b34156100f657600080fd5b61010a600160a060020a03600435166102e2565b005b341561011757600080fd5b61010a600480359060243590608460446002604080519081016040528092919082600260200280828437509395505092359250610331915050565b341561015d57600080fd5b61016c61ffff60043516610452565b604051901515815260200160405180910390f35b341561018b57600080fd5b61016c6104c8565b341561019e57600080fd5b61010a600160a060020a03600435166104e4565b34156101bd57600080fd5b6101cb60ff60043516610533565b60405161ffff909116815260200160405180910390f35b34156101ed57600080fd5b6101f561054a565b604051600160a060020a03909116815260200160405180910390f35b341561021c57600080fd5b61022a600435602435610559565b60405190815260200160405180910390f35b341561024757600080fd5b61010a600160a060020a0360043516610576565b6102636108d9565b6000848152600260209081526040808320868452909152812080548291908590811061028b57fe5b600091825260209091206004909102019050806002604080519081016040529190828260026020028201915b815481526001909101906020018083116102b757505050505092508060030154915050935093915050565b6000546102f790600160a060020a031661062a565b151561030257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008061033e6007610533565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561039257600080fd5b6102c65a03f115156103a357600080fd5b5050506040518051905015156103b857600080fd5b6103c187610663565b15156103cc57600080fd5b6103d6878761075d565b15156103e157600080fd5b60008781526002602090815260408083208984529091529020805490935061040c8460018301610901565b5082548390600019810190811061041f57fe5b60009182526020909120600490910201915061043d82866002610932565b50504260028201556003019190915550505050565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156104a857600080fd5b6102c65a03f115156104b957600080fd5b50505060405180519392505050565b600080546104de90600160a060020a031661062a565b90505b90565b6000546104f990600160a060020a031661062a565b151561050457600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081600781111561054157fe5b60020a92915050565b600154600160a060020a031690565b600091825260026020908152604080842092845291905290205490565b6105806007610533565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156105d457600080fd5b6102c65a03f115156105e557600080fd5b5050506040518051905015156105fa57600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081600160a060020a031633600160a060020a0316148061065d575081600160a060020a031632600160a060020a0316145b92915050565b6003546000908190600160a060020a0316637423df3382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156106af57600080fd5b6102c65a03f115156106c057600080fd5b50505060405180519050600160a060020a0316634bd5322b846000806040516040015260405160e060020a63ffffffff851602815260048082018481529160240190839081111561070d57fe5b60ff168152602001925050506040805180830381600087803b151561073157600080fd5b6102c65a03f1151561074257600080fd5b50505060405180519060200180515050600090119392505050565b600354600090819081908190600160a060020a0316631992787982604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156107ad57600080fd5b6102c65a03f115156107be57600080fd5b5050506040518051935050600160a060020a03831663763dcd76878760006040516020015260405160e060020a63ffffffff851602815260048101929092526024820152604401602060405180830381600087803b151561081e57600080fd5b6102c65a03f1151561082f57600080fd5b5050506040518051925050600160a060020a038316637b5348c987846000806040516040015260405160e060020a63ffffffff861602815260048101848152602482018490529060440182600581111561088557fe5b60ff16815260200193505050506040805180830381600087803b15156108aa57600080fd5b6102c65a03f115156108bb57600080fd5b50505060405180519060200180515050600090119695505050505050565b604080519081016040526002815b600081526000199190910190602001816108e75790505090565b81548183558181151161092d5760040281600402836000526020600020918201910161092d9190610972565b505050565b8260028101928215610962579160200282015b828111156109625782518255602090920191600190910190610945565b5061096e9291506109a3565b5090565b6104e191905b8082111561096e57600061098c82826109bd565b506000600282018190556003820155600401610978565b6104e191905b8082111561096e57600081556001016109a9565b5060008155600101600090555600a165627a7a72305820b44f76e7fba254849d3ee5592077694758fd12b0bc10dc7aa3117d1e15c1bd1d0029"};

var IsfAttachmentStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"},{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"planId","type":"bytes32"},{"name":"reviewId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddress","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a03199091161790556109f7806100306000396000f30060606040526004361061008a5763ffffffff60e060020a600035041663462f9a28811461008f5780634fb2e45d146100eb57806354cdfd4d1461010c57806377a28bd7146101525780638f32d59b14610180578063bb03341f14610193578063dbf30aa8146101b2578063dd9fd5da146101e2578063f7f1b76614610211578063f7ff1b6a1461023c575b600080fd5b341561009a57600080fd5b6100ab60043560243560443561025b565b6040518083604080838360005b838110156100d05780820151838201526020016100b8565b50505050919091019283525050602001905060405180910390f35b34156100f657600080fd5b61010a600160a060020a03600435166102e2565b005b341561011757600080fd5b61010a600480359060243590608460446002604080519081016040528092919082600260200280828437509395505092359250610331915050565b341561015d57600080fd5b61016c61ffff60043516610452565b604051901515815260200160405180910390f35b341561018b57600080fd5b61016c6104c8565b341561019e57600080fd5b61010a600160a060020a03600435166104e4565b34156101bd57600080fd5b6101cb60ff60043516610533565b60405161ffff909116815260200160405180910390f35b34156101ed57600080fd5b6101f561054a565b604051600160a060020a03909116815260200160405180910390f35b341561021c57600080fd5b61022a600435602435610559565b60405190815260200160405180910390f35b341561024757600080fd5b61010a600160a060020a0360043516610576565b6102636108d9565b6000848152600260209081526040808320868452909152812080548291908590811061028b57fe5b600091825260209091206004909102019050806002604080519081016040529190828260026020028201915b815481526001909101906020018083116102b757505050505092508060030154915050935093915050565b6000546102f790600160a060020a031661062a565b151561030257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008061033e6007610533565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b151561039257600080fd5b6102c65a03f115156103a357600080fd5b5050506040518051905015156103b857600080fd5b6103c187610663565b15156103cc57600080fd5b6103d6878761075d565b15156103e157600080fd5b60008781526002602090815260408083208984529091529020805490935061040c8460018301610901565b5082548390600019810190811061041f57fe5b60009182526020909120600490910201915061043d82866002610932565b50504260028201556003019190915550505050565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156104a857600080fd5b6102c65a03f115156104b957600080fd5b50505060405180519392505050565b600080546104de90600160a060020a031661062a565b90505b90565b6000546104f990600160a060020a031661062a565b151561050457600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081600781111561054157fe5b60020a92915050565b600154600160a060020a031690565b600091825260026020908152604080842092845291905290205490565b6105806007610533565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156105d457600080fd5b6102c65a03f115156105e557600080fd5b5050506040518051905015156105fa57600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081600160a060020a031633600160a060020a0316148061065d575081600160a060020a031632600160a060020a0316145b92915050565b6003546000908190600160a060020a0316637423df3382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156106af57600080fd5b6102c65a03f115156106c057600080fd5b50505060405180519050600160a060020a0316634bd5322b846000806040516040015260405160e060020a63ffffffff851602815260048082018481529160240190839081111561070d57fe5b60ff168152602001925050506040805180830381600087803b151561073157600080fd5b6102c65a03f1151561074257600080fd5b50505060405180519060200180515050600090119392505050565b600354600090819081908190600160a060020a0316631992787982604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156107ad57600080fd5b6102c65a03f115156107be57600080fd5b5050506040518051935050600160a060020a03831663763dcd76878760006040516020015260405160e060020a63ffffffff851602815260048101929092526024820152604401602060405180830381600087803b151561081e57600080fd5b6102c65a03f1151561082f57600080fd5b5050506040518051925050600160a060020a038316637b5348c987846000806040516040015260405160e060020a63ffffffff861602815260048101848152602482018490529060440182600581111561088557fe5b60ff16815260200193505050506040805180830381600087803b15156108aa57600080fd5b6102c65a03f115156108bb57600080fd5b50505060405180519060200180515050600090119695505050505050565b604080519081016040526002815b600081526000199190910190602001816108e75790505090565b81548183558181151161092d5760040281600402836000526020600020918201910161092d9190610972565b505050565b8260028101928215610962579160200282015b828111156109625782518255602090920191600190910190610945565b5061096e9291506109a3565b5090565b6104e191905b8082111561096e57600061098c82826109bd565b506000600282018190556003820155600401610978565b6104e191905b8082111561096e57600081556001016109a9565b5060008155600101600090555600a165627a7a72305820b44f76e7fba254849d3ee5592077694758fd12b0bc10dc7aa3117d1e15c1bd1d0029"};

var OperationalEvidenceStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a03199091161790556109ad806100306000396000f30060606040526004361061008a5763ffffffff60e060020a6000350416630710335b811461008f578063078e13b2146100f75780634fb2e45d1461012e5780637004bbbe1461014f57806377a28bd7146101a25780638f32d59b146101d0578063bb03341f146101e3578063dbf30aa814610202578063dd9fd5da14610232578063f7ff1b6a14610261575b600080fd5b341561009a57600080fd5b6100b7600160a060020a0360043516602435604435606435610280565b6040518083604080838360005b838110156100dc5780820151838201526020016100c4565b50505050919091019283525050602001905060405180910390f35b341561010257600080fd5b61011c600160a060020a036004351660243560443561035e565b60405190815260200160405180910390f35b341561013957600080fd5b61014d600160a060020a0360043516610395565b005b341561015a57600080fd5b61014d60048035600160a060020a031690602435906044359060a4606460026040805190810160405280929190826002602002808284375093955050923592506103e4915050565b34156101ad57600080fd5b6101bc61ffff60043516610489565b604051901515815260200160405180910390f35b34156101db57600080fd5b6101bc6104ff565b34156101ee57600080fd5b61014d600160a060020a036004351661051b565b341561020d57600080fd5b61021b60ff6004351661056a565b60405161ffff909116815260200160405180910390f35b341561023d57600080fd5b610245610581565b604051600160a060020a03909116815260200160405180910390f35b341561026c57600080fd5b61014d600160a060020a0360043516610590565b61028861088f565b60008061029486610644565b151561029f57600080fd5b6102a9878661073e565b15156102b457600080fd5b60008681526002602090815260408083208884529091529020548490116102da57600080fd5b600086815260026020908152604080832088845290915290208054859081106102ff57fe5b90600052602060002090600402019050806000018160030154816002806020026040519081016040529190828260026020028201915b815481526001909101906020018083116103355750505050509150925092505094509492505050565b600061036a848361073e565b151561037557600080fd5b506000918252600260209081526040808420928452919052902054919050565b6000546103aa90600160a060020a0316610856565b15156103b557600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008060006103f287610644565b15156103fd57600080fd5b610407888761073e565b151561041257600080fd5b60008781526002602090815260408083208984529091529020805490935061043d84600183016108b7565b5082546000198101925083908390811061045357fe5b600091825260209091206004909102019050610471818660026108e8565b50600381019390935550504260029091015550505050565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156104df57600080fd5b6102c65a03f115156104f057600080fd5b50505060405180519392505050565b6000805461051590600160a060020a0316610856565b90505b90565b60005461053090600160a060020a0316610856565b151561053b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081600781111561057857fe5b60020a92915050565b600154600160a060020a031690565b61059a600761056a565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156105ee57600080fd5b6102c65a03f115156105ff57600080fd5b50505060405180519050151561061457600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6003546000908190600160a060020a0316637423df3382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561069057600080fd5b6102c65a03f115156106a157600080fd5b50505060405180519050600160a060020a0316634bd5322b846000806040516040015260405160e060020a63ffffffff85160281526004808201848152916024019083908111156106ee57fe5b60ff168152602001925050506040805180830381600087803b151561071257600080fd5b6102c65a03f1151561072357600080fd5b50505060405180519060200180515050600090119392505050565b60008060008085600160a060020a031663c059853e8660006040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b151561079257600080fd5b6102c65a03f115156107a357600080fd5b5050506040518051906020018051935090915050600160a060020a038616637b5348c982846000806040516040015260405160e060020a63ffffffff861602815260048101848152602482018490529060440182600a81111561080257fe5b60ff16815260200193505050506040805180830381600087803b151561082757600080fd5b6102c65a03f1151561083857600080fd5b50505060405180519060200180515050600090119695505050505050565b600081600160a060020a031633600160a060020a03161480610889575081600160a060020a031632600160a060020a0316145b92915050565b604080519081016040526002815b6000815260001991909101906020018161089d5790505090565b8154818355818115116108e3576004028160040283600052602060002091820191016108e39190610928565b505050565b8260028101928215610918579160200282015b8281111561091857825182556020909201916001909101906108fb565b50610924929150610959565b5090565b61051891905b808211156109245760006109428282610973565b50600060028201819055600382015560040161092e565b61051891905b80821115610924576000815560010161095f565b5060008155600101600090555600a165627a7a723058202200af6580f30c3636812bfae6d67266cbfc5afb338a1b864958d39730d9d2e60029"};

var EquipmentEvidenceStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a03199091161790556109ad806100306000396000f30060606040526004361061008a5763ffffffff60e060020a6000350416630710335b811461008f578063078e13b2146100f75780634fb2e45d1461012e5780637004bbbe1461014f57806377a28bd7146101a25780638f32d59b146101d0578063bb03341f146101e3578063dbf30aa814610202578063dd9fd5da14610232578063f7ff1b6a14610261575b600080fd5b341561009a57600080fd5b6100b7600160a060020a0360043516602435604435606435610280565b6040518083604080838360005b838110156100dc5780820151838201526020016100c4565b50505050919091019283525050602001905060405180910390f35b341561010257600080fd5b61011c600160a060020a036004351660243560443561035e565b60405190815260200160405180910390f35b341561013957600080fd5b61014d600160a060020a0360043516610395565b005b341561015a57600080fd5b61014d60048035600160a060020a031690602435906044359060a4606460026040805190810160405280929190826002602002808284375093955050923592506103e4915050565b34156101ad57600080fd5b6101bc61ffff60043516610489565b604051901515815260200160405180910390f35b34156101db57600080fd5b6101bc6104ff565b34156101ee57600080fd5b61014d600160a060020a036004351661051b565b341561020d57600080fd5b61021b60ff6004351661056a565b60405161ffff909116815260200160405180910390f35b341561023d57600080fd5b610245610581565b604051600160a060020a03909116815260200160405180910390f35b341561026c57600080fd5b61014d600160a060020a0360043516610590565b61028861088f565b60008061029486610644565b151561029f57600080fd5b6102a9878661073e565b15156102b457600080fd5b60008681526002602090815260408083208884529091529020548490116102da57600080fd5b600086815260026020908152604080832088845290915290208054859081106102ff57fe5b90600052602060002090600402019050806000018160030154816002806020026040519081016040529190828260026020028201915b815481526001909101906020018083116103355750505050509150925092505094509492505050565b600061036a848361073e565b151561037557600080fd5b506000918252600260209081526040808420928452919052902054919050565b6000546103aa90600160a060020a0316610856565b15156103b557600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008060006103f287610644565b15156103fd57600080fd5b610407888761073e565b151561041257600080fd5b60008781526002602090815260408083208984529091529020805490935061043d84600183016108b7565b5082546000198101925083908390811061045357fe5b600091825260209091206004909102019050610471818660026108e8565b50600381019390935550504260029091015550505050565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156104df57600080fd5b6102c65a03f115156104f057600080fd5b50505060405180519392505050565b6000805461051590600160a060020a0316610856565b90505b90565b60005461053090600160a060020a0316610856565b151561053b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081600781111561057857fe5b60020a92915050565b600154600160a060020a031690565b61059a600761056a565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156105ee57600080fd5b6102c65a03f115156105ff57600080fd5b50505060405180519050151561061457600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6003546000908190600160a060020a0316637423df3382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561069057600080fd5b6102c65a03f115156106a157600080fd5b50505060405180519050600160a060020a0316634bd5322b846000806040516040015260405160e060020a63ffffffff85160281526004808201848152916024019083908111156106ee57fe5b60ff168152602001925050506040805180830381600087803b151561071257600080fd5b6102c65a03f1151561072357600080fd5b50505060405180519060200180515050600090119392505050565b60008060008085600160a060020a031663c059853e8660006040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b151561079257600080fd5b6102c65a03f115156107a357600080fd5b5050506040518051906020018051935090915050600160a060020a038616637b5348c982846000806040516040015260405160e060020a63ffffffff861602815260048101848152602482018490529060440182600a81111561080257fe5b60ff16815260200193505050506040805180830381600087803b151561082757600080fd5b6102c65a03f1151561083857600080fd5b50505060405180519060200180515050600090119695505050505050565b600081600160a060020a031633600160a060020a03161480610889575081600160a060020a031632600160a060020a0316145b92915050565b604080519081016040526002815b6000815260001991909101906020018161089d5790505090565b8154818355818115116108e3576004028160040283600052602060002091820191016108e39190610928565b505050565b8260028101928215610918579160200282015b8281111561091857825182556020909201916001909101906108fb565b50610924929150610959565b5090565b61051891905b808211156109245760006109428282610973565b50600060028201819055600382015560040161092e565b61051891905b80821115610924576000815560010161095f565b5060008155600101600090555600a165627a7a723058202200af6580f30c3636812bfae6d67266cbfc5afb338a1b864958d39730d9d2e60029"};

var CargoEvidenceStoreCompiled = {"abi":[{"constant":true,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"}],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"inspectionAddress","type":"address"},{"name":"planId","type":"bytes32"},{"name":"inspectionId","type":"bytes32"},{"name":"name","type":"bytes32[2]"},{"name":"hash","type":"bytes32"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"roleAddress","type":"address"}],"name":"setRoleContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"}],"name":"role","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getRoleContract","outputs":[{"name":"roleAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"contractStoreAddr","type":"address"}],"name":"setContractStore","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x606060405260008054600160a060020a033316600160a060020a03199091161790556109ad806100306000396000f30060606040526004361061008a5763ffffffff60e060020a6000350416630710335b811461008f578063078e13b2146100f75780634fb2e45d1461012e5780637004bbbe1461014f57806377a28bd7146101a25780638f32d59b146101d0578063bb03341f146101e3578063dbf30aa814610202578063dd9fd5da14610232578063f7ff1b6a14610261575b600080fd5b341561009a57600080fd5b6100b7600160a060020a0360043516602435604435606435610280565b6040518083604080838360005b838110156100dc5780820151838201526020016100c4565b50505050919091019283525050602001905060405180910390f35b341561010257600080fd5b61011c600160a060020a036004351660243560443561035e565b60405190815260200160405180910390f35b341561013957600080fd5b61014d600160a060020a0360043516610395565b005b341561015a57600080fd5b61014d60048035600160a060020a031690602435906044359060a4606460026040805190810160405280929190826002602002808284375093955050923592506103e4915050565b34156101ad57600080fd5b6101bc61ffff60043516610489565b604051901515815260200160405180910390f35b34156101db57600080fd5b6101bc6104ff565b34156101ee57600080fd5b61014d600160a060020a036004351661051b565b341561020d57600080fd5b61021b60ff6004351661056a565b60405161ffff909116815260200160405180910390f35b341561023d57600080fd5b610245610581565b604051600160a060020a03909116815260200160405180910390f35b341561026c57600080fd5b61014d600160a060020a0360043516610590565b61028861088f565b60008061029486610644565b151561029f57600080fd5b6102a9878661073e565b15156102b457600080fd5b60008681526002602090815260408083208884529091529020548490116102da57600080fd5b600086815260026020908152604080832088845290915290208054859081106102ff57fe5b90600052602060002090600402019050806000018160030154816002806020026040519081016040529190828260026020028201915b815481526001909101906020018083116103355750505050509150925092505094509492505050565b600061036a848361073e565b151561037557600080fd5b506000918252600260209081526040808420928452919052902054919050565b6000546103aa90600160a060020a0316610856565b15156103b557600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008060006103f287610644565b15156103fd57600080fd5b610407888761073e565b151561041257600080fd5b60008781526002602090815260408083208984529091529020805490935061043d84600183016108b7565b5082546000198101925083908390811061045357fe5b600091825260209091206004909102019050610471818660026108e8565b50600381019390935550504260029091015550505050565b600154600090600160a060020a03166377a28bd783836040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156104df57600080fd5b6102c65a03f115156104f057600080fd5b50505060405180519392505050565b6000805461051590600160a060020a0316610856565b90505b90565b60005461053090600160a060020a0316610856565b151561053b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081600781111561057857fe5b60020a92915050565b600154600160a060020a031690565b61059a600761056a565b600154600160a060020a03166377a28bd78260006040516020015260405160e060020a63ffffffff841602815261ffff9091166004820152602401602060405180830381600087803b15156105ee57600080fd5b6102c65a03f115156105ff57600080fd5b50505060405180519050151561061457600080fd5b506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6003546000908190600160a060020a0316637423df3382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561069057600080fd5b6102c65a03f115156106a157600080fd5b50505060405180519050600160a060020a0316634bd5322b846000806040516040015260405160e060020a63ffffffff85160281526004808201848152916024019083908111156106ee57fe5b60ff168152602001925050506040805180830381600087803b151561071257600080fd5b6102c65a03f1151561072357600080fd5b50505060405180519060200180515050600090119392505050565b60008060008085600160a060020a031663c059853e8660006040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b151561079257600080fd5b6102c65a03f115156107a357600080fd5b5050506040518051906020018051935090915050600160a060020a038616637b5348c982846000806040516040015260405160e060020a63ffffffff861602815260048101848152602482018490529060440182600a81111561080257fe5b60ff16815260200193505050506040805180830381600087803b151561082757600080fd5b6102c65a03f1151561083857600080fd5b50505060405180519060200180515050600090119695505050505050565b600081600160a060020a031633600160a060020a03161480610889575081600160a060020a031632600160a060020a0316145b92915050565b604080519081016040526002815b6000815260001991909101906020018161089d5790505090565b8154818355818115116108e3576004028160040283600052602060002091820191016108e39190610928565b505050565b8260028101928215610918579160200282015b8281111561091857825182556020909201916001909101906108fb565b50610924929150610959565b5090565b61051891905b808211156109245760006109428282610973565b50600060028201819055600382015560040161092e565b61051891905b80821115610924576000815560010161095f565b5060008155600101600090555600a165627a7a723058202200af6580f30c3636812bfae6d67266cbfc5afb338a1b864958d39730d9d2e60029"};

var RoleStoreCompiled = {"abi":[{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"role","type":"uint16"}],"name":"setRole","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"getRole","outputs":[{"name":"role","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"role","type":"uint16"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"bytecode":"0x6060604052341561000f57600080fd5b60008054600160a060020a03191633600160a060020a0381169190911790915561004a90600760020a64010000000061020561004f82021704565b610093565b600160a060020a038216151561006457600080fd5b600160a060020a03919091166000908152600160205260409020805461ffff191661ffff909216919091179055565b610285806100a26000396000f3006060604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166315f924a98114610066578063442767331461008e5780634fb2e45d146100c457806377a28bd7146100e3575b600080fd5b341561007157600080fd5b61008c600160a060020a036004351661ffff60243516610111565b005b341561009957600080fd5b6100ad600160a060020a036004351661013f565b60405161ffff909116815260200160405180910390f35b34156100cf57600080fd5b61008c600160a060020a036004351661015e565b34156100ee57600080fd5b6100fd61ffff600435166101ad565b604051901515815260200160405180910390f35b60005461012690600160a060020a03166101cc565b151561013157600080fd5b61013b8282610205565b5050565b600160a060020a031660009081526001602052604090205461ffff1690565b60005461017390600160a060020a03166101cc565b151561017e57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806101b8610249565b9050600081841661ffff1611915050919050565b600081600160a060020a031633600160a060020a031614806101ff575081600160a060020a031632600160a060020a0316145b92915050565b600160a060020a038216151561021a57600080fd5b600160a060020a03919091166000908152600160205260409020805461ffff191661ffff909216919091179055565b60006102543261013f565b9050905600a165627a7a72305820f22d312ab42bcd4859dc5b00b4af7d0bbd9b3fcb0032415f06e8ceb84c236b260029"};

var securityInspectionDefault = "0x1349f3e1b8d71effb47b840594ff27da7e603d17";
var planStoreDefault = "0xd9d64b7dc034fafdba5dc2902875a67b5d586420";
var alcoholAndDrugStoreDefault = "0x8a5e2a6343108babed07899510fb42297938d41f";
var operationalStoreDefault = "0x938781b9796aea6376e40ca158f67fa89d5d8a18";
var equipmentStoreDefault = "0xfe0602d820f42800e3ef3f89e1c39cd15f78d283";
var cargoStoreDefault = "0x4d3bfd7821e237ffe84209d8e638f9f309865b87";
var issueStoreDefault = "0xa501afd7d6432718daf4458cfae8590d88de818e";
var roleStoreAddressDefault = "0x3950943d8d86267c04a4bba804f9f0b8a01c2fb8";
var issueEvidenceStoreDefault ="0xb81c1fea49fab3687941a4fb31027eabd98e66dc";
var reviewStoreDefault = "0x84272f3e148eb3f957e3df666d91a15a6bd1db7f";
var targetAnalysisStoreDefault = "0x57f6e9596693364d33fd7c35ae525568a350cbae";
var actionAnalysisStoreDefault  = "0xe62a84ad37f45ad4cb238192bb996ddc1afcb69a";
var icsAttachmentStoreDefault = "0xd0a5685a4ba479d0ff4e86ca8300738573816c63";
var isfAttachmentStoreDefault = "0x6585c8466ecd527dda9e09ebc1390ecab0844f2c";
var operationalEvidenceStoreDefault = "0xce1663b2f636a04fd661ff3cafd7a96458fe3696";
var equipmentEvidenceStoreDefault = "0x7e4255a77f5470ac83b7c69b017c7824434267e3";
var cargoEvidenceStoreDefault = "0xfc1684a8af3e6bf532482c356e5b2cef9cad144f";

var securityInspectionAddress = "";
var planStoreAddress = "";
var alcoholAndDrugStoreAddress = "";
var operationalStoreAddress = "";
var equipmentStoreAddress = "";
var cargoStoreAddress = "";
var issueStoreAddress = "";
var roleStoreAddress = "";
var issueEvidenceStoreAddress = "";
var reviewStoreAddress = "";
var targetAnalysisStoreAddress ="";
var actionAnalysisStoreAddress ="";
var isfAttachmentStoreAddress ="";
var icsAttachmentStoreAddress ="";
var operationalEvidenceStoreAddress ="";
var equipmentEvidenceStoreAddress ="";
var cargoEvidenceStoreAddress ="";

var owner = web3.personal.listAccounts[0];
var roleRS = owner;
var roleDG = web3.personal.listAccounts[1];
var roleRO = web3.personal.listAccounts[2];
var roleRRA = web3.personal.listAccounts[3];
var roleINSEG = web3.personal.listAccounts[4];
var roleDPSEG = web3.personal.listAccounts[5];
var roleCM = web3.personal.listAccounts[6];
var rolePF = web3.personal.listAccounts[7];

console.log("Unlocking roleRS (owner)");
web3.personal.unlockAccount(owner, "", 15000);
console.log("Unlocking roleRO");
web3.personal.unlockAccount(roleRO, "garfield123", 15000);
console.log("Unlocking rolePF");
web3.personal.unlockAccount(rolePF, "", 15000);

var securityInspectionContract = web3.eth.contract(SecurityInspectionCompiled.abi);
var planStoreContract = web3.eth.contract(PlanStoreCompiled.abi);
var alcoholAndDrugStoreContract = web3.eth.contract(AlcoholAndDrugStoreCompiled.abi);
var operationalStoreContract = web3.eth.contract(OperationalStoreCompiled.abi);
var equipmentStoreContract = web3.eth.contract(EquipmentStoreCompiled.abi);
var cargoStoreContract = web3.eth.contract(CargoStoreCompiled.abi);
var issueStoreContract = web3.eth.contract(IssueStoreCompiled.abi);
var roleStoreContract = web3.eth.contract(RoleStoreCompiled.abi);
var issueEvidenceStoreContract = web3.eth.contract(IssueEvidenceStoreCompiled.abi);
var reviewStoreContract = web3.eth.contract(ReviewStoreCompiled.abi);
var targetAnalysisStoreContract = web3.eth.contract(TargetAnalysisStoreCompiled.abi);
var actionAnalysisStoreContract = web3.eth.contract(ActionAnalysisStoreCompiled.abi);
var isfAttachmentStoreContract = web3.eth.contract(IsfAttachmentStoreCompiled.abi);
var icsAttachmentStoreContract = web3.eth.contract(IcsAttachmentStoreCompiled.abi);
var operationalEvidenceStoreContract = web3.eth.contract(OperationalEvidenceStoreCompiled.abi);
var equipmentEvidenceStoreContract = web3.eth.contract(EquipmentEvidenceStoreCompiled.abi);
var cargoEvidenceStoreContract = web3.eth.contract(CargoEvidenceStoreCompiled.abi);

var securityInspection = {};        // eth.contract(SecurityInspectionCompiled.abi).at(securityInspectionAddress);
var planStore = {}; // eth.contract(PlanStoreCompiled.abi).at(planStoreAddress);
var alcoholAndDrugStore = {};   // eth.contract(AlcoholAndDrugStoreCompiled.abi).at(alcoholAndDrugStoreAddress);
var operationalStore = {}; // eth.contract(OperationalStoreCompiled.abi).at(operationalStoreAddress);
var equipmentStore = {}; // eth.contract(EquipmentStoreCompiled.abi).at(equipmentStoreAddress);
var cargoStore = {}; // eth.contract(CargoStoreCompiled.abi).at(cargoStoreAddress);
var issueStore = {}; // eth.contract(IssueStoreCompiled.abi).at(issueStoreAddress);
var roleStore = {};     // eth.contract(RoleStoreCompiled.abi).at(roleStoreAddress);
var issueEvidenceStore = {};   // eth.contract(IssueEvidenceStoreCompiled.abi).at(issueEvidenceStoreAddress);
var reviewStore = {};   // eth.contract(ReviewStoreCompiled.abi).at(reviewStoreAddress);
var targetAnalysisStore = {};   // eth.contract(TargetAnalysisStoreCompiled.abi).at(targetAnalysisStoreAddress);
var actionAnalysisStore = {};   // eth.contract(ActionAnalysisStoreCompiled.abi).at(actionAnalysisStoreAddress);
var isfAttachmentStore = {};   // eth.contract(IsfAttachmentStoreCompiled.abi).at(isfAttachmentStoreAddress);
var icsAttachmentStore = {};   // eth.contract(IcsAttachmentStoreCompiled.abi).at(icsAttachmentStoreAddress);
var operationalEvidenceStore = {};   // eth.contract(OperationalEvidenceStoreCompiled.abi).at(operationalEvidenceStoreAddress);
var equipmentEvidenceStore = {};   // eth.contract(EquipmentEvidenceStoreCompiled.abi).at(equipmentEvidenceStoreAddress);
var cargoEvidenceStore = {};   // eth.contract(CargoEvidenceStoreCompiled.abi).at(cargoEvidenceStoreAddress);

var deployGas = 6712390;
var transGas = 600000;

var inspections = [];

var InspectionStoreName = {
    'Operational' : 'iso',
    'Equipment'   : 'isee',
	'Cargo'       : 'iscc'
};

var AnalysisStoreName = {
    'TargetAnalysis'    : 'target',
    'ActionAnalysis'    : 'actions'
};

var AttachmentStoreName = {
    'IcsAttachment'     : 'ics',
	'IsfAttachment'     : 'isf'
};

var Actor = {
    'NONE' : 0,
    'PF' : 1,
    'CM' : 2,
    'INSEG' : 4,
    'DPSEG' : 8,
    'RRA' : 16,
    'RO' : 32,
    'DG' : 64,
    'RS' : 128
};

var ControlStatusFlag = {
	'NONE' : 0,
	'Planned' : 1,
	'Created' : 2,
	'AcceptedControl' : 4,
	'InProcessTest1' : 8,
	'FailedTest1' : 16,
	'InProcessTest2' : 32,
	'FailedTest2' : 64,
	'NotifiedTest2RS' : 128,
	'NotifiedTest2RO' : 256,
	'InProcessTestCM' : 512,
	'FailedTestCM' : 1024,
	'DisciplinaryStarted' : 2048,
	'RejectedControl' : 4096,
	'NotifiedRejectRS' : 8192,
	'NotifiedRejectRO' : 16348,
	'InProcessPFTest' : 32768,
	'FailedPFTest' : 65536,
	'PassedPFTest' : 131072,
	'NotifiedPFTestPF' : 262144,
	'NotifiedPFTestRS' : 524288,
	'Passed' : 1048576,
	'ControlRecordStored' : 2097152,
	'StatsStored' : 4194304,
	'Stored' : 8388608
}

var ReviewStatusFlag = {
	'NONE' : 0,
	'Created' : 1,
	'ReviewesNotified' : 2,
	'ReportDone' : 4,
	'ReportApproved' : 8,
	'AESFNotified': 16,
	'Terminated' : 32
}

var InspectionStatusFlag = {
	'NONE': 0,
    'Created': 1,
    'Planned': 2,
    'Assigned': 4,
    'InspectionDone': 8,
    'RegistratorRegistered': 16,
    'RegisterDone': 32,
    'ReportDone': 64,
    'InProcess': 128,
    'Finished': 256,
    'StatsStored': 512,
    'InspectionStored': 1024
}

var PlanStatus = {
	'Created' : 0,
	'Approved' : 1,
	'InProcess' : 2,
	'Rejected' : 3,
	'Terminated' : 4
};

var PlanAction = {
	'None' : 0,
	'Create' : 1,
	'Confirm' : 2,
	'Start' : 3,
	'Reject' : 4,
	'Terminate' : 5
};
var ControlStatus = {
	'Planned' : 0,
	'Created' : 1,
	'AcceptedControl' : 2,
	'InProcessTest1' : 3,
	'FailedTest1' : 4,
	'InProcessTest2' : 5,
	'FailedTest2' : 6,
	'NotifiedTest2RS' : 7,
	'NotifiedTest2RO' : 8,
	'InProcessTestCM' : 9,
	'FailedTestCM' : 10,
	'DisciplinaryStarted' : 11,
	'RejectedControl' : 12,
	'NotifiedRejectRS' : 13,
	'NotifiedRejectRO' : 14,
	'InProcessPFTest' : 15,
	'FailedPFTest' : 16,
	'PassedPFTest' : 17,
	'NotifiedPFTestPF' : 18,
	'NotifiedPFTestRS' : 19,
	'Passed' : 20,
	'ControlRecordStored' : 21,
	'StatsStored' : 22,
	'Stored' : 23
};

var ControlAction = {
	'None' : 0,
	'Plan' : 1,
	'Create' : 2,
	'Accept' : 3,
	'DoTest' : 4,
	'Fail' : 5,
	'Pass' : 6,
	'Start' : 7,
	'Reject' : 8,
	'NotifyRO' : 9,
	'NotifyRS' : 10,
	'NotifyPF' : 11,
	'DoControlRecord' : 12,
	'DoStats' : 13,
	'Store' : 14
};

var ControlType = {
	'Random' : 0,
	'Accident' : 1,
	'Incident' : 2
};

var InspectionStatus = {
    'Created': 0,
    'Planned': 1,
    'Assigned': 2,
    'InspectionDone': 3,
    'RegistratorRegistered': 4,
    'RegisterDone': 5,
    'ReportDone': 6,
    'InProcess': 7,
    'Finished': 8,
    'StatsStored': 9,
    'InspectionStored': 10
};

var InspectionAction = {
    'None': 0,
    'Create': 1,
    'Plan': 2,
    'Assign': 3,
    'DoInspection': 4,
    'DoRegistratorRecord': 5,
    'DoRegister': 6,
    'DoReport': 7,
    'Start': 8,
    'Finish': 9,
    'DoStats': 10,
    'Store': 11
};

var EquipmentInspectionType = {
	'NONE' : 0
};

var OperationalInspectionType = {
	'NONE' : 0,
	'ISOG': 1,
	'ISORT': 2
};

var CargoInspectionType = {
	'NONE' : 0,
	'ISCC' : 1,
	'ISRC' : 2,
	'ISVRC': 3
};

var IssueStatus = {
	'Created' : 0,
	'InProcess' : 1,
	'Terminated' : 2
};

var IssueAction = {
	'None' : 0,
	'Create' : 1,
	'Trace' : 2,
	'Terminate' : 3
};

var ReviewStatus = {
	'Created' : 0,
	'ReviewesNotified' : 1,
	'ReportDone' : 2,
	'ReportApproved' : 3,
	'AESFNotified' : 4,
	'Terminated' : 5
};

var ReviewAction = {
	'None' : 0,
	'Create' : 1,
	'NotifyGM' : 2,
	'DoAnnualReport' : 3,
	'AproveAnnualReport' : 4,
	'NotifyReportAESF' : 5,
	'Terminate' : 6
};

var PlanStatusFlags = {
	'NONE' : 0,
	'Created' : 1,
	'Approved' : 2,
	'InProcess' : 4,
	'Rejected' : 8,
	'Terminated' : 16
};

var deploySecurityInspection = function (owner, deploySecurityInspectionCallback) {
    securityInspectionContract.new({
        from: owner,
        data: SecurityInspectionCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating SecurityInspection contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for SecurityInspection. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('SecurityInspection contract mined! address: "' + contract.address + '"\n');
                deploySecurityInspectionCallback(contract);
            }
        }
    });
};

var deployPlanStore = function (owner, deployPlanStoreCallback) {
    planStoreContract.new({
        from: owner,
        data: PlanStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating PlanStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for PlanStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('PlanStore contract mined! address: "' + contract.address + '"\n');
                deployPlanStoreCallback(contract);
            }
        }
    });
};

var deployAlcoholAndDrugStore = function (owner, deployAlcoholAndDrugStoreCallback) {
    alcoholAndDrugStoreContract.new({
        from: owner,
        data: AlcoholAndDrugStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating AlcoholAndDrugStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for AlcoholAndDrugStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('AlcoholAndDrugStore contract mined! address: "' + contract.address + '"\n');
                deployAlcoholAndDrugStoreCallback(contract);
            }
        }
    });
};

var deployOperationalStore = function (owner, deployOperationalStoreCallback) {
    operationalStoreContract.new({
        from: owner,
        data: OperationalStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating OperationalStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for OperationalStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('OperationalStore contract mined! address: "' + contract.address + '"\n');
                deployOperationalStoreCallback(contract);
            }
        }
    });
};

var deployEquipmentStore = function (owner, deployEquipmentStoreCallback) {
    equipmentStoreContract.new({
        from: owner,
        data: EquipmentStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating EquipmentStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for EquipmentStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('EquipmentStore contract mined! address: "' + contract.address + '"\n');
                deployEquipmentStoreCallback(contract);
            }
        }
    });
};

var deployCargoStore = function (owner, deployCargoStoreCallback) {
    cargoStoreContract.new({
        from: owner,
        data: CargoStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating CargoStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for CargoStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('CargoStore contract mined! address: "' + contract.address + '"\n');
                deployCargoStoreCallback(contract);
            }
        }
    });
};

var deployIssueStore = function (owner, deployIssueStoreCallback) {
    issueStoreContract.new({
        from: owner,
        data: IssueStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating IssueStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for IssueStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('IssueStore contract mined! address: "' + contract.address + '"\n');
                deployIssueStoreCallback(contract);
            }
        }
    });
};

var deployRoleStore = function (owner, deployRoleStoreCallback) {
    roleStoreContract.new({
        from: owner,
        data: RoleStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating RoleStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for RoleStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('RoleStore contract mined! address: "' + contract.address + '"\n');
                deployRoleStoreCallback(contract);
            }
        }
    });
};

var deployIssueEvidenceStore = function (owner, deployIssueEvidenceStoreCallback) {
    issueEvidenceStoreContract.new({
        from: owner,
        data: IssueEvidenceStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating IssueEvidenceStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for IssueEvidenceStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('IssueEvidenceStore contract mined! address: "' + contract.address + '"\n');
                deployIssueEvidenceStoreCallback(contract);
            }
        }
    });
};

var deployReviewStore = function (owner, deployReviewStoreCallback) {
    reviewStoreContract.new({
        from: owner,
        data: ReviewStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating ReviewStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for ReviewStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('ReviewStore contract mined! address: "' + contract.address + '"\n');
                deployReviewStoreCallback(contract);
            }
        }
    });
};

var deployTargetAnalysisStore = function (owner, deployTargetAnalysisStoreCallback) {
    targetAnalysisStoreContract.new({
        from: owner,
        data: TargetAnalysisStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating TargetAnalysisStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for TargetAnalysisStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('TargetAnalysisStore contract mined! address: "' + contract.address + '"\n');
                deployTargetAnalysisStoreCallback(contract);
            }
        }
    });
};

var deployActionAnalysisStore = function (owner, deployActionAnalysisStoreCallback) {
    actionAnalysisStoreContract.new({
        from: owner,
        data: ActionAnalysisStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating ActionAnalysisStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for ActionAnalysisStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('ActionAnalysisStore contract mined! address: "' + contract.address + '"\n');
                deployActionAnalysisStoreCallback(contract);
            }
        }
    });
};

var deployIsfAttachmentStore = function (owner, deployIsfAttachmentStoreCallback) {
    isfAttachmentStoreContract.new({
        from: owner,
        data: IsfAttachmentStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating IsfAttachmentStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for IsfAttachmentStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('IsfAttachmentStore contract mined! address: "' + contract.address + '"\n');
                deployIsfAttachmentStoreCallback(contract);
            }
        }
    });
};

var deployIcsAttachmentStore = function (owner, deployIcsAttachmentStoreCallback) {
    icsAttachmentStoreContract.new({
        from: owner,
        data: IcsAttachmentStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating IcsAttachmentStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for IcsAttachmentStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('IcsAttachmentStore contract mined! address: "' + contract.address + '"\n');
                deployIcsAttachmentStoreCallback(contract);
            }
        }
    });
};

var deployOperationalEvidenceStore = function (owner, deployOperationalEvidenceStoreCallback) {
    operationalEvidenceStoreContract.new({
        from: owner,
        data: OperationalEvidenceStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating OperationalEvidenceStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for OperationalEvidenceStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('OperationalEvidenceStore contract mined! address: "' + contract.address + '"\n');
                deployOperationalEvidenceStoreCallback(contract);
            }
        }
    });
};

var deployEquipmentEvidenceStore = function (owner, deployEquipmentEvidenceStoreCallback) {
    equipmentEvidenceStoreContract.new({
        from: owner,
        data: EquipmentEvidenceStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating EquipmentEvidenceStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for EquipmentEvidenceStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('EquipmentEvidenceStore contract mined! address: "' + contract.address + '"\n');
                deployEquipmentEvidenceStoreCallback(contract);
            }
        }
    });
};

var deployCargoEvidenceStore = function (owner, deployCargoEvidenceStoreCallback) {
    cargoEvidenceStoreContract.new({
        from: owner,
        data: CargoEvidenceStoreCompiled.bytecode,
        gas: deployGas
    }, function (e, contract) {
        if (e) {
            console.log("Error creating CargoEvidenceStore contract ", e);
        } else {
            if (!contract.address) {
                console.log('Waiting for CargoEvidenceStore. TransactionHash: ' + contract.transactionHash);
            } else {
                console.log('CargoEvidenceStore contract mined! address: "' + contract.address + '"\n');
                deployCargoEvidenceStoreCallback(contract);
            }
        }
    });
};


var linkContracts = function (securityInspection, planStore, alcoholAndDrugStore, operationalStore, equipmentStore, cargoStore, issueStore, roleStore, issueEvidenceStore, reviewStore, targetAnalysisStore, actionAnalysisStore, icsAttachmentStore, isfAttachmentStore, operationalEvidenceStore, equipmentEvidenceStore, cargoEvidenceStore) {

    console.log('Linking contracts ');
    securityInspection.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    planStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    alcoholAndDrugStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    operationalStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    equipmentStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    cargoStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    issueStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    issueEvidenceStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    reviewStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    targetAnalysisStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    actionAnalysisStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    icsAttachmentStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    isfAttachmentStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    operationalEvidenceStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    equipmentEvidenceStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    cargoEvidenceStore.setRoleContract(roleStore.address, {from: owner, gas: transGas});
    console.log('RoleStore in SecurityInspection and stores done.');
    securityInspection.setPlanContract(planStore.address, {from: owner, gas: transGas});
    securityInspection.setAlcoholAndDrugContract(alcoholAndDrugStore.address, {from: owner, gas: transGas});
    securityInspection.setInspectionContract(InspectionStoreName.Operational, operationalStore.address, {from: owner, gas: transGas});
    securityInspection.setInspectionContract(InspectionStoreName.Equipment, equipmentStore.address, {from: owner, gas: transGas});
	securityInspection.setInspectionContract(InspectionStoreName.Cargo, cargoStore.address, {from: owner, gas: transGas});
    securityInspection.setIssueContract(issueStore.address, {from: owner, gas: transGas});
    securityInspection.setIssueEvidenceContract(issueEvidenceStore.address, {from: owner, gas: transGas});
    securityInspection.setReviewContract(reviewStore.address, {from: owner, gas: transGas});
    securityInspection.setAnalysisContract(AnalysisStoreName.TargetAnalysis, targetAnalysisStore.address, {from: owner, gas: transGas});
    securityInspection.setAnalysisContract(AnalysisStoreName.ActionAnalysis, actionAnalysisStore.address, {from: owner, gas: transGas});
    securityInspection.setAttachmentContract(AttachmentStoreName.IcsAttachment, icsAttachmentStore.address, {from: owner, gas: transGas});
    securityInspection.setAttachmentContract(AttachmentStoreName.IsfAttachment, isfAttachmentStore.address, {from: owner, gas: transGas});
    securityInspection.setInspectionEvidenceContract(InspectionStoreName.Operational, operationalEvidenceStore.address, {from: owner, gas: transGas});
    securityInspection.setInspectionEvidenceContract(InspectionStoreName.Equipment, equipmentEvidenceStore.address, {from: owner, gas: transGas});
	 securityInspection.setInspectionEvidenceContract(InspectionStoreName.Cargo, cargoEvidenceStore.address, {from: owner, gas: transGas});
    console.log('PlanStore, OperationalStore, Equipment, Cargo, Issue, AlcoholAndDrugStore, IssueEvicence, Review, Target, Action, Ics, Isf, OperationalEvidence, EquimentEvidence, CargoEvidence in SecurityInspection done.');
    planStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in PlanStore done.');
    alcoholAndDrugStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in AlcoholAndDrugStore done.');
    operationalStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in OperationalStore done.');
    equipmentStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in EquipmentStore done.');
    cargoStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in CargoStore done.');
    issueStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in IssueStore done.');
    issueEvidenceStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in IssueEvidenceStore done.');
    reviewStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in ReviewStore done.');
    targetAnalysisStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in TargetAnalysisStore done.');
    actionAnalysisStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in ActionAnalysisStore done.');
    icsAttachmentStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in IcsAttachmentStore done.');
    isfAttachmentStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in IsfAttachmentStore done.');
    operationalEvidenceStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in OperationalEvidenceStore done.');
    equipmentEvidenceStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in EquipmentEvidenceStore done.');
    cargoEvidenceStore.setContractStore(securityInspection.address, {from: owner, gas: transGas});
    console.log('SecurityInspection in CargoEvidenceStore done.');


    securityInspectionAddress = securityInspection.address;
    planStoreAddress = planStore.address;
    alcoholAndDrugStoreAddress = alcoholAndDrugStore.address;
    roleStoreAddress = roleStore.address;
    operationalStoreAddress = operationalStore.address;
    equipmentStoreAddress = equipmentStore.address;
    cargoStoreAddress = cargoStore.address;
    issueStoreAddress = issueStore.address;
    issueEvidenceStoreAddress = issueEvidenceStore.address;
    reviewStoreAddress = reviewStore.address;
    targetAnalysisStoreAddress = targetAnalysisStore.address;
    actionAnalysisStoreAddress = actionAnalysisStore.address;
    icsAttachmentStoreAddress = icsAttachmentStore.address;
    isfAttachmentStoreAddress = isfAttachmentStore.address;
    operationalEvidenceStoreAddress = operationalEvidenceStore.address;
    equipmentEvidenceStoreAddress = equipmentEvidenceStore.address;
    cargoEvidenceStoreAddress = cargoEvidenceStore.address;

    // Print Info
    info();

};

var deploy = function() {
    console.log('Calling contract creation');
    deploySecurityInspection(owner, function(securityInspection) {
        console.log('SecurityInspection ready, calling planStore');
        deployPlanStore(owner, function(planStore) {
            console.log('planStore ready, calling alcoholAndDrugStore');
            deployAlcoholAndDrugStore(owner, function(alcoholAndDrugStore) {
                console.log('alcoholAndDrugStore ready, calling operationalStore');
                deployOperationalStore(owner, function(operationalStore) {
                    console.log('operationalStore ready, calling equipmentStore');
                    deployEquipmentStore(owner, function(equipmentStore) {
                        console.log('equipmentStore ready, calling cargoStore');
                        deployCargoStore(owner, function(cargoStore) {
                            console.log('cargoStore ready, calling issueStore');
                            deployIssueStore(owner, function(issueStore) {
                                console.log('issueStore ready, calling roleStore');
                                deployRoleStore(owner, function(roleStore) {
                                    console.log('roleStore ready, calling issueEvidenceStore');
                                    deployIssueEvidenceStore(owner, function(issueEvidenceStore) {
                                        console.log('issueEvidenceStore ready, calling reviewStore');
                                        deployReviewStore(owner, function(reviewStore) {
                                            console.log('reviewStore ready, calling targetAnalysisStore');
                                            deployTargetAnalysisStore(owner, function(targetAnalysisStore) {
                                                console.log('targetAnalysisStore ready, calling actionAnalysisStore');
                                                deployActionAnalysisStore(owner, function(actionAnalysisStore) {
                                                    console.log('actionAnalysisStore ready, calling icsAttachmentStore');
                                                    deployIcsAttachmentStore(owner, function(icsAttachmentStore) {
                                                        console.log('icsAttachmentStore ready, calling isfAttachmentStore');
                                                        deployIsfAttachmentStore(owner, function(isfAttachmentStore) {
                                                            console.log('isfAttachmentStore ready, calling operationalEvidenceStore');
                                                            deployOperationalEvidenceStore(owner, function(operationalEvidenceStore) {
                                                                console.log('operationalEvidenceStore ready, calling equipmentEvidenceStore');
                                                                deployEquipmentEvidenceStore(owner, function(equipmentEvidenceStore) {
                                                                    console.log('equipmentEvidenceStore ready, calling cargoEvidenceStore');
                                                                    deployCargoEvidenceStore(owner, function(cargoEvidenceStore) {
                                                                        console.log('cargoEvidenceStore ready, final config');
                                                                        linkContracts(securityInspection, planStore, alcoholAndDrugStore, operationalStore, equipmentStore, cargoStore, issueStore, roleStore, issueEvidenceStore, reviewStore, targetAnalysisStore, actionAnalysisStore, icsAttachmentStore, isfAttachmentStore, operationalEvidenceStore, equipmentEvidenceStore, cargoEvidenceStore);
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

// ========================================================================

var planStorePromotions = function (planStore) {
    console.log('Setting planStore Promotions ... ');
    //                       	PlanAction,         currentStatus,        onlyBy,   	         finalStatus,       			position,			reviewStatus,							controlStatus,			inspectionStatus
    planStore.setPromotion(PlanAction.Create,    PlanStatus.Created,   Actor.RS,	           PlanStatus.Created,     PlanStatus.Created,		ReviewStatusFlag.NONE,		        ControlStatusFlag.NONE,		InspectionStatusFlag.NONE,			   {from: owner, gas: transGas});
    planStore.setPromotion(PlanAction.Confirm,   PlanStatus.Created,   Actor.RS | Actor.DG,	   PlanStatus.Approved,    PlanStatus.Approved,	    ReviewStatusFlag.NONE,		        ControlStatusFlag.NONE,		InspectionStatusFlag.NONE, 			   {from: owner, gas: transGas});
    planStore.setPromotion(PlanAction.Reject,    PlanStatus.Created,   Actor.RS | Actor.DG,	   PlanStatus.Rejected,    PlanStatus.Rejected,	    ReviewStatusFlag.NONE,		        ControlStatusFlag.NONE,		InspectionStatusFlag.NONE, 			   {from: owner, gas: transGas});
    planStore.setPromotion(PlanAction.Start,   	 PlanStatus.Approved,  Actor.RS,	           PlanStatus.InProcess,   PlanStatus.InProcess,	ReviewStatusFlag.NONE,		        ControlStatusFlag.NONE,		InspectionStatusFlag.NONE, 			   {from: owner, gas: transGas});
    planStore.setPromotion(PlanAction.Terminate, PlanStatus.InProcess, Actor.RS,	           PlanStatus.Terminated,  PlanStatus.Terminated,	ReviewStatusFlag.ReportApproved,    ControlStatusFlag.Stored,	InspectionStatusFlag.InspectionStored, {from: owner, gas: transGas});
    var promo = planStore.getPromotion(PlanAction.Terminate,  PlanStatus.InProcess, {from: owner, gas: transGas});
    result = assert(promo[0] == 128, 'Error in setPromotions');
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);
};

var alcoholAndDrugStorePromotions = function (alcoholAndDrugStore) {
    console.log('Setting AlcoholAndDrugStore Promotions ... ');
    //                              Action                                currentStatus                 onlyBy       finalStatus                          position                          planStatus
    alcoholAndDrugStore.setPromotion(ControlAction.Create,          ControlStatus.Created,             Actor.RS, ControlStatus.Created,             ControlStatus.Created,             PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Create,          ControlStatus.Planned,             Actor.RS, ControlStatus.Created,             ControlStatus.Planned,             PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Accept,          ControlStatus.Created,             Actor.RS, ControlStatus.AcceptedControl,     ControlStatus.AcceptedControl,     PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.DoTest,          ControlStatus.AcceptedControl,     Actor.RS, ControlStatus.InProcessTest1,      ControlStatus.InProcessTest1,      PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Fail,            ControlStatus.InProcessTest1,      Actor.RS, ControlStatus.FailedTest1,         ControlStatus.FailedTest1,         PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.DoTest,          ControlStatus.FailedTest1,         Actor.RS, ControlStatus.InProcessTest2,      ControlStatus.InProcessTest2,      PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Fail,            ControlStatus.InProcessTest2,      Actor.RS, ControlStatus.FailedTest2,         ControlStatus.FailedTest2,         PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.NotifyRO,        ControlStatus.FailedTest2,         Actor.RS, ControlStatus.FailedTest2,         ControlStatus.NotifiedTest2RO,     PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.NotifyRS,        ControlStatus.FailedTest2,         Actor.RS, ControlStatus.FailedTest2,         ControlStatus.NotifiedTest2RS,     PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.DoTest,          ControlStatus.FailedTest2,         Actor.RS, ControlStatus.InProcessTestCM,     ControlStatus.InProcessTestCM,     PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Fail,            ControlStatus.InProcessTestCM,     Actor.RS, ControlStatus.FailedTestCM,        ControlStatus.FailedTestCM,        PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Start,           ControlStatus.FailedTestCM,        Actor.RS, ControlStatus.DisciplinaryStarted, ControlStatus.DisciplinaryStarted, PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Pass,            ControlStatus.InProcessTest1,      Actor.RS, ControlStatus.Passed,              ControlStatus.Passed,              PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Pass,            ControlStatus.InProcessTest2,      Actor.RS, ControlStatus.Passed,              ControlStatus.Passed,              PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Pass,            ControlStatus.InProcessTestCM,     Actor.RS, ControlStatus.Passed,              ControlStatus.Passed,              PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.DoControlRecord, ControlStatus.AcceptedControl,     Actor.RS, ControlStatus.ControlRecordStored, ControlStatus.ControlRecordStored, PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.DoControlRecord, ControlStatus.Passed,              Actor.RS, ControlStatus.ControlRecordStored, ControlStatus.ControlRecordStored, PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Reject,          ControlStatus.Created,             Actor.RS, ControlStatus.RejectedControl,     ControlStatus.RejectedControl,     PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.NotifyRO,        ControlStatus.RejectedControl,     Actor.RS, ControlStatus.RejectedControl,     ControlStatus.NotifiedRejectRO,    PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.NotifyRS,        ControlStatus.RejectedControl,     Actor.RS, ControlStatus.RejectedControl,     ControlStatus.NotifiedRejectRS,    PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.DoTest,          ControlStatus.RejectedControl,     Actor.RS, ControlStatus.InProcessPFTest,     ControlStatus.InProcessPFTest,     PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Fail,            ControlStatus.InProcessPFTest,     Actor.RS, ControlStatus.FailedPFTest,        ControlStatus.FailedPFTest,        PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.NotifyPF,        ControlStatus.FailedPFTest,        Actor.RS, ControlStatus.FailedPFTest,        ControlStatus.NotifiedPFTestPF,    PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.NotifyRS,        ControlStatus.FailedPFTest,        Actor.RS, ControlStatus.FailedPFTest,        ControlStatus.NotifiedPFTestRS,    PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Start,           ControlStatus.FailedPFTest,        Actor.RS, ControlStatus.DisciplinaryStarted, ControlStatus.DisciplinaryStarted, PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Pass,            ControlStatus.InProcessPFTest,     Actor.RS, ControlStatus.PassedPFTest,        ControlStatus.PassedPFTest,        PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.NotifyPF,        ControlStatus.PassedPFTest,        Actor.RS, ControlStatus.PassedPFTest,        ControlStatus.NotifiedPFTestPF,    PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.NotifyRS,        ControlStatus.PassedPFTest,        Actor.RS, ControlStatus.PassedPFTest,        ControlStatus.NotifiedPFTestRS,    PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.DoControlRecord, ControlStatus.PassedPFTest,        Actor.RS, ControlStatus.ControlRecordStored, ControlStatus.ControlRecordStored, PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.DoStats,         ControlStatus.ControlRecordStored, Actor.RS, ControlStatus.StatsStored,         ControlStatus.StatsStored,         PlanStatusFlags.InProcess,         {from: owner, gas: transGas});
    alcoholAndDrugStore.setPromotion(ControlAction.Store,           ControlStatus.StatsStored,         Actor.RS, ControlStatus.Stored,              ControlStatus.Stored,              PlanStatusFlags.InProcess,         {from: owner, gas: transGas});

    var promo = alcoholAndDrugStore.getPromotion(ControlAction.Store,  ControlStatus.StatsStored, {from: owner, gas: transGas});
    result = assert(promo[0] == 128, 'Error in setPromotions');
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);
};

var inspectionStorePromotions = function (store, name) {

    var setPromo = function(action, currentStatus, onlyBy, finalStatus, position, planStatus) {
        store.setPromotion(action, currentStatus, onlyBy, finalStatus, position, planStatus, {from: owner, gas: transGas});
        var promo = store.getPromotion(action, currentStatus, {from: owner, gas: transGas});
        if((promo[0] != onlyBy) || (promo[1] != finalStatus) || (promo[2] != position) || (promo[3] != planStatus)) {
            console.log('---------------------------------------------------------------------');
            console.log('Promotion ' + action + ' to ' + currentStatus + ' failed ');
            console.log('Expected: ' + onlyBy +', ' + finalStatus +', ' + position + planStatus);
            console.log('Get: ' + promo[0] +', ' + promo[1] +', ' + promo[2] + promo[3]);
            console.log('---------------------------------------------------------------------');
        }
    }

    console.log('Setting InspectionStore ' + name + ' Promotions ... ');
    //                              Action                                currentStatus                 onlyBy       finalStatus                          position                                        planStatus
    setPromo(InspectionAction.Create,                 InspectionStatus.Planned,               Actor.RS,   InspectionStatus.Created,               InspectionStatus.Created,                      PlanStatusFlags.InProcess);
    setPromo(InspectionAction.Plan,                   InspectionStatus.Created,               Actor.RS,   InspectionStatus.Planned,               InspectionStatus.Planned,                      PlanStatusFlags.InProcess);
    setPromo(InspectionAction.Assign,                 InspectionStatus.Planned,               Actor.RS,   InspectionStatus.Assigned,              InspectionStatus.Assigned,                     PlanStatusFlags.InProcess);
    setPromo(InspectionAction.DoInspection,           InspectionStatus.Assigned,              Actor.RS,   InspectionStatus.InspectionDone,        InspectionStatus.InspectionDone,               PlanStatusFlags.InProcess);
    setPromo(InspectionAction.DoRegistratorRecord,    InspectionStatus.InspectionDone,        Actor.RS,   InspectionStatus.RegistratorRegistered, InspectionStatus.RegistratorRegistered,        PlanStatusFlags.InProcess);
    setPromo(InspectionAction.DoRegister,             InspectionStatus.InspectionDone,        Actor.RS,   InspectionStatus.RegisterDone,          InspectionStatus.RegisterDone,                 PlanStatusFlags.InProcess);
    setPromo(InspectionAction.DoRegister,             InspectionStatus.RegistratorRegistered, Actor.RS,   InspectionStatus.RegisterDone,          InspectionStatus.RegisterDone,                 PlanStatusFlags.InProcess);
    setPromo(InspectionAction.DoReport,               InspectionStatus.InspectionDone,        Actor.RS,   InspectionStatus.ReportDone,            InspectionStatus.ReportDone,                   PlanStatusFlags.InProcess);
    setPromo(InspectionAction.DoReport,               InspectionStatus.RegisterDone,          Actor.RS,   InspectionStatus.ReportDone,            InspectionStatus.ReportDone,                   PlanStatusFlags.InProcess);
    setPromo(InspectionAction.DoStats,                InspectionStatus.ReportDone,            Actor.RS,   InspectionStatus.StatsStored,           InspectionStatus.StatsStored,                  PlanStatusFlags.InProcess);
    setPromo(InspectionAction.Start,                  InspectionStatus.ReportDone,            Actor.RS,   InspectionStatus.InProcess,             InspectionStatus.InProcess,                    PlanStatusFlags.InProcess);
    setPromo(InspectionAction.Finish,                 InspectionStatus.InProcess,             Actor.RS,   InspectionStatus.Finished,              InspectionStatus.Finished,                     PlanStatusFlags.InProcess);
    setPromo(InspectionAction.DoStats,                InspectionStatus.Finished,              Actor.RS,   InspectionStatus.StatsStored,           InspectionStatus.StatsStored,                  PlanStatusFlags.InProcess);
    setPromo(InspectionAction.Store,                  InspectionStatus.StatsStored,           Actor.RS,   InspectionStatus.InspectionStored,      InspectionStatus.InspectionStored,             PlanStatusFlags.InProcess);

    var promo = store.getPromotion(InspectionAction.Store,  InspectionStatus.StatsStored, {from: owner, gas: transGas});
    result = assert(promo[0] == 128, 'Error in setPromotions');
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);
};

var issueStorePromotions = function (issuestore) {

    console.log('Setting IssueStore Promotions ... ');
    //                              Action                                currentStatus                 onlyBy       finalStatus                          position
    issuestore.setPromotion(IssueAction.Create   ,                  IssueStatus.Created  ,          Actor.RS,   IssueStatus.Created,        InspectionStatus.InProcess,     {from: owner, gas: transGas});
    issuestore.setPromotion(IssueAction.Trace    ,                  IssueStatus.Created  ,          Actor.RS,   IssueStatus.InProcess,      InspectionStatus.InProcess,     {from: owner, gas: transGas});
    issuestore.setPromotion(IssueAction.Terminate,                  IssueStatus.InProcess,          Actor.RS,   IssueStatus.Terminated,     InspectionStatus.InProcess,     {from: owner, gas: transGas});

    var promo = issuestore.getPromotion(IssueAction.Terminate,  IssueStatus.InProcess, {from: owner, gas: transGas});
    result = assert(promo[0] == 128, 'Error in setPromotions');
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);
};

var reviewStorePromotions = function (reviewstore) {

    console.log('Setting ReviewStore Promotions ... ');
    //                             ReviewAction,                    currentStatus,                   onlyBy,                   finalStatus,                   position,                      planStatus,                  user
		reviewstore.setPromotion(ReviewAction.Create,             ReviewStatus.Created,            Actor.RS,                   ReviewStatus.Created,          ReviewStatus.Created,          PlanStatusFlags.InProcess, {from: owner, gas: transGas});
		reviewstore.setPromotion(ReviewAction.NotifyGM,           ReviewStatus.Created,            Actor.RS,                   ReviewStatus.ReviewesNotified, ReviewStatus.ReviewesNotified, PlanStatusFlags.InProcess, {from: owner, gas: transGas});
		reviewstore.setPromotion(ReviewAction.DoAnnualReport,     ReviewStatus.ReviewesNotified,   Actor.RS,                   ReviewStatus.ReportDone,       ReviewStatus.ReportDone,       PlanStatusFlags.InProcess, {from: owner, gas: transGas});
		reviewstore.setPromotion(ReviewAction.AproveAnnualReport, ReviewStatus.ReportDone,         Actor.RS | Actor.DG,        ReviewStatus.ReportApproved,   ReviewStatus.ReportApproved,   PlanStatusFlags.InProcess, {from: owner, gas: transGas});
		reviewstore.setPromotion(ReviewAction.NotifyReportAESF,   ReviewStatus.ReportApproved,     Actor.RS,                   ReviewStatus.AESFNotified,     ReviewStatus.AESFNotified,     PlanStatusFlags.InProcess, {from: owner, gas: transGas});
		reviewstore.setPromotion(ReviewAction.Terminate,          ReviewStatus.AESFNotified,       Actor.RS,                   ReviewStatus.Terminated,       ReviewStatus.Terminated,       PlanStatusFlags.InProcess, {from: owner, gas: transGas});

    var promo = reviewstore.getPromotion(ReviewAction.Terminate,  ReviewStatus.AESFNotified, {from: owner, gas: transGas});
    result = assert(promo[0] == 128, 'Error in setPromotions');
    msg = result.indexOf('PASS') !== -1 ? '--> done.' : result;
    console.log(msg);
};

var info = function () {
    console.log('-------------------------- CONTRACTS INFO -------------------------');
    console.log('/* Copy & paste this to access deployed contracts */');
    console.log('setAddrs({');
    console.log('securityInspection : "' + securityInspectionAddress + '",');
    console.log('planStore : "' + planStoreAddress + '",');
    console.log('alcoholAndDrugStore : "' + alcoholAndDrugStoreAddress + '",');
    console.log('operationalStore : "' + operationalStoreAddress + '",');
    console.log('equipmentStore : "' + equipmentStoreAddress + '",');
	  console.log('cargoStore : "' + cargoStoreAddress + '",');
    console.log('issueStore : "' + issueStoreAddress + '",');
    console.log('roleStoreAddress : "' + roleStoreAddress + '"');
    console.log('issueEvidenceStore : "' + issueEvidenceStoreAddress + '",');
    console.log('reviewStore : "' + reviewStoreAddress + '",');
    console.log('targetAnalysisStore : "' + targetAnalysisStoreAddress + '",');
    console.log('actionAnalysisStore : "' + actionAnalysisStoreAddress + '",');
    console.log('icsAttachmentStore : "' + icsAttachmentStoreAddress + '",');
    console.log('isfAttachmentStore : "' + isfAttachmentStoreAddress + '",');
    console.log('operationalEvidenceStore : "' + operationalEvidenceStoreAddress + '",');
    console.log('equipmentEvidenceStore : "' + equipmentEvidenceStoreAddress + '",');
    console.log('cargoEvidenceStore : "' + cargoEvidenceStoreAddress + '",');
    console.log('});');
    console.log('/* End here */');
    console.log('-------------------------------------------------------------------');
};

var roles = function () {
    console.log('---------------------------- ROLES INFO ---------------------------');
    console.log('roleRS : "' + roleRS + '", ' + roleStore.getRole(roleRS, {from: owner}));
    console.log('roleDG : "' + roleDG + '", ' + roleStore.getRole(roleDG, {from: owner}));
    console.log('roleRO : "' + roleRO + '", ' + roleStore.getRole(roleRO, {from: owner}));
    console.log('roleRRA : "' + roleRRA + '", ' + roleStore.getRole(roleRRA, {from: owner}));
    console.log('roleINSEG : "' + roleINSEG + '", ' + roleStore.getRole(roleINSEG, {from: owner}));
    console.log('roleDPSEG : "' + roleDPSEG + '", ' + roleStore.getRole(roleDPSEG, {from: owner}));
    console.log('roleCM : "' + roleCM + '", ' + roleStore.getRole(roleCM, {from: owner}));
    console.log('rolePF : "' + rolePF + '", ' + roleStore.getRole(rolePF, {from: owner}));
    console.log('-------------------------------------------------------------------');
};

var addRoles = function (rolestore) {
    console.log('Adding Roles ... ');
    rolestore.setRole(roleDG, Actor.DG, {from: owner});
    rolestore.setRole(roleRO, Actor.RO, {from: owner});
    rolestore.setRole(roleRRA, Actor.RRA, {from: owner});
    rolestore.setRole(roleINSEG, Actor.INSEG, {from: owner});
    rolestore.setRole(roleDPSEG, Actor.DPSEG, {from: owner});
    rolestore.setRole(roleCM, Actor.CM, {from: owner});
    rolestore.setRole(rolePF, Actor.PF, {from: owner});
    console.log('--> done.');
    roles();
};

var setContracts = function () {
    if (securityInspectionAddress === "") {
        securityInspectionAddress = securityInspectionDefault;
    }
    if (planStoreAddress === "") {
        planStoreAddress = planStoreDefault;
    }
    if (alcoholAndDrugStoreAddress === "") {
        alcoholAndDrugStoreAddress = alcoholAndDrugStoreDefault;
    }
    if (operationalStoreAddress === "") {
        operationalStoreAddress = operationalStoreDefault;
    }
    if (equipmentStoreAddress === "") {
        equipmentStoreAddress = equipmentStoreDefault;
    }
    if (cargoStoreAddress === "") {
        cargoStoreAddress = cargoStoreDefault;
    }
    if (issueStoreAddress === "") {
        issueStoreAddress = issueStoreDefault;
    }
    if (roleStoreAddress === "") {
        roleStoreAddress = roleStoreAddressDefault;
    }
    if (issueEvidenceStoreAddress === "") {
        issueEvidenceStoreAddress = issueEvidenceStoreDefault;
    }
    if (reviewStoreAddress === "") {
        reviewStoreAddress = reviewStoreDefault;
    }
    if (targetAnalysisStoreAddress === "") {
        targetAnalysisStoreAddress = targetAnalysisStoreDefault;
    }
    if (actionAnalysisStoreAddress === "") {
        actionAnalysisStoreAddress = actionAnalysisStoreDefault;
    }
    if (icsAttachmentStoreAddress === "") {
        icsAttachmentStoreAddress = icsAttachmentStoreDefault;
    }
    if (isfAttachmentStoreAddress === "") {
        isfAttachmentStoreAddress = isfAttachmentStoreDefault;
    }
    if (operationalEvidenceStoreAddress === "") {
        operationalEvidenceStoreAddress = operationalEvidenceStoreDefault;
    }
    if (equipmentEvidenceStoreAddress === "") {
        equipmentEvidenceStoreAddress = equipmentEvidenceStoreDefault;
    }
    if (cargoEvidenceStoreAddress === "") {
        cargoEvidenceStoreAddress = cargoEvidenceStoreDefault;
    }

    securityInspection = eth.contract(SecurityInspectionCompiled.abi).at(securityInspectionAddress);
    planStore = eth.contract(PlanStoreCompiled.abi).at(planStoreAddress);
    alcoholAndDrugStore = eth.contract(AlcoholAndDrugStoreCompiled.abi).at(alcoholAndDrugStoreAddress);
    roleStore = eth.contract(RoleStoreCompiled.abi).at(roleStoreAddress);
    operationalStore = eth.contract(OperationalStoreCompiled.abi).at(operationalStoreAddress);
    equipmentStore = eth.contract(EquipmentStoreCompiled.abi).at(equipmentStoreAddress);
    cargoStore = eth.contract(CargoStoreCompiled.abi).at(cargoStoreAddress);
    issueStore = eth.contract(IssueStoreCompiled.abi).at(issueStoreAddress);
    issueEvidenceStore = eth.contract(IssueEvidenceStoreCompiled.abi).at(issueEvidenceStoreAddress);
    reviewStore = eth.contract(ReviewStoreCompiled.abi).at(reviewStoreAddress);
    targetAnalysisStore = eth.contract(TargetAnalysisStoreCompiled.abi).at(targetAnalysisStoreAddress);
    actionAnalysisStore = eth.contract(ActionAnalysisStoreCompiled.abi).at(actionAnalysisStoreAddress);
    icsAttachmentStore = eth.contract(IcsAttachmentStoreCompiled.abi).at(icsAttachmentStoreAddress);
    isfAttachmentStore = eth.contract(IsfAttachmentStoreCompiled.abi).at(isfAttachmentStoreAddress);

    inspections.push({store:operationalStore, name:InspectionStoreName.Operational});
    inspections.push({store:equipmentStore, name:InspectionStoreName.Equipment});
    inspections.push({store:cargoStore, name:InspectionStoreName.Cargo});
};

var setAddrs = function (data) {
    securityInspectionAddress = data.securityInspectionAddress;
    planStoreAddress = data.planStoreAddress;
    alcoholAndDrugStoreAddress = data.alcoholAndDrugStoreAddress;
    roleStoreAddress = data.roleStoreAddress;
    operationalStoreAddress = data.operationalStoreAddress;
    equipmentStoreAddress = data.equipmentStoreAddress;
    cargoStoreAddress = data.cargoStoreAddress;
    issueStoreAddress = data.issueStoreAddress;
    issueEvidenceStoreAddress = data.issueEvidenceStoreAddress;
    reviewStoreAddress = data.reviewStoreAddress;
    targetAnalysisStoreAddress = data.targetAnalysisStoreAddress;
    actionAnalysisStoreAddress = data.actionAnalysisStoreAddress;
    icsAttachmentStoreAddress = data.icsAttachmentStoreAddress;
    isfAttachmentStoreAddress = data.isfAttachmentStoreAddress;
    operationalEvidenceStoreAddress = data.operationalEvidenceStoreAddress;
    equipmentEvidenceStoreAddress = data.equipmentEvidenceStoreAddress;
    cargoStoreEvidenceAddress = data.cargoEvidenceStoreAddress;


    securityInspection = eth.contract(SecurityInspectionCompiled.abi).at(securityInspectionAddress);
    planStore = eth.contract(PlanStoreCompiled.abi).at(planStoreAddress);
    alcoholAndDrugStore = eth.contract(AlcoholAndDrugStoreCompiled.abi).at(alcoholAndDrugStoreAddress);
    roleStore = eth.contract(RoleStoreCompiled.abi).at(roleStoreAddress);
    operationalStore = eth.contract(OperationalStoreCompiled.abi).at(operationalStoreAddress);
    equipmentStore = eth.contract(EquipmentStoreCompiled.abi).at(equipmentStoreAddress);
    cargoStore = eth.contract(CargoStoreCompiled.abi).at(cargoStoreAddress);
    issueStore = eth.contract(IssueStoreCompiled.abi).at(issueStoreAddress);
    issueEvidenceStore = eth.contract(IssueEvidenceStoreCompiled.abi).at(issueEvidenceStoreAddress);
    reviewStore = eth.contract(ReviewStoreCompiled.abi).at(reviewStoreAddress);
    targetAnalysisStore = eth.contract(TargetAnalysisStoreCompiled.abi).at(targetAnalysisStoreAddress);
    actionAnalysisStore = eth.contract(ActionAnalysisStoreCompiled.abi).at(actionAnalysisStoreAddress);
    isfAttachmentStore = eth.contract(IsfAttachmentStoreCompiled.abi).at(isfAttachmentStoreAddress);
    icsAttachmentStore = eth.contract(IcsAttachmentStoreCompiled.abi).at(icsAttachmentStoreAddress);
    operationalEvidenceStore = eth.contract(OperationalEvidenceStoreCompiled.abi).at(operationalEvidenceStoreAddress);
    equipmentEvidenceStore = eth.contract(EquipmentEvidenceStoreCompiled.abi).at(equipmentEvidenceStoreAddress);
    cargoEvidenceStore = eth.contract(CargoEvidenceStoreCompiled.abi).at(cargoEvidenceStoreAddress);
};

var init = function () {
    setContracts();
    info();
    console.log('Set promotions');
    planStorePromotions(planStore);
    alcoholAndDrugStorePromotions(alcoholAndDrugStore);

    for (var i = 0; i < inspections.length; i++) {
		inspectionStorePromotions(inspections[i].store, inspections[i].name);
    }

    issueStorePromotions(issueStore);
    reviewStorePromotions(reviewStore);

    console.log('Promotions configured');
    console.log('Add Roles');
    addRoles(roleStore);
};

var manage = function () {
    setContracts();
    info();
    console.log('Ready');
};

var push = function () {
    loadScript('script1.js');
};

var assert = function (value, desc) {
    var msg = value ? ' -> PASS' : ' -> *** FAIL ***';
    if (typeof desc !== 'undefined' && !value) {
        msg = msg + ' - ' + desc;
    }
    return msg;
};

var test = function () {
    setContracts();
    var result;

    console.log('--------------------------- Plans TEST ----------------------------');

    //New securityInspection Plan
    var planId = 'PLANID001';
    var hash = 'HASHPLAN01';
    var rejectHash = 'HASHPLANREJECTED1';
    var sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    var sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //Get securityInspection Plan
    var statusReaded = securityInspection.getPlanStatus(planId, {from: roleRS});
    result = assert(Number(statusReaded) === Number(PlanStatus.Created), 'Plan incorrect status');
    console.log('Plan status readed: ' + statusReaded + result);
    var planInfo = securityInspection.getPlanInfo(planId, PlanStatus.Created, {from: roleRS});
    result = assert(planInfo[0] > 0, 'Plan incorrect date');
    console.log('Plan info date: ' + planInfo[0] + result);
    result = assert(hash === planInfo[1], 'Plan incorrect hash');
    console.log('Plan info hash: ' + planInfo[1] + result);

    //Register securityInspection plan status
    securityInspection.registerPlan(planId, PlanAction.Reject, rejectHash, {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getPlanStatus(planId, {from: roleRS});
    result = assert(Number(statusReaded) === Number(PlanStatus.Rejected), 'Plan incorrect status');
    console.log('Plan registered : Status Rejected:' + statusReaded + result);

    //Update securityInspection Plan status
    securityInspection.setPlanStatus(planId, PlanStatus.Terminated, {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getPlanStatus(planId, {from: roleRS});
    result = assert(Number(statusReaded) === Number(PlanStatus.Terminated), 'Plan incorrect status');
    console.log('Plan status updated : status Terminated:' + statusReaded + result);



    console.log('-------------------------- AlcoholAndDrugs TEST ----------------------------');

    //Add Plan for controls
    planId = 'PLANID002';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //New securityInspection Control
    var controlId = 'CONTROLID001';
    var hashControl = 'HASHCONTROL01';
    var inspectionId = '';
    var staffId = '87129564S';
    var cType = ControlType.Random;
    sizePrev = securityInspection.controlCount(planId, {from: roleRS});
    securityInspection.addControl(planId, controlId, inspectionId, staffId, cType, hashControl, {from: roleRS, gas: transGas});
    sizePost = securityInspection.controlCount(planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Control not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Control created - Count: ' + sizePost + result);

    //Get securityInspection Control
    var index = sizePost - 1;
    statusReaded = securityInspection.getControlStatus(planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(ControlStatus.Planned), 'Control incorrect status');
    console.log('Control Status getted: Status Planned:' + statusReaded + result);
    var controlInfo = securityInspection.getControlInfo(planId, index, ControlStatus.Planned, {from: roleRS});
    result = assert(controlInfo[0] > 0, 'Control incorrect date');
    console.log('Control info date: ' + controlInfo[0] + result);
    result = assert(hashControl === controlInfo[1], 'Control incorrect hash');
    console.log('Control Info hash:' + controlInfo[1] + result);

    //Register securityInspection control status
    securityInspection.registerControl(planId, index, ControlAction.Create, rejectHash, {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getControlStatus(planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(ControlStatus.Created), 'Control incorrect status');
    console.log('Control registered result: status Created: ' + statusReaded + result);

    //Update securityInspection Control status
    securityInspection.setControlStatus(planId, index, ControlStatus.Stored , {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getControlStatus(planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(ControlStatus.Stored), 'Control incorrect status');
    console.log('Control status updated : status Stored: ' + statusReaded + result);

    console.log('-------------------------- Operational TEST ----------------------------');
    //Add Plan for Operational Inspection
    planId = 'PLANID003';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //New securityInspection Operational
    var inspectionId = 'OPERATIONALID001';
    var hashInspection = 'HASHINSPECTION01';
    var iType = OperationalInspectionType.ISOG;
    sizePrev = securityInspection.inspectionCount(InspectionStoreName.Operational, planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addInspection(InspectionStoreName.Operational, planId, inspectionId, iType, hashInspection, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionCount(InspectionStoreName.Operational, planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Operational Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Operational Inspection created - Count: ' + sizePost + result);

    //Get securityInspection Operational
    var index = sizePost - 1;
    statusReaded = securityInspection.getInspectionStatus(InspectionStoreName.Operational, planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(InspectionStatus.Created), 'Inspection incorrect status');
    console.log('Inspection Status getted: Status Created:' + statusReaded + result);
    var inspectionInfo = securityInspection.getInspectionInfo(InspectionStoreName.Operational, planId, index, InspectionStatus.Created, {from: roleRS});
    result = assert(inspectionInfo[0] > 0, 'Inspection incorrect date');
    console.log('Inspection info date: ' + inspectionInfo[0] + result);
    result = assert(hashInspection === inspectionInfo[1], 'Inspection incorrect hash');
    console.log('Inspection Info hash:' + inspectionInfo[1] + result);

    //Register securityInspection inspection status
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.Create, rejectHash, {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getInspectionStatus(InspectionStoreName.Operational, planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(InspectionStatus.Created), 'Inspection incorrect status');
    console.log('Inspection registered result: status Created: ' + statusReaded + result);


    //Update securityInspection Inspection status
    securityInspection.setInspectionStatus(InspectionStoreName.Operational, planId, index, InspectionStatus.Planned , {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getInspectionStatus(InspectionStoreName.Operational, planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(InspectionStatus.Planned), 'Inspection incorrect status');
    console.log('Inspection status updated : status Planned: ' + statusReaded + result);

    console.log('-------------------------- Equipment TEST ----------------------------');
    //Add Plan for Equipment Inspection
    planId = 'PLANID004';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //New securityInspection Equipment
    var inspectionId = 'EQUIPMENTID001';
    var hashInspection = 'HASHINSPECTION01';
    var iType = '';
    sizePrev = securityInspection.inspectionCount(InspectionStoreName.Equipment, planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addInspection(InspectionStoreName.Equipment, planId, inspectionId, iType, hashInspection, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionCount(InspectionStoreName.Equipment, planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Equipment Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Equipment Inspection created - Count: ' + sizePost + result);

    //Get securityInspection Equipment
    var index = sizePost - 1;
    statusReaded = securityInspection.getInspectionStatus(InspectionStoreName.Equipment, planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(InspectionStatus.Created), 'Inspection incorrect status');
    console.log('Inspection Status getted: Status Created:' + statusReaded + result);
    var inspectionInfo = securityInspection.getInspectionInfo(InspectionStoreName.Equipment, planId, index, InspectionStatus.Created, {from: roleRS});
    result = assert(inspectionInfo[0] > 0, 'Inspection incorrect date');
    console.log('Inspection info date: ' + inspectionInfo[0] + result);
    result = assert(hashInspection === inspectionInfo[1], 'Inspection incorrect hash');
    console.log('Inspection Info hash:' + inspectionInfo[1] + result);

    //Register securityInspection inspection status
    securityInspection.registerInspection(InspectionStoreName.Equipment, planId, index, InspectionAction.Create, rejectHash, {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getInspectionStatus(InspectionStoreName.Equipment, planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(InspectionStatus.Created), 'Inspection incorrect status');
    console.log('Inspection registered result: status Created: ' + statusReaded + result);

    //Update securityInspection Inspection status
    securityInspection.setInspectionStatus(InspectionStoreName.Equipment, planId, index, InspectionStatus.Planned , {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getInspectionStatus(InspectionStoreName.Equipment, planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(InspectionStatus.Planned), 'Inspection incorrect status');
    console.log('Inspection status updated : status Planned: ' + statusReaded + result);

    console.log('-------------------------- Cargo TEST ----------------------------');
    //Add Plan for Cargo Inspection
    planId = 'PLANID006';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //New securityInspection Cargo
    var inspectionId = 'CARGOID001';
    var hashInspection = 'HASHINSPECTION01';
    var iType = CargoInspectionType.ISCC;
    sizePrev = securityInspection.inspectionCount(InspectionStoreName.Cargo, planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addInspection(InspectionStoreName.Cargo, planId, inspectionId, iType, hashInspection, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionCount(InspectionStoreName.Cargo, planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Cargo Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Cargo Inspection created - Count: ' + sizePost + result);

    //Get securityInspection Cargo
    var index = sizePost - 1;
    statusReaded = securityInspection.getInspectionStatus(InspectionStoreName.Cargo, planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(InspectionStatus.Created), 'Inspection incorrect status');
    console.log('Inspection Status getted: Status Created:' + statusReaded + result);
    var inspectionInfo = securityInspection.getInspectionInfo(InspectionStoreName.Cargo, planId, index, InspectionStatus.Created, {from: roleRS});
    result = assert(inspectionInfo[0] > 0, 'Inspection incorrect date');
    console.log('Inspection info date: ' + inspectionInfo[0] + result);
    result = assert(hashInspection === inspectionInfo[1], 'Inspection incorrect hash');
    console.log('Inspection Info hash:' + inspectionInfo[1] + result);

    //Register securityInspection inspection status
    securityInspection.registerInspection(InspectionStoreName.Cargo, planId, index, InspectionAction.Create, rejectHash, {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getInspectionStatus(InspectionStoreName.Cargo, planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(InspectionStatus.Created), 'Inspection incorrect status');
    console.log('Inspection registered result: status Created: ' + statusReaded + result);

    //Update securityInspection Inspection status
    securityInspection.setInspectionStatus(InspectionStoreName.Cargo, planId, index, InspectionStatus.Planned , {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getInspectionStatus(InspectionStoreName.Cargo, planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(InspectionStatus.Planned), 'Inspection incorrect status');
    console.log('Inspection status updated : status Planned: ' + statusReaded + result);

    console.log('-------------------------- Issue TEST ----------------------------');
    //Add Plan for Issue
    planId = 'PLANID005';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //Add Inspection Operational for Issue
    var inspectionId = 'OPERATIONALID002';
    var hashInspection = 'HASHINSPECTION01';
    var iType = OperationalInspectionType.ISOG;
    sizePrev = securityInspection.inspectionCount(InspectionStoreName.Operational, planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addInspection(InspectionStoreName.Operational, planId, inspectionId, iType, hashInspection, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionCount(InspectionStoreName.Operational, planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Operational Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Operational Inspection created - Count: ' + sizePost + result);
    var index = sizePost - 1;
    var hash = 'SOMEHASH';

    // Move Inspection To Appropiate Status In Process
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.Create, hash, {from: roleRS, gas: transGas});
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.Plan, hash, {from: roleRS, gas: transGas});
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.Assign, hash, {from: roleRS, gas: transGas});
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.DoInspection, hash, {from: roleRS, gas: transGas});
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.DoReport, hash, {from: roleRS, gas: transGas});
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.Start, hash, {from: roleRS, gas: transGas});

    //New Issue
    var issueId = 'ISSUEID001';
    var hashIssue = 'HASHISSUE01';
    var issueName = 'Issue #1 - Descripcion de la anomalia en una cadena de 64 bytes.';
    sizePrev = securityInspection.issueCount(InspectionStoreName.Operational, planId, inspectionId, {from: roleRS});
    securityInspection.addIssue(InspectionStoreName.Operational, planId, inspectionId, issueId, issueName, hashIssue, {from: roleRS, gas: transGas});
    sizePost = securityInspection.issueCount(InspectionStoreName.Operational, planId, inspectionId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Issue for Operational Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Issue Inspection created - Count: ' + sizePost + result);

    //Get Issue
    var index = sizePost - 1;
    statusReaded = securityInspection.getIssueStatus(InspectionStoreName.Operational, planId, inspectionId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(IssueStatus.Created), 'Issue incorrect status');
    console.log('Issue Status getted: Status Created:' + statusReaded + result);
    var issueInfo = securityInspection.getIssueInfo(InspectionStoreName.Operational, planId, inspectionId, index, IssueStatus.Created, {from: roleRS});
    result = assert(issueInfo[0] > 0, 'Issue incorrect date');
    console.log('Issue info date: ' + issueInfo[0] + result);
    result = assert(hashIssue === issueInfo[1], 'Issue incorrect hash');
    console.log('Issue Info hash:' + issueInfo[1] + result);

    //Register Issue status
    securityInspection.registerIssue(InspectionStoreName.Operational, planId, inspectionId, index, IssueAction.Create, hash, {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getIssueStatus(InspectionStoreName.Operational, planId, inspectionId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(IssueStatus.Created), 'Issue incorrect status');
    console.log('Issue registered result: status Created: ' + statusReaded + result);

    //Update Issue status
    securityInspection.setIssueStatus(InspectionStoreName.Operational, planId, inspectionId, index, IssueStatus.InProcess, {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getIssueStatus(InspectionStoreName.Operational, planId, inspectionId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(IssueStatus.InProcess), 'Issue incorrect status');
    console.log('Issue status updated : status InProcess: ' + statusReaded + result);

    console.log('-------------------------- Issue Evidence TEST ----------------------------');

    //Add Plan for Issue Evidence
    planId = 'PLANID009';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //Add Inspection Operational for Issue Evidence
    var inspectionId = 'OPERATIONALID003';
    var hashInspection = 'HASHINSPECTION01';
    var iType = OperationalInspectionType.ISOG;
    sizePrev = securityInspection.inspectionCount(InspectionStoreName.Operational, planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addInspection(InspectionStoreName.Operational, planId, inspectionId, iType, hashInspection, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionCount(InspectionStoreName.Operational, planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Operational Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Operational Inspection created - Count: ' + sizePost + result);
    var index = sizePost - 1;
    var hash = 'SOMEHASH';

    // Move Inspection To Appropiate Status In Process
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.Create, hash, {from: roleRS, gas: transGas});
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.Plan, hash, {from: roleRS, gas: transGas});
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.Assign, hash, {from: roleRS, gas: transGas});
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.DoInspection, hash, {from: roleRS, gas: transGas});
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.DoReport, hash, {from: roleRS, gas: transGas});
    securityInspection.registerInspection(InspectionStoreName.Operational, planId, index, InspectionAction.Start, hash, {from: roleRS, gas: transGas});

    //New Issue
    var issueId = 'ISSUEID002';
    var hashIssue = 'HASHISSUE02';
    var issueName = 'Issue #2 - Descripcion de la anomalia en una cadena de 64 bytes.';
    sizePrev = securityInspection.issueCount(InspectionStoreName.Operational, planId, inspectionId, {from: roleRS});
    securityInspection.addIssue(InspectionStoreName.Operational, planId, inspectionId, issueId, issueName, hashIssue, {from: roleRS, gas: transGas});
    sizePost = securityInspection.issueCount(InspectionStoreName.Operational, planId, inspectionId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Issue for Operational Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Issue Inspection created - Count: ' + sizePost + result);

    //Add Issue Evidence
    var hashIssueEvidence = 'HASHEVIDENCE01';
    var issueEvidenceName = 'Issue Evidence #1 - Descripcion de la evidencia de una anomalia en una cadena de 64 bytes.';
    sizePrev = securityInspection.issueEvidenceCount(InspectionStoreName.Operational, issueId, {from: roleRS});
    securityInspection.addIssueEvidence(InspectionStoreName.Operational, issueId, issueEvidenceName, hashIssueEvidence, {from: roleRS, gas: transGas});
    sizePost = securityInspection.issueEvidenceCount(InspectionStoreName.Operational, issueId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Issue Evidence for Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Issue Evidence Inspection created - Count: ' + sizePost + result);

    //Get Issue Evidence
    var index = sizePost - 1;
    var issueEvidenceInfo = securityInspection.getIssueEvidence(InspectionStoreName.Operational, issueId, index, {from: roleRS});
    result = assert(issueEvidenceInfo[0] == issueId, 'Issue Evidence incorrect IssueId');
    console.log('Issue Evidence info IssueId: ' + issueEvidenceInfo[0] + result);
    result = assert(hashIssueEvidence === issueEvidenceInfo[2], 'Issue Evidence incorrect hash');
    console.log('Issue Evidence Info hash:' + issueEvidenceInfo[2] + result);

    //console.log('---------------------------- FASE V ------------------------------');
    console.log('-------------------------- Review TEST ----------------------------');

    //Add Plan for reviews
    planId = 'PLANID010';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //New securityInspection Review
    var reviewId = 'REVIEWID001';
    var hashReview = 'HASHREVIEW01';
    sizePrev = securityInspection.reviewCount(planId, {from: roleRS});
    securityInspection.addReview(planId, reviewId, hashReview, {from: roleRS, gas: transGas});
    sizePost = securityInspection.reviewCount(planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Review not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Review created - Count: ' + sizePost + result);

    //Get securityInspection Review
    index = sizePost - 1;
    statusReaded = securityInspection.getReviewStatus(planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(ReviewStatus.Created), 'Review incorrect status');
    console.log('Review Status getted: Status Created:' + statusReaded + result);
    var reviewInfo = securityInspection.getReviewInfo(planId, index, ReviewStatus.Created, {from: roleRS});
    result = assert(reviewInfo[0] > 0, 'Review incorrect date');
    console.log('Review info date: ' + reviewInfo[0] + result);
    result = assert(hashReview === reviewInfo[1], 'Review incorrect hash');
    console.log('Review Info hash:' + reviewInfo[1] + result);

    //Register securityInspection Review status
    securityInspection.registerReview(planId, index, ReviewAction.NotifyGM, rejectHash, {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getReviewStatus(planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(ReviewStatus.ReviewesNotified), 'Review incorrect status');
    console.log('Review registered result: status ReviewesNotified: ' + statusReaded + result);

    //Update securityInspection Review status
    securityInspection.setReviewStatus(planId, index, ReviewStatus.Terminated , {from: roleRS, gas: transGas});
    statusReaded = securityInspection.getReviewStatus(planId, index, {from: roleRS});
    result = assert(Number(statusReaded) === Number(ReviewStatus.Terminated), 'Review incorrect status');
    console.log('Review status updated : status Terminated: ' + statusReaded + result);

    console.log('-------------------------- TargetAnalysis TEST ----------------------------');
    //Add Plan for Issue
    planId = 'PLANID011';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //Add Review for Target Analysis
    reviewId = 'REVIEWID002';
    hashReview = 'HASHREVIEW02';
    sizePrev = securityInspection.reviewCount(planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addReview(planId, reviewId, hashReview, {from: roleRS, gas: transGas});
    sizePost = securityInspection.reviewCount(planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Review not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Review created - Count: ' + sizePost + result);
    index = sizePost - 1;

    //New Target Analysis
    var hashAnalysis = 'HASHANALYSIS01';
    var analysisName = 'TargetAnalysis #1 - Descripcion de analisis en cadena de 64 bytes.';
    sizePrev = securityInspection.analysisCount(AnalysisStoreName.TargetAnalysis, planId, reviewId, {from: roleRS});
    securityInspection.addAnalysis(AnalysisStoreName.TargetAnalysis, planId, reviewId, analysisName, hashAnalysis, {from: roleRS, gas: transGas});
    sizePost = securityInspection.analysisCount(AnalysisStoreName.TargetAnalysis, planId, reviewId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Target Analysis for Review not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Target Analysis created - Count: ' + sizePost + result);

    //Get Target Analysis
    index = sizePost - 1;
    var analysisInfo = securityInspection.getAnalysis(AnalysisStoreName.TargetAnalysis, planId, reviewId, index, {from: roleRS});
    result = assert(hashAnalysis === analysisInfo[1], 'Target Analysis incorrect hash');
    console.log('Target Analysis Info hash:' + analysisInfo[1] + result);

    console.log('-------------------------- ActionAnalysis TEST ----------------------------');
    //Add Plan for Issue
    planId = 'PLANID012';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //Add Review for Action Analysis
    reviewId = 'REVIEWID003';
    hashReview = 'HASHREVIEW03';
    sizePrev = securityInspection.reviewCount(planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addReview(planId, reviewId, hashReview, {from: roleRS, gas: transGas});
    sizePost = securityInspection.reviewCount(planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Review not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Review created - Count: ' + sizePost + result);
    index = sizePost - 1;

    //New Action Analysis
    hashAnalysis = 'HASHANALYSIS02';
    analysisName = 'ActionAnalysis #1 - Descripcion de analisis en cadena de 64 bytes.';
    sizePrev = securityInspection.analysisCount(AnalysisStoreName.ActionAnalysis, planId, reviewId, {from: roleRS});
    securityInspection.addAnalysis(AnalysisStoreName.ActionAnalysis, planId, reviewId, analysisName, hashAnalysis, {from: roleRS, gas: transGas});
    sizePost = securityInspection.analysisCount(AnalysisStoreName.ActionAnalysis, planId, reviewId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Action Analysis for Review not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Action Analysis created - Count: ' + sizePost + result);

    //Get Action Analysis
    index = sizePost - 1;
    analysisInfo = securityInspection.getAnalysis(AnalysisStoreName.ActionAnalysis, planId, reviewId, index, {from: roleRS});
    result = assert(hashAnalysis === analysisInfo[1], 'Action Analysis incorrect hash');
    console.log('Action Analysis Info hash:' + analysisInfo[1] + result);


    console.log('-------------------------- IcsAttachment TEST ----------------------------');
    //Add Plan for Issue
    planId = 'PLANID013';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //Add Review for Ics Attachment
    reviewId = 'REVIEWID004';
    hashReview = 'HASHREVIEW04';
    sizePrev = securityInspection.reviewCount(planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addReview(planId, reviewId, hashReview, {from: roleRS, gas: transGas});
    sizePost = securityInspection.reviewCount(planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Review not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Review created - Count: ' + sizePost + result);
    index = sizePost - 1;
    hash = 'SOMEHASH';

    // Move Review To Appropiate Status
    securityInspection.registerReview(planId, index, ReviewAction.NotifyGM, hash, {from: roleRS, gas: transGas});
    securityInspection.registerReview(planId, index, ReviewAction.DoAnnualReport, hash, {from: roleRS, gas: transGas});

    //New Ics Attachment
    var hashAttachment = 'HASHATTACHMENT01';
    var attachmentName = 'Ics Attachment #1 - Descripcion de anexo en una cadena de 64 bytes.';
    sizePrev = securityInspection.attachmentCount(AttachmentStoreName.IcsAttachment, planId, reviewId, {from: roleRS});
    securityInspection.addAttachment(AttachmentStoreName.IcsAttachment, planId, reviewId, attachmentName, hashAttachment, {from: roleRS, gas: transGas});
    sizePost = securityInspection.attachmentCount(AttachmentStoreName.IcsAttachment, planId, reviewId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Ics Attachment for Review not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Ics Attachment created - Count: ' + sizePost + result);

    //Get Ics Attachment
    index = sizePost - 1;
    var attachmentInfo = securityInspection.getAttachment(AttachmentStoreName.IcsAttachment, planId, reviewId, index, {from: roleRS});
    result = assert(hashAttachment === attachmentInfo[1], 'Ics Attachment incorrect hash');
    console.log('Ics Attachment Info hash:' + attachmentInfo[1] + result);

    console.log('-------------------------- IsfAttachment TEST ----------------------------');
    //Add Plan for Issue
    planId = 'PLANID014';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //Add Review for Isf Attachment
    reviewId = 'REVIEWID005';
    hashReview = 'HASHREVIEW05';
    sizePrev = securityInspection.reviewCount(planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addReview(planId, reviewId, hashReview, {from: roleRS, gas: transGas});
    sizePost = securityInspection.reviewCount(planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Review not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Review created - Count: ' + sizePost + result);
    index = sizePost - 1;
    hash = 'SOMEHASH';

    // Move Review To Appropiate Status
    securityInspection.registerReview(planId, index, ReviewAction.NotifyGM, hash, {from: roleRS, gas: transGas});
    securityInspection.registerReview(planId, index, ReviewAction.DoAnnualReport, hash, {from: roleRS, gas: transGas});

    //New Isf Attachment
    hashAttachment = 'HASHATTACHMENT02';
    attachmentName = 'Isf Attachment #1 - Descripcion de anexo en una cadena de 64 bytes.';
    sizePrev = securityInspection.attachmentCount(AttachmentStoreName.IsfAttachment, planId, reviewId, {from: roleRS});
    securityInspection.addAttachment(AttachmentStoreName.IsfAttachment, planId, reviewId, attachmentName, hashAttachment, {from: roleRS, gas: transGas});
    sizePost = securityInspection.attachmentCount(AttachmentStoreName.IsfAttachment, planId, reviewId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Isf Attachment for Review not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Isf Attachment created - Count: ' + sizePost + result);

    //Get Isf Attachment
    index = sizePost - 1;
    attachmentInfo = securityInspection.getAttachment(AttachmentStoreName.IsfAttachment, planId, reviewId, index, {from: roleRS});
    result = assert(hashAttachment === attachmentInfo[1], 'Isf Attachment incorrect hash');
    console.log('Isf Attachment Info hash:' + attachmentInfo[1] + result);

    console.log('----------------------- OperationalInspectionEvidence TEST -------------------------');
    //Add Plan for Operational Inspection Evidence
    planId = 'PLANID015';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //Add Operational Inspection for Operational Inspection Evidence
    inspectionId = 'OPERATIONALID004';
    hashInspection = 'HASHOPERATIONAL04';
    iType = OperationalInspectionType.ISOG;
    sizePrev = securityInspection.inspectionCount(InspectionStoreName.Operational, planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addInspection(InspectionStoreName.Operational, planId, inspectionId, iType, hashInspection, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionCount(InspectionStoreName.Operational, planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Operational Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Operational Inspection created - Count: ' + sizePost + result);
    index = sizePost - 1;

    //Add Operational Inspection Evidence
    var hashInspectionEvidence = 'HASHEVIDENCE01';
    var inspectionEvidenceName = 'Evidence #1 - Descripcion de la evidencia en una cadena de 64 bytes.';
    sizePrev = securityInspection.inspectionEvidenceCount(InspectionStoreName.Operational, planId, inspectionId, {from: roleRS});
    securityInspection.addInspectionEvidence(InspectionStoreName.Operational, planId, inspectionId, inspectionEvidenceName, hashInspectionEvidence, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionEvidenceCount(InspectionStoreName.Operational, planId, inspectionId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Evidence for Operational Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Evidence Operational Inspection created - Count: ' + sizePost + result);

    //Get Operational Inspection Evidence
    index = sizePost - 1;
    var inspectionEvidenceInfo = securityInspection.getInspectionEvidence(InspectionStoreName.Operational, planId, inspectionId, index, {from: roleRS});
    result = assert(hashInspectionEvidence === inspectionEvidenceInfo[1], 'Evidence Operational Inspection incorrect hash');
    console.log('Evidence Operational Inspection hash:' + inspectionEvidenceInfo[1] + result);

    console.log('----------------------- EquipmentInspectionEvidence TEST -------------------------');
    //Add Plan for Equipment Inspection Evidence
    planId = 'PLANID016';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //Add Operational Inspection for Equipment Inspection Evidence
    inspectionId = 'EQUIPMENTID002';
    hashInspection = 'HASHEQUIPMENT02';
    iType = '';
    sizePrev = securityInspection.inspectionCount(InspectionStoreName.Equipment, planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addInspection(InspectionStoreName.Equipment, planId, inspectionId, iType, hashInspection, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionCount(InspectionStoreName.Equipment, planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Equipment Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Equipment Inspection created - Count: ' + sizePost + result);
    index = sizePost - 1;

    //Add Equipment Inspection Evidence
    hashInspectionEvidence = 'HASHEVIDENCE02';
    inspectionEvidenceName = 'Evidence #2 - Descripcion de la evidencia en una cadena de 64 bytes.';
    sizePrev = securityInspection.inspectionEvidenceCount(InspectionStoreName.Equipment, planId, inspectionId, {from: roleRS});
    securityInspection.addInspectionEvidence(InspectionStoreName.Equipment, planId, inspectionId, inspectionEvidenceName, hashInspectionEvidence, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionEvidenceCount(InspectionStoreName.Equipment, planId, inspectionId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Evidence for Equipment Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Evidence Equipment Inspection created - Count: ' + sizePost + result);

    //Get Equipment Inspection Evidence
    index = sizePost - 1;
    var inspectionEvidenceInfo = securityInspection.getInspectionEvidence(InspectionStoreName.Equipment, planId, inspectionId, index, {from: roleRS});
    result = assert(hashInspectionEvidence === inspectionEvidenceInfo[1], 'Evidence Equipment Inspection incorrect hash');
    console.log('Evidence Equipment Inspection hash:' + inspectionEvidenceInfo[1] + result);


    console.log('----------------------- CargoInspectionEvidence TEST -------------------------');
    //Add Plan for Cargo Inspection Evidence
    planId = 'PLANID017';
    sizePrev = securityInspection.planCount({from: roleRS});
    securityInspection.addPlan(planId, hash, {from: roleRS, gas: transGas});
    sizePost = securityInspection.planCount({from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Plan not created. Antes:' + sizePrev + 'Despues:' + sizePost);
    console.log('Plan created - Count: ' + sizePost + result);

    //Add Cargo Inspection for Cargo Inspection Evidence
    inspectionId = 'CARGOID002';
    hashInspection = 'HASHCARGO02';
    iType = CargoInspectionType.ISCC;
    sizePrev = securityInspection.inspectionCount(InspectionStoreName.Cargo, planId, {from: roleRS});
    securityInspection.setPlanStatus(planId, PlanStatus.InProcess, {from: roleRS, gas: transGas});
    securityInspection.addInspection(InspectionStoreName.Cargo, planId, inspectionId, iType, hashInspection, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionCount(InspectionStoreName.Cargo, planId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Cargo Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Cargo Inspection created - Count: ' + sizePost + result);
    index = sizePost - 1;

    //Add Cargo Inspection Evidence
    hashInspectionEvidence = 'HASHEVIDENCE03';
    inspectionEvidenceName = 'Evidence #3 - Descripcion de la evidencia en una cadena de 64 bytes.';
    sizePrev = securityInspection.inspectionEvidenceCount(InspectionStoreName.Cargo, planId, inspectionId, {from: roleRS});
    securityInspection.addInspectionEvidence(InspectionStoreName.Cargo, planId, inspectionId, inspectionEvidenceName, hashInspectionEvidence, {from: roleRS, gas: transGas});
    sizePost = securityInspection.inspectionEvidenceCount(InspectionStoreName.Cargo, planId, inspectionId, {from: roleRS});
    result = assert(Number(sizePost) === Number(sizePrev) + 1, 'Evidence for Cargo Inspection not created. Before: ' + sizePrev + ' - After: ' + sizePost);
    console.log('Evidence Cargo Inspection created - Count: ' + sizePost + result);

    //Get Cargo Inspection Evidence
    index = sizePost - 1;
    inspectionEvidenceInfo = securityInspection.getInspectionEvidence(InspectionStoreName.Cargo, planId, inspectionId, index, {from: roleRS});
    result = assert(hashInspectionEvidence === inspectionEvidenceInfo[1], 'Evidence Cargo Inspection incorrect hash');
    console.log('Evidence Cargo Inspection hash:' + inspectionEvidenceInfo[1] + result);
    console.log('-------------------------- Finished TESTs ----------------------------');

};

var usage = function () {
    console.log('Usage: ');
    console.log('     deploy()   -> Deploy contracts.');
    console.log('     init()     -> Initialize and configure contracts.');
    console.log('     setAddrs() -> Sets previous deployed contract addresses.');
    console.log('     manage()   -> Manage contracts.');
    console.log('     info()     -> Print contracts information.');
    console.log('     roles()    -> Print roles information.');
    console.log('     push()     -> Push contracts deployment.');
    console.log('     test()     -> Execute a simple use case.');
    console.log('     usage()    -> Show this help.');
};

function initCB() {

  init();
}

function deployCB(callback) {
  deploy(callback);
}

usage();
//automated
